/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",I="\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+M+"*\\]",W=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=/[^\x20\t\r\n\f]+/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=/^-ms-/,U=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,qe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+x.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=/\?/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=/\[\]$/,Dt=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var qt=/%20/g,Lt=/#.*$/,Ht=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Mt=/^(?:GET|HEAD)$/,Rt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});

/*
    jQuery Masked Input Plugin
    Copyright (c) 2007 - 2015 Josh Bush (digitalbush.com)
    Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
    Version: 1.4.1
*/
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a("object"==typeof exports?require("jquery"):jQuery)}(function(a){var b,c=navigator.userAgent,d=/iphone/i.test(c),e=/chrome/i.test(c),f=/android/i.test(c);a.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},a.fn.extend({caret:function(a,b){var c;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof a?(b="number"==typeof b?b:a,this.each(function(){this.setSelectionRange?this.setSelectionRange(a,b):this.createTextRange&&(c=this.createTextRange(),c.collapse(!0),c.moveEnd("character",b),c.moveStart("character",a),c.select())})):(this[0].setSelectionRange?(a=this[0].selectionStart,b=this[0].selectionEnd):document.selection&&document.selection.createRange&&(c=document.selection.createRange(),a=0-c.duplicate().moveStart("character",-1e5),b=a+c.text.length),{begin:a,end:b})},unmask:function(){return this.trigger("unmask")},mask:function(c,g){var h,i,j,k,l,m,n,o;if(!c&&this.length>0){h=a(this[0]);var p=h.data(a.mask.dataName);return p?p():void 0}return g=a.extend({autoclear:a.mask.autoclear,placeholder:a.mask.placeholder,completed:null},g),i=a.mask.definitions,j=[],k=n=c.length,l=null,a.each(c.split(""),function(a,b){"?"==b?(n--,k=a):i[b]?(j.push(new RegExp(i[b])),null===l&&(l=j.length-1),k>a&&(m=j.length-1)):j.push(null)}),this.trigger("unmask").each(function(){function h(){if(g.completed){for(var a=l;m>=a;a++)if(j[a]&&C[a]===p(a))return;g.completed.call(B)}}function p(a){return g.placeholder.charAt(a<g.placeholder.length?a:0)}function q(a){for(;++a<n&&!j[a];);return a}function r(a){for(;--a>=0&&!j[a];);return a}function s(a,b){var c,d;if(!(0>a)){for(c=a,d=q(b);n>c;c++)if(j[c]){if(!(n>d&&j[c].test(C[d])))break;C[c]=C[d],C[d]=p(d),d=q(d)}z(),B.caret(Math.max(l,a))}}function t(a){var b,c,d,e;for(b=a,c=p(a);n>b;b++)if(j[b]){if(d=q(b),e=C[b],C[b]=c,!(n>d&&j[d].test(e)))break;c=e}}function u(){var a=B.val(),b=B.caret();if(o&&o.length&&o.length>a.length){for(A(!0);b.begin>0&&!j[b.begin-1];)b.begin--;if(0===b.begin)for(;b.begin<l&&!j[b.begin];)b.begin++;B.caret(b.begin,b.begin)}else{for(A(!0);b.begin<n&&!j[b.begin];)b.begin++;B.caret(b.begin,b.begin)}h()}function v(){A(),B.val()!=E&&B.change()}function w(a){if(!B.prop("readonly")){var b,c,e,f=a.which||a.keyCode;o=B.val(),8===f||46===f||d&&127===f?(b=B.caret(),c=b.begin,e=b.end,e-c===0&&(c=46!==f?r(c):e=q(c-1),e=46===f?q(e):e),y(c,e),s(c,e-1),a.preventDefault()):13===f?v.call(this,a):27===f&&(B.val(E),B.caret(0,A()),a.preventDefault())}}function x(b){if(!B.prop("readonly")){var c,d,e,g=b.which||b.keyCode,i=B.caret();if(!(b.ctrlKey||b.altKey||b.metaKey||32>g)&&g&&13!==g){if(i.end-i.begin!==0&&(y(i.begin,i.end),s(i.begin,i.end-1)),c=q(i.begin-1),n>c&&(d=String.fromCharCode(g),j[c].test(d))){if(t(c),C[c]=d,z(),e=q(c),f){var k=function(){a.proxy(a.fn.caret,B,e)()};setTimeout(k,0)}else B.caret(e);i.begin<=m&&h()}b.preventDefault()}}}function y(a,b){var c;for(c=a;b>c&&n>c;c++)j[c]&&(C[c]=p(c))}function z(){B.val(C.join(""))}function A(a){var b,c,d,e=B.val(),f=-1;for(b=0,d=0;n>b;b++)if(j[b]){for(C[b]=p(b);d++<e.length;)if(c=e.charAt(d-1),j[b].test(c)){C[b]=c,f=b;break}if(d>e.length){y(b+1,n);break}}else C[b]===e.charAt(d)&&d++,k>b&&(f=b);return a?z():k>f+1?g.autoclear||C.join("")===D?(B.val()&&B.val(""),y(0,n)):z():(z(),B.val(B.val().substring(0,f+1))),k?b:l}var B=a(this),C=a.map(c.split(""),function(a,b){return"?"!=a?i[a]?p(b):a:void 0}),D=C.join(""),E=B.val();B.data(a.mask.dataName,function(){return a.map(C,function(a,b){return j[b]&&a!=p(b)?a:null}).join("")}),B.one("unmask",function(){B.off(".mask").removeData(a.mask.dataName)}).on("focus.mask",function(){if(!B.prop("readonly")){clearTimeout(b);var a;E=B.val(),a=A(),b=setTimeout(function(){B.get(0)===document.activeElement&&(z(),a==c.replace("?","").length?B.caret(0,a):B.caret(a))},10)}}).on("blur.mask",v).on("keydown.mask",w).on("keypress.mask",x).on("input.mask paste.mask",function(){B.prop("readonly")||setTimeout(function(){var a=A(!0);B.caret(a),h()},0)}),e&&f&&B.off("input.mask").on("input.mask",u),A()})}})});
// ==================================================
// fancyBox v3.5.7
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2019 fancyApps
//
// ==================================================
!function(t,e,n,o){"use strict";function i(t,e){var o,i,a,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=h(t.data.options,e)),o=e.$target||n(t.currentTarget).trigger("blur"),(a=n.fancybox.getInstance())&&a.$trigger&&a.$trigger.is(o)||(e.selector?s=n(e.selector):(i=o.attr("data-fancybox")||"",i?(s=t.data?t.data.items:[],s=s.length?s.filter('[data-fancybox="'+i+'"]'):n('[data-fancybox="'+i+'"]')):s=[o]),r=n(s).index(o),r<0&&(r=0),a=n.fancybox.open(s,e,r),a.$trigger=o))}if(t.console=t.console||{info:function(t){}},n){if(n.fn.fancybox)return void console.info("fancyBox already initialized");var a={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=n(t),r=n(e),c=0,l=function(t){return t&&t.hasOwnProperty&&t instanceof n},d=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),u=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),f=function(){var t,n=e.createElement("fakeelement"),o={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in o)if(void 0!==n.style[t])return o[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},h=function(t,e){var o=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(o[t]=e)}),o},g=function(t){var o,i;return!(!t||t.ownerDocument!==e)&&(n(".fancybox-container").css("pointer-events","none"),o={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},i=e.elementFromPoint(o.x,o.y)===t,n(".fancybox-container").css("pointer-events",""),i)},b=function(t,e,o){var i=this;i.opts=h({index:o},n.fancybox.defaults),n.isPlainObject(e)&&(i.opts=h(i.opts,e)),n.fancybox.isMobile&&(i.opts=h(i.opts,i.opts.mobile)),i.id=i.opts.id||++c,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init()};n.extend(b.prototype,{init:function(){var o,i,a=this,s=a.group[a.currIndex],r=s.opts;r.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&!1!==r.hideScrollbar&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+"px;}</style>"),n("body").addClass("compensate-for-scrollbar")),i="",n.each(r.buttons,function(t,e){i+=r.btnTpl[e]||""}),o=n(a.translate(a,r.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",r.btnTpl.arrowLeft+r.btnTpl.arrowRight))).attr("id","fancybox-container-"+a.id).addClass(r.baseClass).data("FancyBox",a).appendTo(r.parentEl),a.$refs={container:o},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){a.$refs[t]=o.find(".fancybox-"+t)}),a.trigger("onInit"),a.activate(),a.jumpTo(a.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return void 0===n[e]?t:n[e]})},addContent:function(t){var e,o=this,i=n.makeArray(t);n.each(i,function(t,e){var i,a,s,r,c,l={},d={};n.isPlainObject(e)?(l=e,d=e.opts||e):"object"===n.type(e)&&n(e).length?(i=n(e),d=i.data()||{},d=n.extend(!0,{},d,d.options),d.$orig=i,l.src=o.opts.src||d.src||i.attr("href"),l.type||l.src||(l.type="inline",l.src=e)):l={type:"html",src:e+""},l.opts=n.extend(!0,{},o.opts,d),n.isArray(d.buttons)&&(l.opts.buttons=d.buttons),n.fancybox.isMobile&&l.opts.mobile&&(l.opts=h(l.opts,l.opts.mobile)),a=l.type||l.opts.type,r=l.src||"",!a&&r&&((s=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(a="video",l.opts.video.format||(l.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?a="image":r.match(/\.(pdf)((\?|#).*)?$/i)?(a="iframe",l=n.extend(!0,l,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===r.charAt(0)&&(a="inline")),a?l.type=a:o.trigger("objectNeedsType",l),l.contentType||(l.contentType=n.inArray(l.type,["html","inline","ajax"])>-1?"html":l.type),l.index=o.group.length,"auto"==l.opts.smallBtn&&(l.opts.smallBtn=n.inArray(l.type,["html","inline","ajax"])>-1),"auto"===l.opts.toolbar&&(l.opts.toolbar=!l.opts.smallBtn),l.$thumb=l.opts.$thumb||null,l.opts.$trigger&&l.index===o.opts.index&&(l.$thumb=l.opts.$trigger.find("img:first"),l.$thumb.length&&(l.opts.$orig=l.opts.$trigger)),l.$thumb&&l.$thumb.length||!l.opts.$orig||(l.$thumb=l.opts.$orig.find("img:first")),l.$thumb&&!l.$thumb.length&&(l.$thumb=null),l.thumb=l.opts.thumb||(l.$thumb?l.$thumb[0].src:null),"function"===n.type(l.opts.caption)&&(l.opts.caption=l.opts.caption.apply(e,[o,l])),"function"===n.type(o.opts.caption)&&(l.opts.caption=o.opts.caption.apply(e,[o,l])),l.opts.caption instanceof n||(l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+""),"ajax"===l.type&&(c=r.split(/\s+/,2),c.length>1&&(l.src=c.shift(),l.opts.filter=c.shift())),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),o.group.push(l)}),Object.keys(o.slides).length&&(o.updateControls(),(e=o.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}).on("click.fb","[data-fancybox-zoom]",function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(e.requestId&&u(e.requestId),e.requestId=d(function(){e.update(t)})):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update(t)},n.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var o=n.fancybox?n.fancybox.getInstance():null,i=o.current,a=t.keyCode||t.which;if(9==a)return void(i.opts.trapFocus&&e.focus(t));if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input,textarea,video,audio,select")))return 8===a||27===a?(t.preventDefault(),void e.close(t)):37===a||38===a?(t.preventDefault(),void e.previous()):39===a||40===a?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,a)}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1}),e.idleInterval=t.setInterval(function(){++e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())},1e3))},removeEvents:function(){var e=this;s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var o,i,a,s,r,c,l,d,u,f=this,h=f.group.length;if(!(f.isDragging||f.isClosing||f.isAnimating&&f.firstRun)){if(t=parseInt(t,10),!(a=f.current?f.current.opts.loop:f.opts.loop)&&(t<0||t>=h))return!1;if(o=f.firstRun=!Object.keys(f.slides).length,r=f.current,f.prevIndex=f.currIndex,f.prevPos=f.currPos,s=f.createSlide(t),h>1&&((a||s.index<h-1)&&f.createSlide(t+1),(a||s.index>0)&&f.createSlide(t-1)),f.current=s,f.currIndex=s.index,f.currPos=s.pos,f.trigger("beforeShow",o),f.updateControls(),s.forcedDuration=void 0,n.isNumeric(e)?s.forcedDuration=e:e=s.opts[o?"animationDuration":"transitionDuration"],e=parseInt(e,10),i=f.isMoved(s),s.$slide.addClass("fancybox-slide--current"),o)return s.opts.animationEffect&&e&&f.$refs.container.css("transition-duration",e+"ms"),f.$refs.container.addClass("fancybox-is-open").trigger("focus"),f.loadSlide(s),void f.preload("image");c=n.fancybox.getTranslate(r.$slide),l=n.fancybox.getTranslate(f.$refs.stage),n.each(f.slides,function(t,e){n.fancybox.stop(e.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(u=c.left-(r.pos*c.width+r.pos*r.opts.gutter),n.each(f.slides,function(t,o){o.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=o.pos*c.width+o.pos*o.opts.gutter;n.fancybox.setTranslate(o.$slide,{top:0,left:i-l.left+u}),o.pos!==s.pos&&o.$slide.addClass("fancybox-slide--"+(o.pos>s.pos?"next":"previous")),p(o.$slide),n.fancybox.animate(o.$slide,{top:0,left:(o.pos-s.pos)*c.width+(o.pos-s.pos)*o.opts.gutter},e,function(){o.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),o.pos===f.currPos&&f.complete()})})):e&&s.opts.transitionEffect&&(d="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),n.fancybox.animate(r.$slide,d,e,function(){r.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?f.revealContent(s):f.loadSlide(s),f.preload("image")}},createSlide:function(t){var e,o,i=this;return o=t%i.group.length,o=o<0?i.group.length+o:o,!i.slides[t]&&i.group[o]&&(e=n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[t]=n.extend(!0,{},i.group[o],{pos:t,$slide:e,isLoaded:!1}),i.updateSlide(i.slides[t])),i.slides[t]},scaleToActual:function(t,e,o){var i,a,s,r,c,l=this,d=l.current,u=d.$content,f=n.fancybox.getTranslate(d.$slide).width,p=n.fancybox.getTranslate(d.$slide).height,h=d.width,g=d.height;l.isAnimating||l.isMoved()||!u||"image"!=d.type||!d.isLoaded||d.hasError||(l.isAnimating=!0,n.fancybox.stop(u),t=void 0===t?.5*f:t,e=void 0===e?.5*p:e,i=n.fancybox.getTranslate(u),i.top-=n.fancybox.getTranslate(d.$slide).top,i.left-=n.fancybox.getTranslate(d.$slide).left,r=h/i.width,c=g/i.height,a=.5*f-.5*h,s=.5*p-.5*g,h>f&&(a=i.left*r-(t*r-t),a>0&&(a=0),a<f-h&&(a=f-h)),g>p&&(s=i.top*c-(e*c-e),s>0&&(s=0),s<p-g&&(s=p-g)),l.updateCursor(h,g),n.fancybox.animate(u,{top:s,left:a,scaleX:r,scaleY:c},o||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(t){var e,o=this,i=o.current,a=i.$content;o.isAnimating||o.isMoved()||!a||"image"!=i.type||!i.isLoaded||i.hasError||(o.isAnimating=!0,n.fancybox.stop(a),e=o.getFitPos(i),o.updateCursor(e.width,e.height),n.fancybox.animate(a,{top:e.top,left:e.left,scaleX:e.width/a.width(),scaleY:e.height/a.height()},t||366,function(){o.isAnimating=!1}))},getFitPos:function(t){var e,o,i,a,s=this,r=t.$content,c=t.$slide,l=t.width||t.opts.width,d=t.height||t.opts.height,u={};return!!(t.isLoaded&&r&&r.length)&&(e=n.fancybox.getTranslate(s.$refs.stage).width,o=n.fancybox.getTranslate(s.$refs.stage).height,e-=parseFloat(c.css("paddingLeft"))+parseFloat(c.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),o-=parseFloat(c.css("paddingTop"))+parseFloat(c.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),l&&d||(l=e,d=o),i=Math.min(1,e/l,o/d),l*=i,d*=i,l>e-.5&&(l=e),d>o-.5&&(d=o),"image"===t.type?(u.top=Math.floor(.5*(o-d))+parseFloat(c.css("paddingTop")),u.left=Math.floor(.5*(e-l))+parseFloat(c.css("paddingLeft"))):"video"===t.contentType&&(a=t.opts.width&&t.opts.height?l/d:t.opts.ratio||16/9,d>l/a?d=l/a:l>d*a&&(l=d*a)),u.width=l,u.height=d,u)},update:function(t){var e=this;n.each(e.slides,function(n,o){e.updateSlide(o,t)})},updateSlide:function(t,e){var o=this,i=t&&t.$content,a=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;o.adjustCaption(t),i&&(a||s||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,o.getFitPos(t)),t.pos===o.currPos&&(o.isAnimating=!1,o.updateCursor())),o.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===o.currPos&&o.$refs.toolbar.add(o.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),o.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,o=e.current,i=o.$slide;!e.isClosing&&o&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),n.fancybox.animate(i,{top:0,left:0,opacity:1},void 0===t?0:t,function(){i.css({transform:"",opacity:""}),o.isComplete||e.complete()},!1))},isMoved:function(t){var e,o,i=t||this.current;return!!i&&(o=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(i.$slide),!i.$slide.hasClass("fancybox-animated")&&(Math.abs(e.top-o.top)>.5||Math.abs(e.left-o.left)>.5))},updateCursor:function(t,e){var o,i,a=this,s=a.current,r=a.$refs.container;s&&!a.isClosing&&a.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=a.canPan(t,e),i=!!o||a.isZoomable(),r.toggleClass("fancybox-is-zoomable",i),n("[data-fancybox-zoom]").prop("disabled",!i),o?r.addClass("fancybox-can-pan"):i&&("zoom"===s.opts.clickContent||n.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||a.group.length>1)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this,n=e.current;if(n&&!e.isClosing&&"image"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if((t=e.getFitPos(n))&&(n.width>t.width||n.height>t.height))return!0}return!1},isScaledDown:function(t,e){var o=this,i=!1,a=o.current,s=a.$content;return void 0!==t&&void 0!==e?i=t<a.width&&e<a.height:s&&(i=n.fancybox.getTranslate(s),i=i.width<a.width&&i.height<a.height),i},canPan:function(t,e){var o=this,i=o.current,a=null,s=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(s=o.getFitPos(i),void 0!==t&&void 0!==e?a={width:t,height:e}:i.isComplete&&(a=n.fancybox.getTranslate(i.$content)),a&&s&&(s=Math.abs(a.width-s.width)>1.5||Math.abs(a.height-s.height)>1.5)),s},loadSlide:function(t){var e,o,i,a=this;if(!t.isLoading&&!t.isLoaded){if(t.isLoading=!0,!1===a.trigger("beforeLoad",t))return t.isLoading=!1,!1;switch(e=t.type,o=t.$slide,o.off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":a.setImage(t);break;case"iframe":a.setIframe(t);break;case"html":a.setContent(t,t.src||t.content);break;case"video":a.setContent(t,t.opts.video.tpl.replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format||"").replace("{{poster}}",t.thumb||""));break;case"inline":n(t.src).length?a.setContent(t,n(t.src)):a.setError(t);break;case"ajax":a.showLoading(t),i=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&a.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&a.setError(t)}})),o.one("onReset",function(){i.abort()});break;default:a.setError(t)}return!0}},setImage:function(t){var o,i=this;setTimeout(function(){var e=t.$image;i.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||i.showLoading(t)},50),i.checkSrcset(t),t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,o=e.createElement("img"),o.onerror=function(){n(this).remove(),t.$ghost=null},o.onload=function(){i.afterLoad(t)},t.$ghost=n(o).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),i.setBigImage(t)},checkSrcset:function(e){var n,o,i,a,s=e.opts.srcset||e.opts.image.srcset;if(s){i=t.devicePixelRatio||1,a=t.innerWidth*i,o=s.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var o=parseInt(t.substring(0,t.length-1),10);if(0===n)return e.url=t;o&&(e.value=o,e.postfix=t[t.length-1])}),e}),o.sort(function(t,e){return t.value-e.value});for(var r=0;r<o.length;r++){var c=o[r];if("w"===c.postfix&&c.value>=a||"x"===c.postfix&&c.value>=i){n=c;break}}!n&&o.length&&(n=o[o.length-1]),n&&(e.src=n.url,e.width&&e.height&&"w"==n.postfix&&(e.height=e.width/e.height*n.value,e.width=n.value),e.opts.srcset=s)}},setBigImage:function(t){var o=this,i=e.createElement("img"),a=n(i);t.$image=a.one("error",function(){o.setError(t)}).one("load",function(){var e;t.$ghost||(o.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),o.afterLoad(t)),o.isClosing||(t.opts.srcset&&(e=t.opts.sizes,e&&"auto"!==e||(e=(t.width/t.height>1&&s.width()/s.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),a.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!o.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),o.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(i.complete||"complete"==i.readyState)&&a.naturalWidth&&a.naturalHeight?a.trigger("load"):i.error&&a.trigger("error")},resolveImageSlideSize:function(t,e,n){var o=parseInt(t.opts.width,10),i=parseInt(t.opts.height,10);t.width=e,t.height=n,o>0&&(t.width=o,t.height=Math.floor(o*n/e)),i>0&&(t.width=Math.floor(i*e/n),t.height=i)},setIframe:function(t){var e,o=this,i=t.opts.iframe,a=t.$slide;t.$content=n('<div class="fancybox-content'+(i.preload?" fancybox-is-hidden":"")+'"></div>').css(i.css).appendTo(a),a.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(i.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(i.attr).appendTo(t.$content),i.preload?(o.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),o.afterLoad(t)}),a.on("refresh.fb",function(){var n,o,s=t.$content,r=i.css.width,c=i.css.height;if(1===e[0].isReady){try{n=e.contents(),o=n.find("body")}catch(t){}o&&o.length&&o.children().length&&(a.css("overflow","visible"),s.css({width:"100%","max-width":"100%",height:"9999px"}),void 0===r&&(r=Math.ceil(Math.max(o[0].clientWidth,o.outerWidth(!0)))),s.css("width",r||"").css("max-width",""),void 0===c&&(c=Math.ceil(Math.max(o[0].clientHeight,o.outerHeight(!0)))),s.css("height",c||""),a.css("overflow","auto")),s.removeClass("fancybox-is-hidden")}})):o.afterLoad(t),e.attr("src",t.src),a.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}n(this).off("refresh.fb").empty(),t.isLoaded=!1,t.isRevealed=!1})},setContent:function(t,e){var o=this;o.isClosing||(o.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),l(e)&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),o.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){var e=this;(t=t||e.current)&&!t.$spinner&&(t.$spinner=n(e.translate(e,e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){var e=this;(t=t||e.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e,n=this,o=t||n.current,i=o.opts.caption,a=o.opts.preventCaptionOverlap,s=n.$refs.caption,r=!1;s.toggleClass("fancybox-caption--separate",a),a&&i&&i.length&&(o.pos!==n.currPos?(e=s.clone().appendTo(s.parent()),e.children().eq(0).empty().html(i),r=e.outerHeight(!0),e.empty().remove()):n.$caption&&(r=n.$caption.outerHeight(!0)),o.$slide.css("padding-bottom",r||""))},adjustLayout:function(t){var e,n,o,i,a=this,s=t||a.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(o=s.$slide[0].style["padding-bottom"],i=s.$slide.css("padding-bottom"),parseFloat(i)>0&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(n=i),s.$slide.css("padding-bottom",o))),s.$content.css("margin-bottom",n))},revealContent:function(t){var e,o,i,a,s=this,r=t.$slide,c=!1,l=!1,d=s.isMoved(t),u=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],i=t.opts[s.firstRun?"animationDuration":"transitionDuration"],i=parseInt(void 0===t.forcedDuration?i:t.forcedDuration,10),!d&&t.pos===s.currPos&&i||(e=!1),"zoom"===e&&(t.pos===s.currPos&&i&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?c=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,c.scaleX=c.width/l.width,c.scaleY=c.height/l.height,a=t.opts.zoomOpacity,"auto"==a&&(a=Math.abs(t.width/t.height-l.width/l.height)>.1),a&&(l.opacity=.1,c.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void n.fancybox.animate(t.$content,c,i,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(n.fancybox.stop(r),o="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(o).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(r,"fancybox-slide--current",i,function(){r.removeClass(o).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),u||!d||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,o,i,a,s,r=!1,c=t.$thumb;return!(!c||!g(c[0]))&&(e=n.fancybox.getTranslate(c),o=parseFloat(c.css("border-top-width")||0),i=parseFloat(c.css("border-right-width")||0),a=parseFloat(c.css("border-bottom-width")||0),s=parseFloat(c.css("border-left-width")||0),r={top:e.top+o,left:e.left+s,width:e.width-i-s,height:e.height-o-a,scaleX:1,scaleY:1},e.width>0&&e.height>0&&r)},complete:function(){var t,e=this,o=e.current,i={};!e.isMoved()&&o.isLoaded&&(o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger("onReset"),e.preload("inline"),p(o.$slide),o.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,o){o.pos>=e.currPos-1&&o.pos<=e.currPos+1?i[o.pos]=o:o&&(n.fancybox.stop(o.$slide),o.$slide.off().remove())}),e.slides=i),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),o.opts.video.autoStart&&o.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),e.next()}),o.opts.autoFocus&&"html"===o.contentType&&(t=o.$content.find("input[autofocus]:enabled:visible:first"),t.length?t.trigger("focus"):e.focus(null,!0)),o.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],e=o.slides[o.currPos-1],e&&e.type===t&&o.loadSlide(e),n&&n.type===t&&o.loadSlide(n))},focus:function(t,o){var i,a,s=this,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||(i=!t&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(o?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible"),i=i.filter(r).filter(function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled")}),i.length?(a=i.index(e.activeElement),t&&t.shiftKey?(a<0||0==a)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(a<0||a==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"))},activate:function(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var o,i,a,s,r,c,l,u=this,f=u.current,h=function(){u.cleanUp(t)};return!u.isClosing&&(u.isClosing=!0,!1===u.trigger("beforeClose",t)?(u.isClosing=!1,d(function(){u.update()}),!1):(u.removeEvents(),a=f.$content,o=f.opts.animationEffect,i=n.isNumeric(e)?e:o?f.opts.animationDuration:0,f.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?n.fancybox.stop(f.$slide):o=!1,f.$slide.siblings().trigger("onReset").remove(),i&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",i+"ms"),u.hideLoading(f),u.hideControls(!0),u.updateCursor(),"zoom"!==o||a&&i&&"image"===f.type&&!u.isMoved()&&!f.hasError&&(l=u.getThumbPos(f))||(o="fade"),"zoom"===o?(n.fancybox.stop(a),s=n.fancybox.getTranslate(a),c={top:s.top,left:s.left,scaleX:s.width/l.width,scaleY:s.height/l.height,width:l.width,height:l.height},r=f.opts.zoomOpacity,
"auto"==r&&(r=Math.abs(f.width/f.height-l.width/l.height)>.1),r&&(l.opacity=0),n.fancybox.setTranslate(a,c),p(a),n.fancybox.animate(a,l,i,h),!0):(o&&i?n.fancybox.animate(f.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,i,h):!0===t?setTimeout(h,i):h(),!0)))},cleanUp:function(e){var o,i,a,s=this,r=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=s.$trigger),r&&r.length&&(i=t.scrollX,a=t.scrollY,r.trigger("focus"),n("html, body").scrollTop(a).scrollLeft(i))),s.current=null,o=n.fancybox.getInstance(),o?o.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var o,i=Array.prototype.slice.call(arguments,1),a=this,s=e&&e.opts?e:a.current;if(s?i.unshift(s):s=a,i.unshift(a),n.isFunction(s.opts[t])&&(o=s.opts[t].apply(s,i)),!1===o)return o;"afterClose"!==t&&a.$refs?a.$refs.container.trigger(t+".fb",i):r.trigger(t+".fb",i)},updateControls:function(){var t=this,o=t.current,i=o.index,a=t.$refs.container,s=t.$refs.caption,r=o.opts.caption;o.$slide.trigger("refresh"),r&&r.length?(t.$caption=s,s.children().eq(0).html(r)):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),a.find("[data-fancybox-count]").html(t.group.length),a.find("[data-fancybox-index]").html(i+1),a.find("[data-fancybox-prev]").prop("disabled",!o.opts.loop&&i<=0),a.find("[data-fancybox-next]").prop("disabled",!o.opts.loop&&i>=t.group.length-1),"image"===o.type?a.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",o.opts.image.src||o.src).show():o.opts.toolbar&&a.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=this,n=["infobar","toolbar","nav"];!t&&e.current.opts.preventCaptionOverlap||n.push("caption"),this.$refs.container.removeClass(n.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&t.group.length>1)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&t.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.5.7",defaults:a,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),o=Array.prototype.slice.call(arguments,1);return e instanceof b&&("string"===n.type(t)?e[t].apply(e,o):"function"===n.type(t)&&t.apply(e,o),e)},open:function(t,e,n){return new b(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=e.createElement("div");return t.getComputedStyle&&t.getComputedStyle(n)&&t.getComputedStyle(n).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)}(),getTranslate:function(t){var e;return!(!t||!t.length)&&(e=t[0].getBoundingClientRect(),{top:e.top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))})},setTranslate:function(t,e){var n="",o={};if(t&&e)return void 0===e.left&&void 0===e.top||(n=(void 0===e.left?t.position().left:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==e.scaleX&&void 0!==e.scaleY?n+=" scale("+e.scaleX+", "+e.scaleY+")":void 0!==e.scaleX&&(n+=" scaleX("+e.scaleX+")"),n.length&&(o.transform=n),void 0!==e.opacity&&(o.opacity=e.opacity),void 0!==e.width&&(o.width=e.width),void 0!==e.height&&(o.height=e.height),t.css(o)},animate:function(t,e,o,i,a){var s,r=this;n.isFunction(o)&&(i=o,o=null),r.stop(t),s=r.getTranslate(t),t.on(f,function(c){(!c||!c.originalEvent||t.is(c.originalEvent.target)&&"z-index"!=c.originalEvent.propertyName)&&(r.stop(t),n.isNumeric(o)&&t.css("transition-duration",""),n.isPlainObject(e)?void 0!==e.scaleX&&void 0!==e.scaleY&&r.setTranslate(t,{top:e.top,left:e.left,width:s.width*e.scaleX,height:s.height*e.scaleY,scaleX:1,scaleY:1}):!0!==a&&t.removeClass(e),n.isFunction(i)&&i(c))}),n.isNumeric(o)&&t.css("transition-duration",o+"ms"),n.isPlainObject(e)?(void 0!==e.scaleX&&void 0!==e.scaleY&&(delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger(f)},o+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(f),t.off(f).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(t){var e;return t=t||{},e=t.selector||!1,e?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},i),this},r.on("click.fb-start","[data-fancybox]",i),r.on("click.fb-start","[data-fancybox-trigger]",function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)})}),function(){var t=null;r.on("mousedown mouseup focus blur",".fancybox-button",function(e){switch(e.type){case"mousedown":t=n(this);break;case"mouseup":t=null;break;case"focusin":n(".fancybox-button").removeClass("fancybox-focus"),n(this).is(t)||n(this).is("[disabled]")||n(this).addClass("fancybox-focus");break;case"focusout":n(".fancybox-button").removeClass("fancybox-focus")}})}()}}(window,document,jQuery),function(t){"use strict";var e={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},n=function(e,n,o){if(e)return o=o||"","object"===t.type(o)&&(o=t.param(o,!0)),t.each(n,function(t,n){e=e.replace("$"+t,n||"")}),o.length&&(e+=(e.indexOf("?")>0?"&":"?")+o),e};t(document).on("objectNeedsType.fb",function(o,i,a){var s,r,c,l,d,u,f,p=a.src||"",h=!1;s=t.extend(!0,{},e,a.opts.media),t.each(s,function(e,o){if(c=p.match(o.matcher)){if(h=o.type,f=e,u={},o.paramPlace&&c[o.paramPlace]){d=c[o.paramPlace],"?"==d[0]&&(d=d.substring(1)),d=d.split("&");for(var i=0;i<d.length;++i){var s=d[i].split("=",2);2==s.length&&(u[s[0]]=decodeURIComponent(s[1].replace(/\+/g," ")))}}return l=t.extend(!0,{},o.params,a.opts[e],u),p="function"===t.type(o.url)?o.url.call(this,c,l,a):n(o.url,c,l),r="function"===t.type(o.thumb)?o.thumb.call(this,c,l,a):n(o.thumb,c),"youtube"===e?p=p.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===e&&(p=p.replace("&%23","#")),!1}}),h?(a.opts.thumb||a.opts.$thumb&&a.opts.$thumb.length||(a.opts.thumb=r),"iframe"===h&&(a.opts=t.extend(!0,a.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(a,{type:h,src:p,origSrc:a.src,contentSource:f,contentType:"image"===h?"image":"gmap_place"==f||"gmap_search"==f?"map":"video"})):p&&(a.type=a.opts.defaultType)});var o={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;if(this[t].loaded)return void setTimeout(function(){n.done(t)});this[t].loading||(this[t].loading=!0,e=document.createElement("script"),e.type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(e){var n,o,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(n=t.fancybox.getInstance())&&(o=n.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?i=new YT.Player(o.attr("id"),{events:{onStateChange:function(t){0==t.data&&n.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&(i=new Vimeo.Player(o),i.on("ended",function(){n.next()})))}};t(document).on({"afterShow.fb":function(t,e,n){e.group.length>1&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&o.load(n.contentSource)}})}(jQuery),function(t,e,n){"use strict";var o=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),i=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),a=function(e){var n=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var o in e)e[o].pageX?n.push({x:e[o].pageX,y:e[o].pageY}):e[o].clientX&&n.push({x:e[o].clientX,y:e[o].clientY});return n},s=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},r=function(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,o=t[0].attributes,i=o.length;e<i;e++)if("data-fancybox-"===o[e].nodeName.substr(0,14))return!0;return!1},c=function(e){var n=t.getComputedStyle(e)["overflow-y"],o=t.getComputedStyle(e)["overflow-x"],i=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,a=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth;return i||a},l=function(t){for(var e=!1;;){if(e=c(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-stage")||t.is("body"))break}return e},d=function(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(e,"ontouchstart"))};d.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),n(e).off(".fb.touch"),t.requestId&&(i(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},d.prototype.ontouchstart=function(o){var i=this,c=n(o.target),d=i.instance,u=d.current,f=u.$slide,p=u.$content,h="touchstart"==o.type;if(h&&i.$container.off("mousedown.fb.touch"),(!o.originalEvent||2!=o.originalEvent.button)&&f.length&&c.length&&!r(c)&&!r(c.parent())&&(c.is("img")||!(o.originalEvent.clientX>c[0].clientWidth+c.offset().left))){if(!u||d.isAnimating||u.$slide.hasClass("fancybox-animated"))return o.stopPropagation(),void o.preventDefault();i.realPoints=i.startPoints=a(o),i.startPoints.length&&(u.touch&&o.stopPropagation(),i.startEvent=o,i.canTap=!0,i.$target=c,i.$content=p,i.opts=u.opts.touch,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.isScrolling=!1,i.canPan=d.canPan(),i.startTime=(new Date).getTime(),i.distanceX=i.distanceY=i.distance=0,i.canvasWidth=Math.round(f[0].clientWidth),i.canvasHeight=Math.round(f[0].clientHeight),i.contentLastPos=null,i.contentStartPos=n.fancybox.getTranslate(i.$content)||{top:0,left:0},i.sliderStartPos=n.fancybox.getTranslate(f),i.stagePos=n.fancybox.getTranslate(d.$refs.stage),i.sliderStartPos.top-=i.stagePos.top,i.sliderStartPos.left-=i.stagePos.left,i.contentStartPos.top-=i.stagePos.top,i.contentStartPos.left-=i.stagePos.left,n(e).off(".fb.touch").on(h?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(i,"ontouchend")).on(h?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(i,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",i.onscroll,!0),((i.opts||i.canPan)&&(c.is(i.$stage)||i.$stage.find(c).length)||(c.is(".fancybox-image")&&o.preventDefault(),n.fancybox.isMobile&&c.parents(".fancybox-caption").length))&&(i.isScrollable=l(c)||l(c.parent()),n.fancybox.isMobile&&i.isScrollable||o.preventDefault(),(1===i.startPoints.length||u.hasError)&&(i.canPan?(n.fancybox.stop(i.$content),i.isPanning=!0):i.isSwiping=!0,i.$container.addClass("fancybox-is-grabbing")),2===i.startPoints.length&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(i.canTap=!1,i.isSwiping=!1,i.isPanning=!1,i.isZooming=!0,n.fancybox.stop(i.$content),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(t).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(t).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=s(i.startPoints[0],i.startPoints[1]))))}},d.prototype.onscroll=function(t){var n=this;n.isScrolling=!0,e.removeEventListener("scroll",n.onscroll,!0)},d.prototype.ontouchmove=function(t){var e=this;return void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?void e.ontouchend(t):e.isScrolling?void(e.canTap=!1):(e.newPoints=a(t),void((e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=s(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=s(e.newPoints[0],e.startPoints[0],"y"),e.distance=s(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))))},d.prototype.onSwipe=function(e){var a,s=this,r=s.instance,c=s.isSwiping,l=s.sliderStartPos.left||0;if(!0!==c)"x"==c&&(s.distanceX>0&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?l+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?l-=Math.pow(-s.distanceX,.8):l+=s.distanceX),s.sliderLastPos={top:"x"==c?0:s.sliderStartPos.top+s.distanceY,left:l},s.requestId&&(i(s.requestId),s.requestId=null),s.requestId=o(function(){s.sliderLastPos&&(n.each(s.instance.slides,function(t,e){var o=e.pos-s.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+o*s.canvasWidth+o*e.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(s.distance)>10){if(s.canTap=!1,r.group.length<2&&s.opts.vertical?s.isSwiping="y":r.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&n(t).width()>800?s.isSwiping="x":(a=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=a>45&&a<135?"y":"x"),"y"===s.isSwiping&&n.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);r.isDragging=s.isSwiping,s.startPoints=s.newPoints,n.each(r.slides,function(t,e){var o,i;n.fancybox.stop(e.$slide),o=n.fancybox.getTranslate(e.$slide),i=n.fancybox.getTranslate(r.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===r.current.pos&&(s.sliderStartPos.top=o.top-i.top,s.sliderStartPos.left=o.left-i.left),n.fancybox.setTranslate(e.$slide,{top:o.top-i.top,left:o.left-i.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}},d.prototype.onPan=function(){var t=this;if(s(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5))return void(t.startPoints=t.newPoints);t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&i(t.requestId),t.requestId=o(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},d.prototype.limitMovement=function(){var t,e,n,o,i,a,s=this,r=s.canvasWidth,c=s.canvasHeight,l=s.distanceX,d=s.distanceY,u=s.contentStartPos,f=u.left,p=u.top,h=u.width,g=u.height;return i=h>r?f+l:f,a=p+d,t=Math.max(0,.5*r-.5*h),e=Math.max(0,.5*c-.5*g),n=Math.min(r-h,.5*r-.5*h),o=Math.min(c-g,.5*c-.5*g),l>0&&i>t&&(i=t-1+Math.pow(-t+f+l,.8)||0),l<0&&i<n&&(i=n+1-Math.pow(n-f-l,.8)||0),d>0&&a>e&&(a=e-1+Math.pow(-e+p+d,.8)||0),d<0&&a<o&&(a=o+1-Math.pow(o-p-d,.8)||0),{top:a,left:i}},d.prototype.limitPosition=function(t,e,n,o){var i=this,a=i.canvasWidth,s=i.canvasHeight;return n>a?(t=t>0?0:t,t=t<a-n?a-n:t):t=Math.max(0,a/2-n/2),o>s?(e=e>0?0:e,e=e<s-o?s-o:e):e=Math.max(0,s/2-o/2),{top:e,left:t}},d.prototype.onZoom=function(){var e=this,a=e.contentStartPos,r=a.width,c=a.height,l=a.left,d=a.top,u=s(e.newPoints[0],e.newPoints[1]),f=u/e.startDistanceBetweenFingers,p=Math.floor(r*f),h=Math.floor(c*f),g=(r-p)*e.percentageOfImageAtPinchPointX,b=(c-h)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),v=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),y=m-e.centerPointStartX,x=v-e.centerPointStartY,w=l+(g+y),$=d+(b+x),S={top:$,left:w,scaleX:f,scaleY:f};e.canTap=!1,e.newWidth=p,e.newHeight=h,e.contentLastPos=S,e.requestId&&i(e.requestId),e.requestId=o(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},d.prototype.ontouchend=function(t){var o=this,s=o.isSwiping,r=o.isPanning,c=o.isZooming,l=o.isScrolling;if(o.endPoints=a(t),o.dMs=Math.max((new Date).getTime()-o.startTime,1),o.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",o.onscroll,!0),o.requestId&&(i(o.requestId),o.requestId=null),o.isSwiping=!1,o.isPanning=!1,o.isZooming=!1,o.isScrolling=!1,o.instance.isDragging=!1,o.canTap)return o.onTap(t);o.speed=100,o.velocityX=o.distanceX/o.dMs*.5,o.velocityY=o.distanceY/o.dMs*.5,r?o.endPanning():c?o.endZooming():o.endSwiping(s,l)},d.prototype.endSwiping=function(t,e){var o=this,i=!1,a=o.instance.group.length,s=Math.abs(o.distanceX),r="x"==t&&a>1&&(o.dMs>130&&s>10||s>50);o.sliderLastPos=null,"y"==t&&!e&&Math.abs(o.distanceY)>50?(n.fancybox.animate(o.instance.current.$slide,{top:o.sliderStartPos.top+o.distanceY+150*o.velocityY,opacity:0},200),i=o.instance.close(!0,250)):r&&o.distanceX>0?i=o.instance.previous(300):r&&o.distanceX<0&&(i=o.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||o.instance.centerSlide(200),o.$container.removeClass("fancybox-is-sliding")},d.prototype.endPanning=function(){var t,e,o,i=this;i.contentLastPos&&(!1===i.opts.momentum||i.dMs>350?(t=i.contentLastPos.left,e=i.contentLastPos.top):(t=i.contentLastPos.left+500*i.velocityX,e=i.contentLastPos.top+500*i.velocityY),o=i.limitPosition(t,e,i.contentStartPos.width,i.contentStartPos.height),o.width=i.contentStartPos.width,o.height=i.contentStartPos.height,n.fancybox.animate(i.$content,o,366))},d.prototype.endZooming=function(){var t,e,o,i,a=this,s=a.instance.current,r=a.newWidth,c=a.newHeight;a.contentLastPos&&(t=a.contentLastPos.left,e=a.contentLastPos.top,i={top:e,left:t,width:r,height:c,scaleX:1,scaleY:1},n.fancybox.setTranslate(a.$content,i),r<a.canvasWidth&&c<a.canvasHeight?a.instance.scaleToFit(150):r>s.width||c>s.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(o=a.limitPosition(t,e,r,c),n.fancybox.animate(a.$content,o,150)))},d.prototype.onTap=function(e){var o,i=this,s=n(e.target),r=i.instance,c=r.current,l=e&&a(e)||i.startPoints,d=l[0]?l[0].x-n(t).scrollLeft()-i.stagePos.left:0,u=l[0]?l[0].y-n(t).scrollTop()-i.stagePos.top:0,f=function(t){var o=c.opts[t];if(n.isFunction(o)&&(o=o.apply(r,[c,e])),o)switch(o){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":r.group.length>1?r.next():r.close(i.startEvent);break;case"zoom":"image"==c.type&&(c.isLoaded||c.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(d,u):r.group.length<2&&r.close(i.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(s.is("img")||!(d>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))o="Outside";else if(s.is(".fancybox-slide"))o="Slide";else{if(!r.current.$content||!r.current.$content.find(s).addBack().filter(s).length)return;o="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(d-i.tapX)>50||Math.abs(u-i.tapY)>50)return this;f("dblclick"+o)}else i.tapX=d,i.tapY=u,c.opts["dblclick"+o]&&c.opts["dblclick"+o]!==c.opts["click"+o]?i.tapped=setTimeout(function(){i.tapped=null,r.isAnimating||f("click"+o)},500):f("click"+o);return this}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new d(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,n=t.instance,o=n.group[n.currIndex].opts.slideShow;t.$button=n.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),n.group.length<2||!o?t.$button.hide():o.progress&&(t.$progress=e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner))},set:function(t){var n=this,o=n.instance,i=o.current;i&&(!0===t||i.opts.loop||o.currIndex<o.group.length-1)?n.isActive&&"video"!==i.contentType&&(n.$progress&&e.fancybox.animate(n.$progress.show(),{scaleX:1},i.opts.slideShow.speed),n.timer=setTimeout(function(){o.current.opts.loop||o.current.index!=o.group.length-1?o.next():o.jumpTo(0)},i.opts.slideShow.speed)):(n.stop(),o.idleSecondsCounter=0,o.showControls())},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null,t.$progress&&t.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,o){var i=e&&e.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(t,e,n){var o=e&&e.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(n,o,i,a,s){var r=o&&o.SlideShow;!r||!i.opts.slideShow||80!==s&&32!==s||e(t.activeElement).is("button,a,input")||(a.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),o=n&&n.SlideShow;o&&o.isActive&&(t.hidden?o.clear():o.set())})}(document,jQuery),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},o=0;o<e.length;o++){var i=e[o];if(i&&i[1]in t){for(var a=0;a<i.length;a++)n[e[0][a]]=i[a];return n}}return!1}();if(n){var o={request:function(e){e=e||t.documentElement,e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,function(){var t=o.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.isAnimating=!1,n.update(!0,!0,0),n.isComplete||n.complete()),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}e(t).on({"onInit.fb":function(t,e){var i;if(!n)return void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove();e&&e.group[e.currIndex].opts.fullScreen?(i=e.$refs.container,i.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&o.request(),e.FullScreen=o):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()},"afterKeydown.fb":function(t,e,n,o,i){e&&e.FullScreen&&70===i&&(o.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(t,e){"use strict";var n="fancybox-thumbs";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var o=function(t){this.init(t)};e.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,o=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,t.Thumbs=e,e.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,a=n.length;i<a&&(n[i].thumb&&o++,!(o>1));i++);o>1&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var t,o=this,i=o.instance,a=o.opts.parentEl,s=[];o.$grid||(o.$grid=e('<div class="'+n+" "+n+"-"+o.opts.axis+'"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)),o.$grid.on("click","a",function(){i.jumpTo(e(this).attr("data-index"))})),o.$list||(o.$list=e('<div class="'+n+'__list">').appendTo(o.$grid)),e.each(i.group,function(e,n){t=n.thumb,t||"image"!==n.type||(t=n.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(t&&t.length?' style="background-image:url('+t+')"':'class="fancybox-thumbs-missing"')+"></a>")}),o.$list[0].innerHTML=s.join(""),"x"===o.opts.axis&&o.$list.width(parseInt(o.$grid.css("padding-right"),10)+i.group.length*o.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,o=this,i=o.$list,a=o.$grid;o.instance.current&&(e=i.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+o.instance.current.index+'"]').addClass("fancybox-thumbs-active"),n=e.position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===o.opts.axis&&(n.left<a.scrollLeft()||n.left>a.scrollLeft()+(a.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new o(e),n.isActive&&!0===n.opts.autoStart&&n.show())},"beforeShow.fb":function(t,e,n,o){var i=e&&e.Thumbs;i&&i.isVisible&&i.focus(o?0:250)},"afterKeydown.fb":function(t,e,n,o,i){var a=e&&e.Thumbs;a&&a.isActive&&71===i&&(o.preventDefault(),a.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(t,e){"use strict";function n(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]})}e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},
tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",function(){var t,o,i=e.fancybox.getInstance(),a=i.current||null;a&&("function"===e.type(a.opts.share.url)&&(t=a.opts.share.url.apply(a,[i,a])),o=a.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===a.type?encodeURIComponent(a.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,n(t)).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),e.fancybox.open({src:i.translate(i,o),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){i.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(t,e,n){"use strict";function o(){var e=t.location.hash.substr(1),n=e.split("-"),o=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,i=n.join("-");return{hash:e,index:o<1?1:o,gallery:i}}function i(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function a(t){var e,n;return!!t&&(e=t.current?t.current.opts:t.opts,""!==(n=e.hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&n)}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),n(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(t,e){var n,i;!1!==e.group[e.currIndex].opts.hash&&(n=o(),(i=a(e))&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,o,i,s){var r;i&&!1!==i.opts.hash&&(r=a(o))&&(o.currentHash=r+(o.group.length>1?"-"+(i.index+1):""),t.location.hash!=="#"+o.currentHash&&(s&&!o.origHash&&(o.origHash=t.location.hash),o.hashTimer&&clearTimeout(o.hashTimer),o.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+o.currentHash),s&&(o.hasCreatedHistory=!0)):t.location.hash=o.currentHash,o.hashTimer=null},300)))},"beforeClose.fb":function(n,o,i){i&&!1!==i.opts.hash&&(clearTimeout(o.hashTimer),o.currentHash&&o.hasCreatedHistory?t.history.back():o.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(o.origHash||"")):t.location.hash=o.origHash),o.currentHash=null)}}),n(t).on("hashchange.fb",function(){var t=o(),e=null;n.each(n(".fancybox-container").get().reverse(),function(t,o){var i=n(o).data("FancyBox");if(i&&i.currentHash)return e=i,!1}),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&i(t)}),setTimeout(function(){n.fancybox.getInstance()||i(o())},50))})}(window,document,jQuery),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,e,o){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var o=e.current,i=(new Date).getTime();e.group.length<2||!1===o.opts.wheel||"auto"===o.opts.wheel&&"image"!==o.type||(t.preventDefault(),t.stopPropagation(),o.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-n<250||(n=i,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if(typeof define === 'function' && define.amd)
    define([], factory);
  else if(typeof exports === 'object')
    exports["mdc"] = factory();
  else
    root["mdc"] = factory();
})(this, function() {
  return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
      /******/
      /******/ 		// Check if module is in cache
      /******/ 		if(installedModules[moduleId]) {
        /******/ 			return installedModules[moduleId].exports;
        /******/ 		}
      /******/ 		// Create a new module (and put it into the cache)
      /******/ 		var module = installedModules[moduleId] = {
        /******/ 			i: moduleId,
        /******/ 			l: false,
        /******/ 			exports: {}
        /******/ 		};
      /******/
      /******/ 		// Execute the module function
      /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/
      /******/ 		// Flag the module as loaded
      /******/ 		module.l = true;
      /******/
      /******/ 		// Return the exports of the module
      /******/ 		return module.exports;
      /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
      /******/ 		if(!__webpack_require__.o(exports, name)) {
        /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
        /******/ 		}
      /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
      /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
        /******/ 		}
      /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
      /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
      /******/ 		if(mode & 1) value = __webpack_require__(value);
      /******/ 		if(mode & 8) return value;
      /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
      /******/ 		var ns = Object.create(null);
      /******/ 		__webpack_require__.r(ns);
      /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
      /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
      /******/ 		return ns;
      /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
      /******/ 		var getter = module && module.__esModule ?
          /******/ 			function getDefault() { return module['default']; } :
          /******/ 			function getModuleExports() { return module; };
      /******/ 		__webpack_require__.d(getter, 'a', getter);
      /******/ 		return getter;
      /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = "./packages/material-components-web/index.ts");
    /******/ })
      /************************************************************************/
      /******/ ({

        /***/ "./packages/material-components-web/index.ts":
        /*!***************************************************!*\
  !*** ./packages/material-components-web/index.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __importDefault = this && this.__importDefault || function (mod) {
            return mod && mod.__esModule ? mod : { "default": mod };
          };
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var index_1 = __importDefault(__webpack_require__(/*! @material/auto-init/index */ "./packages/mdc-auto-init/index.ts"));
          exports.autoInit = index_1.default;
          var banner = __importStar(__webpack_require__(/*! @material/banner/index */ "./packages/mdc-banner/index.ts"));
          exports.banner = banner;
          var base = __importStar(__webpack_require__(/*! @material/base/index */ "./packages/mdc-base/index.ts"));
          exports.base = base;
          var checkbox = __importStar(__webpack_require__(/*! @material/checkbox/index */ "./packages/mdc-checkbox/index.ts"));
          exports.checkbox = checkbox;
          var chips = __importStar(__webpack_require__(/*! @material/chips/index */ "./packages/mdc-chips/index.ts"));
          exports.chips = chips;
          var circularProgress = __importStar(__webpack_require__(/*! @material/circular-progress/index */ "./packages/mdc-circular-progress/index.ts"));
          exports.circularProgress = circularProgress;
          var dataTable = __importStar(__webpack_require__(/*! @material/data-table/index */ "./packages/mdc-data-table/index.ts"));
          exports.dataTable = dataTable;
          var dialog = __importStar(__webpack_require__(/*! @material/dialog/index */ "./packages/mdc-dialog/index.ts"));
          exports.dialog = dialog;
          var dom = __importStar(__webpack_require__(/*! @material/dom/index */ "./packages/mdc-dom/index.ts"));
          exports.dom = dom;
          var drawer = __importStar(__webpack_require__(/*! @material/drawer/index */ "./packages/mdc-drawer/index.ts"));
          exports.drawer = drawer;
          var floatingLabel = __importStar(__webpack_require__(/*! @material/floating-label/index */ "./packages/mdc-floating-label/index.ts"));
          exports.floatingLabel = floatingLabel;
          var formField = __importStar(__webpack_require__(/*! @material/form-field/index */ "./packages/mdc-form-field/index.ts"));
          exports.formField = formField;
          var iconButton = __importStar(__webpack_require__(/*! @material/icon-button/index */ "./packages/mdc-icon-button/index.ts"));
          exports.iconButton = iconButton;
          var lineRipple = __importStar(__webpack_require__(/*! @material/line-ripple/index */ "./packages/mdc-line-ripple/index.ts"));
          exports.lineRipple = lineRipple;
          var linearProgress = __importStar(__webpack_require__(/*! @material/linear-progress/index */ "./packages/mdc-linear-progress/index.ts"));
          exports.linearProgress = linearProgress;
          var list = __importStar(__webpack_require__(/*! @material/list/index */ "./packages/mdc-list/index.ts"));
          exports.list = list;
          var menuSurface = __importStar(__webpack_require__(/*! @material/menu-surface/index */ "./packages/mdc-menu-surface/index.ts"));
          exports.menuSurface = menuSurface;
          var menu = __importStar(__webpack_require__(/*! @material/menu/index */ "./packages/mdc-menu/index.ts"));
          exports.menu = menu;
          var notchedOutline = __importStar(__webpack_require__(/*! @material/notched-outline/index */ "./packages/mdc-notched-outline/index.ts"));
          exports.notchedOutline = notchedOutline;
          var radio = __importStar(__webpack_require__(/*! @material/radio/index */ "./packages/mdc-radio/index.ts"));
          exports.radio = radio;
          var ripple = __importStar(__webpack_require__(/*! @material/ripple/index */ "./packages/mdc-ripple/index.ts"));
          exports.ripple = ripple;
          var segmentedButton = __importStar(__webpack_require__(/*! @material/segmented-button/index */ "./packages/mdc-segmented-button/index.ts"));
          exports.segmentedButton = segmentedButton;
          var select = __importStar(__webpack_require__(/*! @material/select/index */ "./packages/mdc-select/index.ts"));
          exports.select = select;
          var slider = __importStar(__webpack_require__(/*! @material/slider/index */ "./packages/mdc-slider/index.ts"));
          exports.slider = slider;
          var snackbar = __importStar(__webpack_require__(/*! @material/snackbar/index */ "./packages/mdc-snackbar/index.ts"));
          exports.snackbar = snackbar;
          var switchControl = __importStar(__webpack_require__(/*! @material/switch/index */ "./packages/mdc-switch/index.ts"));
          exports.switchControl = switchControl;
          var tabBar = __importStar(__webpack_require__(/*! @material/tab-bar/index */ "./packages/mdc-tab-bar/index.ts"));
          exports.tabBar = tabBar;
          var tabIndicator = __importStar(__webpack_require__(/*! @material/tab-indicator/index */ "./packages/mdc-tab-indicator/index.ts"));
          exports.tabIndicator = tabIndicator;
          var tabScroller = __importStar(__webpack_require__(/*! @material/tab-scroller/index */ "./packages/mdc-tab-scroller/index.ts"));
          exports.tabScroller = tabScroller;
          var tab = __importStar(__webpack_require__(/*! @material/tab/index */ "./packages/mdc-tab/index.ts"));
          exports.tab = tab;
          var textField = __importStar(__webpack_require__(/*! @material/textfield/index */ "./packages/mdc-textfield/index.ts"));
          exports.textField = textField;
          var tooltip = __importStar(__webpack_require__(/*! @material/tooltip/index */ "./packages/mdc-tooltip/index.ts"));
          exports.tooltip = tooltip;
          var topAppBar = __importStar(__webpack_require__(/*! @material/top-app-bar/index */ "./packages/mdc-top-app-bar/index.ts"));
          exports.topAppBar = topAppBar;
// Register all components
          index_1.default.register('MDCBanner', banner.MDCBanner);
          index_1.default.register('MDCCheckbox', checkbox.MDCCheckbox);
          index_1.default.register('MDCChip', chips.MDCChip);
          index_1.default.register('MDCChipSet', chips.MDCChipSet);
          index_1.default.register('MDCCircularProgress', circularProgress.MDCCircularProgress);
          index_1.default.register('MDCDataTable', dataTable.MDCDataTable);
          index_1.default.register('MDCDialog', dialog.MDCDialog);
          index_1.default.register('MDCDrawer', drawer.MDCDrawer);
          index_1.default.register('MDCFloatingLabel', floatingLabel.MDCFloatingLabel);
          index_1.default.register('MDCFormField', formField.MDCFormField);
          index_1.default.register('MDCIconButtonToggle', iconButton.MDCIconButtonToggle);
          index_1.default.register('MDCLineRipple', lineRipple.MDCLineRipple);
          index_1.default.register('MDCLinearProgress', linearProgress.MDCLinearProgress);
          index_1.default.register('MDCList', list.MDCList);
          index_1.default.register('MDCMenu', menu.MDCMenu);
          index_1.default.register('MDCMenuSurface', menuSurface.MDCMenuSurface);
          index_1.default.register('MDCNotchedOutline', notchedOutline.MDCNotchedOutline);
          index_1.default.register('MDCRadio', radio.MDCRadio);
          index_1.default.register('MDCRipple', ripple.MDCRipple);
          index_1.default.register('MDCSegmentedButton', segmentedButton.MDCSegmentedButton);
          index_1.default.register('MDCSelect', select.MDCSelect);
          index_1.default.register('MDCSlider', slider.MDCSlider);
          index_1.default.register('MDCSnackbar', snackbar.MDCSnackbar);
          index_1.default.register('MDCSwitch', switchControl.MDCSwitch);
          index_1.default.register('MDCTabBar', tabBar.MDCTabBar);
          index_1.default.register('MDCTextField', textField.MDCTextField);
          index_1.default.register('MDCTooltip', tooltip.MDCTooltip);
          index_1.default.register('MDCTopAppBar', topAppBar.MDCTopAppBar);

          /***/ }),

        /***/ "./packages/mdc-animation/animationframe.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-animation/animationframe.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * AnimationFrame provides a user-friendly abstraction around requesting
           * and canceling animation frames.
           */
          var AnimationFrame = /** @class */function () {
            function AnimationFrame() {
              this.rafIDs = new Map();
            }
            /**
             * Requests an animation frame. Cancels any existing frame with the same key.
             * @param {string} key The key for this callback.
             * @param {FrameRequestCallback} callback The callback to be executed.
             */
            AnimationFrame.prototype.request = function (key, callback) {
              var _this = this;
              this.cancel(key);
              var frameID = requestAnimationFrame(function (frame) {
                _this.rafIDs.delete(key);
                // Callback must come *after* the key is deleted so that nested calls to
                // request with the same key are not deleted.
                callback(frame);
              });
              this.rafIDs.set(key, frameID);
            };
            /**
             * Cancels a queued callback with the given key.
             * @param {string} key The key for this callback.
             */
            AnimationFrame.prototype.cancel = function (key) {
              var rafID = this.rafIDs.get(key);
              if (rafID) {
                cancelAnimationFrame(rafID);
                this.rafIDs.delete(key);
              }
            };
            /**
             * Cancels all queued callback.
             */
            AnimationFrame.prototype.cancelAll = function () {
              var _this = this;
              // Need to use forEach because it's the only iteration method supported
              // by IE11. Suppress the underscore because we don't need it.
              // tslint:disable-next-line:enforce-name-casing
              this.rafIDs.forEach(function (_, key) {
                _this.cancel(key);
              });
            };
            /**
             * Returns the queue of unexecuted callback keys.
             */
            AnimationFrame.prototype.getQueue = function () {
              var queue = [];
              // Need to use forEach because it's the only iteration method supported
              // by IE11. Suppress the underscore because we don't need it.
              // tslint:disable-next-line:enforce-name-casing
              this.rafIDs.forEach(function (_, key) {
                queue.push(key);
              });
              return queue;
            };
            return AnimationFrame;
          }();
          exports.AnimationFrame = AnimationFrame;

          /***/ }),

        /***/ "./packages/mdc-animation/util.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-animation/util.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssPropertyNameMap = {
            animation: {
              prefixed: '-webkit-animation',
              standard: 'animation'
            },
            transform: {
              prefixed: '-webkit-transform',
              standard: 'transform'
            },
            transition: {
              prefixed: '-webkit-transition',
              standard: 'transition'
            }
          };
          var jsEventTypeMap = {
            animationend: {
              cssProperty: 'animation',
              prefixed: 'webkitAnimationEnd',
              standard: 'animationend'
            },
            animationiteration: {
              cssProperty: 'animation',
              prefixed: 'webkitAnimationIteration',
              standard: 'animationiteration'
            },
            animationstart: {
              cssProperty: 'animation',
              prefixed: 'webkitAnimationStart',
              standard: 'animationstart'
            },
            transitionend: {
              cssProperty: 'transition',
              prefixed: 'webkitTransitionEnd',
              standard: 'transitionend'
            }
          };
          function isWindow(windowObj) {
            return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';
          }
          function getCorrectPropertyName(windowObj, cssProperty) {
            if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
              var el = windowObj.document.createElement('div');
              var _a = cssPropertyNameMap[cssProperty],
                  standard = _a.standard,
                  prefixed = _a.prefixed;
              var isStandard = standard in el.style;
              return isStandard ? standard : prefixed;
            }
            return cssProperty;
          }
          exports.getCorrectPropertyName = getCorrectPropertyName;
          function getCorrectEventName(windowObj, eventType) {
            if (isWindow(windowObj) && eventType in jsEventTypeMap) {
              var el = windowObj.document.createElement('div');
              var _a = jsEventTypeMap[eventType],
                  standard = _a.standard,
                  prefixed = _a.prefixed,
                  cssProperty = _a.cssProperty;
              var isStandard = cssProperty in el.style;
              return isStandard ? standard : prefixed;
            }
            return eventType;
          }
          exports.getCorrectEventName = getCorrectEventName;

          /***/ }),

        /***/ "./packages/mdc-auto-init/constants.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-auto-init/constants.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.strings = {
            AUTO_INIT_ATTR: 'data-mdc-auto-init',
            AUTO_INIT_STATE_ATTR: 'data-mdc-auto-init-state',
            INITIALIZED_STATE: 'initialized'
          };

          /***/ }),

        /***/ "./packages/mdc-auto-init/index.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-auto-init/index.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-auto-init/constants.ts");
          var AUTO_INIT_ATTR = constants_1.strings.AUTO_INIT_ATTR,
              AUTO_INIT_STATE_ATTR = constants_1.strings.AUTO_INIT_STATE_ATTR,
              INITIALIZED_STATE = constants_1.strings.INITIALIZED_STATE;
          var registry = {};
          var CONSOLE_WARN = console.warn.bind(console); // tslint:disable-line:no-console
          function emit(evtType, evtData, shouldBubble) {
            if (shouldBubble === void 0) {
              shouldBubble = false;
            }
            var evt;
            if (typeof CustomEvent === 'function') {
              evt = new CustomEvent(evtType, {
                bubbles: shouldBubble,
                detail: evtData
              });
            } else {
              evt = document.createEvent('CustomEvent');
              evt.initCustomEvent(evtType, shouldBubble, false, evtData);
            }
            document.dispatchEvent(evt);
          }
          /* istanbul ignore next: optional argument is not a branch statement */
          /**
           * Auto-initializes all MDC components on a page.
           */
          function mdcAutoInit(root) {
            var e_1, _a;
            if (root === void 0) {
              root = document;
            }
            var components = [];
            var nodes = [].slice.call(root.querySelectorAll("[" + AUTO_INIT_ATTR + "]"));
            nodes = nodes.filter(function (node) {
              return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE;
            });
            try {
              for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                var node = nodes_1_1.value;
                var ctorName = node.getAttribute(AUTO_INIT_ATTR);
                if (!ctorName) {
                  throw new Error('(mdc-auto-init) Constructor name must be given.');
                }
                var Constructor = registry[ctorName]; // tslint:disable-line:variable-name
                if (typeof Constructor !== 'function') {
                  throw new Error("(mdc-auto-init) Could not find constructor in registry for " + ctorName);
                }
                // TODO: Should we make an eslint rule for an attachTo() static method?
                // See https://github.com/Microsoft/TypeScript/issues/14600 for discussion of static interface support in TS
                var component = Constructor.attachTo(node);
                Object.defineProperty(node, ctorName, {
                  configurable: true,
                  enumerable: false,
                  value: component,
                  writable: false
                });
                components.push(component);
                node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
            emit('MDCAutoInit:End', {});
            return components;
          }
          exports.mdcAutoInit = mdcAutoInit;
// Constructor is PascalCased because it is a direct reference to a class, rather than an instance of a class.
// tslint:disable-next-line:variable-name
          mdcAutoInit.register = function (componentName, Constructor, warn) {
            if (warn === void 0) {
              warn = CONSOLE_WARN;
            }
            if (typeof Constructor !== 'function') {
              throw new Error("(mdc-auto-init) Invalid Constructor value: " + Constructor + ". Expected function.");
            }
            var registryValue = registry[componentName];
            if (registryValue) {
              warn("(mdc-auto-init) Overriding registration for " + componentName + " with " + Constructor + ". Was: " + registryValue);
            }
            registry[componentName] = Constructor;
          };
          mdcAutoInit.deregister = function (componentName) {
            delete registry[componentName];
          };
          /** @nocollapse */
          mdcAutoInit.deregisterAll = function () {
            var keys = Object.keys(registry);
            keys.forEach(this.deregister, this);
          };
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = mdcAutoInit;

          /***/ }),

        /***/ "./packages/mdc-banner/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-banner/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-banner/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-banner/foundation.ts");
          /** Vanilla JS implementation of banner component. */
          var MDCBanner = /** @class */function (_super) {
            __extends(MDCBanner, _super);
            function MDCBanner() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCBanner.attachTo = function (root) {
              return new MDCBanner(root);
            };
            MDCBanner.prototype.initialize = function () {
              var _this = this;
              this.contentEl = this.root.querySelector(constants_1.selectors.CONTENT);
              this.textEl = this.root.querySelector(constants_1.selectors.TEXT);
              this.primaryActionEl = this.root.querySelector(constants_1.selectors.PRIMARY_ACTION);
              this.secondaryActionEl = this.root.querySelector(constants_1.selectors.SECONDARY_ACTION);
              this.handleContentClick = function (evt) {
                var target = evt.target;
                if (ponyfill_1.closest(target, constants_1.selectors.PRIMARY_ACTION)) {
                  _this.foundation.handlePrimaryActionClick();
                } else if (ponyfill_1.closest(target, constants_1.selectors.SECONDARY_ACTION)) {
                  _this.foundation.handleSecondaryActionClick();
                }
              };
            };
            MDCBanner.prototype.initialSyncWithDOM = function () {
              this.registerContentClickHandler(this.handleContentClick);
            };
            MDCBanner.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.deregisterContentClickHandler(this.handleContentClick);
            };
            MDCBanner.prototype.layout = function () {
              this.foundation.layout();
            };
            /**
             * Opens the banner and fires events.OPENING to indicate the beginning of its
             * opening animation and then events.OPENED once the animation finishes.
             */
            MDCBanner.prototype.open = function () {
              this.foundation.open();
            };
            /**
             * Closes the banner and fires events.CLOSING to indicate the beginning of its
             * closing animation and then events.CLOSED once the animation finishes.
             * @param reason Why the banner was closed. Value will be passed to
             *     events.CLOSING and events.CLOSED via the `event.detail.reason`
             *     property. Standard values are CloseReason.PRIMARY and
             *     CloseReason.SECONDARY, but CloseReason.UNSPECIFIED is provided for
             *     custom handling of programmatic closing of the banner.
             */
            MDCBanner.prototype.close = function (reason) {
              this.foundation.close(reason);
            };
            MDCBanner.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                getContentHeight: function getContentHeight() {
                  return _this.contentEl.offsetHeight;
                },
                notifyClosed: function notifyClosed(reason) {
                  _this.emit(constants_1.events.CLOSED, { reason: reason });
                },
                notifyClosing: function notifyClosing(reason) {
                  _this.emit(constants_1.events.CLOSING, { reason: reason });
                },
                notifyOpened: function notifyOpened() {
                  _this.emit(constants_1.events.OPENED, {});
                },
                notifyOpening: function notifyOpening() {
                  _this.emit(constants_1.events.OPENING, {});
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                setStyleProperty: function setStyleProperty(propertyName, value) {
                  _this.root.style.setProperty(propertyName, value);
                }
              };
              return new foundation_1.MDCBannerFoundation(adapter);
            };
            Object.defineProperty(MDCBanner.prototype, "isOpen", {
              get: function get() {
                return this.foundation.isOpen();
              },
              enumerable: true,
              configurable: true
            });
            MDCBanner.prototype.getText = function () {
              return this.textEl.textContent || '';
            };
            MDCBanner.prototype.setText = function (text) {
              this.textEl.textContent = text;
            };
            MDCBanner.prototype.getPrimaryActionText = function () {
              return this.primaryActionEl.textContent || '';
            };
            MDCBanner.prototype.setPrimaryActionText = function (actionButtonText) {
              this.primaryActionEl.textContent = actionButtonText;
            };
            /** Returns null if the banner has no secondary action. */
            MDCBanner.prototype.getSecondaryActionText = function () {
              return this.secondaryActionEl ? this.secondaryActionEl.textContent || '' : null;
            };
            MDCBanner.prototype.setSecondaryActionText = function (actionButtonText) {
              if (this.secondaryActionEl) {
                this.secondaryActionEl.textContent = actionButtonText;
              }
            };
            MDCBanner.prototype.registerContentClickHandler = function (handler) {
              this.contentEl.addEventListener('click', handler);
            };
            MDCBanner.prototype.deregisterContentClickHandler = function (handler) {
              this.contentEl.removeEventListener('click', handler);
            };
            return MDCBanner;
          }(component_1.MDCComponent);
          exports.MDCBanner = MDCBanner;

          /***/ }),

        /***/ "./packages/mdc-banner/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-banner/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /** Banner element classes. */
          exports.cssClasses = {
            CLOSING: 'mdc-banner--closing',
            OPEN: 'mdc-banner--open',
            OPENING: 'mdc-banner--opening'
          };
          /** Banner numbers. */
          exports.numbers = {
            BANNER_ANIMATION_CLOSE_TIME_MS: 250,
            BANNER_ANIMATION_OPEN_TIME_MS: 300
          };
          /** Banner events. */
          exports.events = {
            CLOSED: 'MDCBanner:closed',
            CLOSING: 'MDCBanner:closing',
            OPENED: 'MDCBanner:opened',
            OPENING: 'MDCBanner:opening'
          };
          /** Banner selectors. */
          exports.selectors = {
            CONTENT: '.mdc-banner__content',
            PRIMARY_ACTION: '.mdc-banner__primary-action',
            SECONDARY_ACTION: '.mdc-banner__secondary-action',
            TEXT: '.mdc-banner__text'
          };
          /** Reason as to why the banner was closed. */
          var CloseReason;
          (function (CloseReason) {
            // Indicates the banner was closed via primary action button.
            CloseReason[CloseReason["PRIMARY"] = 0] = "PRIMARY";
            // Indicates the banner was closed via secondary action button.
            CloseReason[CloseReason["SECONDARY"] = 1] = "SECONDARY";
            // Will never be used by the component. Provided for custom handling of
            // programmatic closing of the banner.
            CloseReason[CloseReason["UNSPECIFIED"] = 2] = "UNSPECIFIED";
          })(CloseReason = exports.CloseReason || (exports.CloseReason = {}));

          /***/ }),

        /***/ "./packages/mdc-banner/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-banner/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-banner/constants.ts");
          var OPENING = constants_1.cssClasses.OPENING,
              OPEN = constants_1.cssClasses.OPEN,
              CLOSING = constants_1.cssClasses.CLOSING;
          /**
           * Foundation class for banner. Responsibilities include opening and closing the
           * banner.
           */
          var MDCBannerFoundation = /** @class */function (_super) {
            __extends(MDCBannerFoundation, _super);
            function MDCBannerFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCBannerFoundation.defaultAdapter), adapter)) || this;
              _this.isOpened = false;
              // Request id for open animation, used to cancel the refresh callback
              // request on close() and destroy().
              _this.animationFrame = 0;
              // Timer id for close and open animation, used to cancel the timer on
              // close() and destroy().
              _this.animationTimer = 0;
              return _this;
            }
            Object.defineProperty(MDCBannerFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  getContentHeight: function getContentHeight() {
                    return 0;
                  },
                  notifyClosed: function notifyClosed() {
                    return undefined;
                  },
                  notifyClosing: function notifyClosing() {
                    return undefined;
                  },
                  notifyOpened: function notifyOpened() {
                    return undefined;
                  },
                  notifyOpening: function notifyOpening() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setStyleProperty: function setStyleProperty() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCBannerFoundation.prototype.destroy = function () {
              cancelAnimationFrame(this.animationFrame);
              this.animationFrame = 0;
              clearTimeout(this.animationTimer);
              this.animationTimer = 0;
            };
            MDCBannerFoundation.prototype.open = function () {
              var _this = this;
              this.isOpened = true;
              this.adapter.notifyOpening();
              this.adapter.removeClass(CLOSING);
              this.adapter.addClass(OPENING);
              var contentHeight = this.adapter.getContentHeight();
              this.animationFrame = requestAnimationFrame(function () {
                _this.adapter.addClass(OPEN);
                _this.adapter.setStyleProperty('height', contentHeight + "px");
                _this.animationTimer = setTimeout(function () {
                  _this.handleAnimationTimerEnd();
                  _this.adapter.notifyOpened();
                }, constants_1.numbers.BANNER_ANIMATION_OPEN_TIME_MS);
              });
            };
            /**
             * @param reason Why the banner was closed. Value will be passed to
             *     events.CLOSING and events.CLOSED via the `event.detail.reason`
             *     property. Standard values are CloseReason.PRIMARY and
             *     CloseReason.SECONDARY, but CloseReason.UNSPECIFIED is provided for
             *     custom handling of programmatic closing of the banner.
             */
            MDCBannerFoundation.prototype.close = function (reason) {
              var _this = this;
              if (!this.isOpened) {
                // Avoid redundant close calls (and events), e.g. repeated interactions as
                // the banner is animating closed
                return;
              }
              cancelAnimationFrame(this.animationFrame);
              this.animationFrame = 0;
              this.isOpened = false;
              this.adapter.notifyClosing(reason);
              this.adapter.addClass(CLOSING);
              this.adapter.setStyleProperty('height', '0');
              this.adapter.removeClass(OPEN);
              this.adapter.removeClass(OPENING);
              clearTimeout(this.animationTimer);
              this.animationTimer = setTimeout(function () {
                _this.handleAnimationTimerEnd();
                _this.adapter.notifyClosed(reason);
              }, constants_1.numbers.BANNER_ANIMATION_CLOSE_TIME_MS);
            };
            MDCBannerFoundation.prototype.isOpen = function () {
              return this.isOpened;
            };
            MDCBannerFoundation.prototype.handlePrimaryActionClick = function () {
              this.close(constants_1.CloseReason.PRIMARY);
            };
            MDCBannerFoundation.prototype.handleSecondaryActionClick = function () {
              this.close(constants_1.CloseReason.SECONDARY);
            };
            MDCBannerFoundation.prototype.layout = function () {
              var contentHeight = this.adapter.getContentHeight();
              this.adapter.setStyleProperty('height', contentHeight + "px");
            };
            MDCBannerFoundation.prototype.handleAnimationTimerEnd = function () {
              this.animationTimer = 0;
              this.adapter.removeClass(OPENING);
              this.adapter.removeClass(CLOSING);
            };
            return MDCBannerFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCBannerFoundation = MDCBannerFoundation;

          /***/ }),

        /***/ "./packages/mdc-banner/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-banner/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-banner/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-banner/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-banner/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-base/component.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-base/component.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __read = this && this.__read || function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;
            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
              }
            } catch (error) {
              e = { error: error };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }
            return ar;
          };
          var __spread = this && this.__spread || function () {
            for (var ar = [], i = 0; i < arguments.length; i++) {
              ar = ar.concat(__read(arguments[i]));
            }return ar;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-base/foundation.ts");
          var MDCComponent = /** @class */function () {
            function MDCComponent(root, foundation) {
              var args = [];
              for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
              }
              this.root = root;
              this.initialize.apply(this, __spread(args));
              // Note that we initialize foundation here and not within the constructor's default param so that
              // this.root_ is defined and can be used within the foundation class.
              this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;
              this.foundation.init();
              this.initialSyncWithDOM();
            }
            MDCComponent.attachTo = function (root) {
              // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
              // returns an instantiated component with its root set to that element. Also note that in the cases of
              // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
              // from getDefaultFoundation().
              return new MDCComponent(root, new foundation_1.MDCFoundation({}));
            };
            /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
            MDCComponent.prototype.initialize = function () {
              var _args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                _args[_i] = arguments[_i];
              }
              // Subclasses can override this to do any additional setup work that would be considered part of a
              // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
              // initialized. Any additional arguments besides root and foundation will be passed in here.
            };
            MDCComponent.prototype.getDefaultFoundation = function () {
              // Subclasses must override this method to return a properly configured foundation class for the
              // component.
              throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
            };
            MDCComponent.prototype.initialSyncWithDOM = function () {
              // Subclasses should override this method if they need to perform work to synchronize with a host DOM
              // object. An example of this would be a form control wrapper that needs to synchronize its internal state
              // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
              // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
            };
            MDCComponent.prototype.destroy = function () {
              // Subclasses may implement this method to release any resources / deregister any listeners they have
              // attached. An example of this might be deregistering a resize event from the window object.
              this.foundation.destroy();
            };
            MDCComponent.prototype.listen = function (evtType, handler, options) {
              this.root.addEventListener(evtType, handler, options);
            };
            MDCComponent.prototype.unlisten = function (evtType, handler, options) {
              this.root.removeEventListener(evtType, handler, options);
            };
            /**
             * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
             */
            MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
              if (shouldBubble === void 0) {
                shouldBubble = false;
              }
              var evt;
              if (typeof CustomEvent === 'function') {
                evt = new CustomEvent(evtType, {
                  bubbles: shouldBubble,
                  detail: evtData
                });
              } else {
                evt = document.createEvent('CustomEvent');
                evt.initCustomEvent(evtType, shouldBubble, false, evtData);
              }
              this.root.dispatchEvent(evt);
            };
            return MDCComponent;
          }();
          exports.MDCComponent = MDCComponent;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCComponent;

          /***/ }),

        /***/ "./packages/mdc-base/foundation.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-base/foundation.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var MDCFoundation = /** @class */function () {
            function MDCFoundation(adapter) {
              if (adapter === void 0) {
                adapter = {};
              }
              this.adapter = adapter;
            }
            Object.defineProperty(MDCFoundation, "cssClasses", {
              get: function get() {
                // Classes extending MDCFoundation should implement this method to return an object which exports every
                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
                return {};
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFoundation, "strings", {
              get: function get() {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
                return {};
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFoundation, "numbers", {
              get: function get() {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
                return {};
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFoundation, "defaultAdapter", {
              get: function get() {
                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
                // validation.
                return {};
              },
              enumerable: true,
              configurable: true
            });
            MDCFoundation.prototype.init = function () {
              // Subclasses should override this method to perform initialization routines (registering events, etc.)
            };
            MDCFoundation.prototype.destroy = function () {
              // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
            };
            return MDCFoundation;
          }();
          exports.MDCFoundation = MDCFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCFoundation;

          /***/ }),

        /***/ "./packages/mdc-base/index.ts":
        /*!************************************!*\
  !*** ./packages/mdc-base/index.ts ***!
  \************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-base/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-base/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-checkbox/component.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-checkbox/component.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util_1 = __webpack_require__(/*! @material/animation/util */ "./packages/mdc-animation/util.ts");
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-checkbox/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-checkbox/foundation.ts");
          var CB_PROTO_PROPS = ['checked', 'indeterminate'];
          var MDCCheckbox = /** @class */function (_super) {
            __extends(MDCCheckbox, _super);
            function MDCCheckbox() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.ripple_ = _this.createRipple_();
              return _this;
            }
            MDCCheckbox.attachTo = function (root) {
              return new MDCCheckbox(root);
            };
            Object.defineProperty(MDCCheckbox.prototype, "ripple", {
              get: function get() {
                return this.ripple_;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckbox.prototype, "checked", {
              get: function get() {
                return this.nativeControl_.checked;
              },
              set: function set(checked) {
                this.nativeControl_.checked = checked;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckbox.prototype, "indeterminate", {
              get: function get() {
                return this.nativeControl_.indeterminate;
              },
              set: function set(indeterminate) {
                this.nativeControl_.indeterminate = indeterminate;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckbox.prototype, "disabled", {
              get: function get() {
                return this.nativeControl_.disabled;
              },
              set: function set(disabled) {
                this.foundation.setDisabled(disabled);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckbox.prototype, "value", {
              get: function get() {
                return this.nativeControl_.value;
              },
              set: function set(value) {
                this.nativeControl_.value = value;
              },
              enumerable: true,
              configurable: true
            });
            MDCCheckbox.prototype.initialize = function () {
              var DATA_INDETERMINATE_ATTR = constants_1.strings.DATA_INDETERMINATE_ATTR;
              this.nativeControl_.indeterminate = this.nativeControl_.getAttribute(DATA_INDETERMINATE_ATTR) === 'true';
              this.nativeControl_.removeAttribute(DATA_INDETERMINATE_ATTR);
            };
            MDCCheckbox.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleChange_ = function () {
                return _this.foundation.handleChange();
              };
              this.handleAnimationEnd_ = function () {
                return _this.foundation.handleAnimationEnd();
              };
              this.nativeControl_.addEventListener('change', this.handleChange_);
              this.listen(util_1.getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);
              this.installPropertyChangeHooks_();
            };
            MDCCheckbox.prototype.destroy = function () {
              this.ripple_.destroy();
              this.nativeControl_.removeEventListener('change', this.handleChange_);
              this.unlisten(util_1.getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);
              this.uninstallPropertyChangeHooks_();
              _super.prototype.destroy.call(this);
            };
            MDCCheckbox.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                forceLayout: function forceLayout() {
                  return _this.root.offsetWidth;
                },
                hasNativeControl: function hasNativeControl() {
                  return !!_this.nativeControl_;
                },
                isAttachedToDOM: function isAttachedToDOM() {
                  return Boolean(_this.root.parentNode);
                },
                isChecked: function isChecked() {
                  return _this.checked;
                },
                isIndeterminate: function isIndeterminate() {
                  return _this.indeterminate;
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                removeNativeControlAttr: function removeNativeControlAttr(attr) {
                  _this.nativeControl_.removeAttribute(attr);
                },
                setNativeControlAttr: function setNativeControlAttr(attr, value) {
                  _this.nativeControl_.setAttribute(attr, value);
                },
                setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                  _this.nativeControl_.disabled = disabled;
                }
              };
              return new foundation_2.MDCCheckboxFoundation(adapter);
            };
            MDCCheckbox.prototype.createRipple_ = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.nativeControl_.removeEventListener(evtType, handler, events_1.applyPassive());
                }, isSurfaceActive: function isSurfaceActive() {
                  return ponyfill_1.matches(_this.nativeControl_, ':active');
                }, isUnbounded: function isUnbounded() {
                  return true;
                }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.nativeControl_.addEventListener(evtType, handler, events_1.applyPassive());
                } });
              return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
            };
            MDCCheckbox.prototype.installPropertyChangeHooks_ = function () {
              var _this = this;
              var nativeCb = this.nativeControl_;
              var cbProto = Object.getPrototypeOf(nativeCb);
              CB_PROTO_PROPS.forEach(function (controlState) {
                var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
                // We have to check for this descriptor, since some browsers (Safari) don't support its return.
                // See: https://bugs.webkit.org/show_bug.cgi?id=49739
                if (!validDescriptor(desc)) {
                  return;
                }
                // Type cast is needed for compatibility with Closure Compiler.
                var nativeGetter = desc.get;
                var nativeCbDesc = {
                  configurable: desc.configurable,
                  enumerable: desc.enumerable,
                  get: nativeGetter,
                  set: function set(state) {
                    desc.set.call(nativeCb, state);
                    _this.foundation.handleChange();
                  }
                };
                Object.defineProperty(nativeCb, controlState, nativeCbDesc);
              });
            };
            MDCCheckbox.prototype.uninstallPropertyChangeHooks_ = function () {
              var nativeCb = this.nativeControl_;
              var cbProto = Object.getPrototypeOf(nativeCb);
              CB_PROTO_PROPS.forEach(function (controlState) {
                var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
                if (!validDescriptor(desc)) {
                  return;
                }
                Object.defineProperty(nativeCb, controlState, desc);
              });
            };
            Object.defineProperty(MDCCheckbox.prototype, "nativeControl_", {
              get: function get() {
                var NATIVE_CONTROL_SELECTOR = constants_1.strings.NATIVE_CONTROL_SELECTOR;
                var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
                if (!el) {
                  throw new Error("Checkbox component requires a " + NATIVE_CONTROL_SELECTOR + " element");
                }
                return el;
              },
              enumerable: true,
              configurable: true
            });
            return MDCCheckbox;
          }(component_1.MDCComponent);
          exports.MDCCheckbox = MDCCheckbox;
          function validDescriptor(inputPropDesc) {
            return !!inputPropDesc && typeof inputPropDesc.set === 'function';
          }

          /***/ }),

        /***/ "./packages/mdc-checkbox/constants.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-checkbox/constants.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
            ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
            ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
            ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
            ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
            ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
            BACKGROUND: 'mdc-checkbox__background',
            CHECKED: 'mdc-checkbox--checked',
            CHECKMARK: 'mdc-checkbox__checkmark',
            CHECKMARK_PATH: 'mdc-checkbox__checkmark-path',
            DISABLED: 'mdc-checkbox--disabled',
            INDETERMINATE: 'mdc-checkbox--indeterminate',
            MIXEDMARK: 'mdc-checkbox__mixedmark',
            NATIVE_CONTROL: 'mdc-checkbox__native-control',
            ROOT: 'mdc-checkbox',
            SELECTED: 'mdc-checkbox--selected',
            UPGRADED: 'mdc-checkbox--upgraded'
          };
          exports.strings = {
            ARIA_CHECKED_ATTR: 'aria-checked',
            ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
            DATA_INDETERMINATE_ATTR: 'data-indeterminate',
            NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
            TRANSITION_STATE_CHECKED: 'checked',
            TRANSITION_STATE_INDETERMINATE: 'indeterminate',
            TRANSITION_STATE_INIT: 'init',
            TRANSITION_STATE_UNCHECKED: 'unchecked'
          };
          exports.numbers = {
            ANIM_END_LATCH_MS: 250
          };

          /***/ }),

        /***/ "./packages/mdc-checkbox/foundation.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-checkbox/foundation.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-checkbox/constants.ts");
          var MDCCheckboxFoundation = /** @class */function (_super) {
            __extends(MDCCheckboxFoundation, _super);
            function MDCCheckboxFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation.defaultAdapter), adapter)) || this;
              _this.currentCheckState_ = constants_1.strings.TRANSITION_STATE_INIT;
              _this.currentAnimationClass_ = '';
              _this.animEndLatchTimer_ = 0;
              _this.enableAnimationEndHandler_ = false;
              return _this;
            }
            Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckboxFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckboxFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  forceLayout: function forceLayout() {
                    return undefined;
                  },
                  hasNativeControl: function hasNativeControl() {
                    return false;
                  },
                  isAttachedToDOM: function isAttachedToDOM() {
                    return false;
                  },
                  isChecked: function isChecked() {
                    return false;
                  },
                  isIndeterminate: function isIndeterminate() {
                    return false;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  removeNativeControlAttr: function removeNativeControlAttr() {
                    return undefined;
                  },
                  setNativeControlAttr: function setNativeControlAttr() {
                    return undefined;
                  },
                  setNativeControlDisabled: function setNativeControlDisabled() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCCheckboxFoundation.prototype.init = function () {
              this.currentCheckState_ = this.determineCheckState_();
              this.updateAriaChecked_();
              this.adapter.addClass(constants_1.cssClasses.UPGRADED);
            };
            MDCCheckboxFoundation.prototype.destroy = function () {
              clearTimeout(this.animEndLatchTimer_);
            };
            MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {
              this.adapter.setNativeControlDisabled(disabled);
              if (disabled) {
                this.adapter.addClass(constants_1.cssClasses.DISABLED);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.DISABLED);
              }
            };
            /**
             * Handles the animationend event for the checkbox
             */
            MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {
              var _this = this;
              if (!this.enableAnimationEndHandler_) {
                return;
              }
              clearTimeout(this.animEndLatchTimer_);
              this.animEndLatchTimer_ = setTimeout(function () {
                _this.adapter.removeClass(_this.currentAnimationClass_);
                _this.enableAnimationEndHandler_ = false;
              }, constants_1.numbers.ANIM_END_LATCH_MS);
            };
            /**
             * Handles the change event for the checkbox
             */
            MDCCheckboxFoundation.prototype.handleChange = function () {
              this.transitionCheckState_();
            };
            MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {
              if (!this.adapter.hasNativeControl()) {
                return;
              }
              var oldState = this.currentCheckState_;
              var newState = this.determineCheckState_();
              if (oldState === newState) {
                return;
              }
              this.updateAriaChecked_();
              var TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
              var SELECTED = constants_1.cssClasses.SELECTED;
              if (newState === TRANSITION_STATE_UNCHECKED) {
                this.adapter.removeClass(SELECTED);
              } else {
                this.adapter.addClass(SELECTED);
              }
              // Check to ensure that there isn't a previously existing animation class, in case for example
              // the user interacted with the checkbox before the animation was finished.
              if (this.currentAnimationClass_.length > 0) {
                clearTimeout(this.animEndLatchTimer_);
                this.adapter.forceLayout();
                this.adapter.removeClass(this.currentAnimationClass_);
              }
              this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);
              this.currentCheckState_ = newState;
              // Check for parentNode so that animations are only run when the element is attached
              // to the DOM.
              if (this.adapter.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {
                this.adapter.addClass(this.currentAnimationClass_);
                this.enableAnimationEndHandler_ = true;
              }
            };
            MDCCheckboxFoundation.prototype.determineCheckState_ = function () {
              var TRANSITION_STATE_INDETERMINATE = constants_1.strings.TRANSITION_STATE_INDETERMINATE,
                  TRANSITION_STATE_CHECKED = constants_1.strings.TRANSITION_STATE_CHECKED,
                  TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
              if (this.adapter.isIndeterminate()) {
                return TRANSITION_STATE_INDETERMINATE;
              }
              return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
            };
            MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {
              var TRANSITION_STATE_INIT = constants_1.strings.TRANSITION_STATE_INIT,
                  TRANSITION_STATE_CHECKED = constants_1.strings.TRANSITION_STATE_CHECKED,
                  TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
              var _a = MDCCheckboxFoundation.cssClasses,
                  ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED,
                  ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE,
                  ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED,
                  ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE,
                  ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED,
                  ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
              switch (oldState) {
                case TRANSITION_STATE_INIT:
                  if (newState === TRANSITION_STATE_UNCHECKED) {
                    return '';
                  }
                  return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
                case TRANSITION_STATE_UNCHECKED:
                  return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
                case TRANSITION_STATE_CHECKED:
                  return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
                default:
                  // TRANSITION_STATE_INDETERMINATE
                  return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
              }
            };
            MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {
              // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
              if (this.adapter.isIndeterminate()) {
                this.adapter.setNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR, constants_1.strings.ARIA_CHECKED_INDETERMINATE_VALUE);
              } else {
                // The on/off state does not need to keep track of aria-checked, since
                // the screenreader uses the checked property on the checkbox element.
                this.adapter.removeNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR);
              }
            };
            return MDCCheckboxFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCCheckboxFoundation = MDCCheckboxFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCCheckboxFoundation;

          /***/ }),

        /***/ "./packages/mdc-checkbox/index.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-checkbox/index.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-checkbox/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-checkbox/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-checkbox/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-chips/chip-set/component.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-chips/chip-set/component.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var announce_1 = __webpack_require__(/*! @material/dom/announce */ "./packages/mdc-dom/announce.ts");
          var component_2 = __webpack_require__(/*! ../chip/component */ "./packages/mdc-chips/chip/component.ts");
          var foundation_1 = __webpack_require__(/*! ../chip/foundation */ "./packages/mdc-chips/chip/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-chips/chip-set/foundation.ts");
          var _a = foundation_1.MDCChipFoundation.strings,
              INTERACTION_EVENT = _a.INTERACTION_EVENT,
              SELECTION_EVENT = _a.SELECTION_EVENT,
              REMOVAL_EVENT = _a.REMOVAL_EVENT,
              NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
          var CHIP_SELECTOR = foundation_2.MDCChipSetFoundation.strings.CHIP_SELECTOR;
          var idCounter = 0;
          var MDCChipSet = /** @class */function (_super) {
            __extends(MDCChipSet, _super);
            function MDCChipSet() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCChipSet.attachTo = function (root) {
              return new MDCChipSet(root);
            };
            Object.defineProperty(MDCChipSet.prototype, "chips", {
              get: function get() {
                return this.chips_.slice();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipSet.prototype, "selectedChipIds", {
              /**
               * @return An array of the IDs of all selected chips.
               */
              get: function get() {
                return this.foundation.getSelectedChipIds();
              },
              enumerable: true,
              configurable: true
            });
            /**
             * @param chipFactory A function which creates a new MDCChip.
             */
            MDCChipSet.prototype.initialize = function (chipFactory) {
              if (chipFactory === void 0) {
                chipFactory = function chipFactory(el) {
                  return new component_2.MDCChip(el);
                };
              }
              this.chipFactory_ = chipFactory;
              this.chips_ = this.instantiateChips_(this.chipFactory_);
            };
            MDCChipSet.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.chips_.forEach(function (chip) {
                if (chip.id && chip.selected) {
                  _this.foundation.select(chip.id);
                }
              });
              this.handleChipInteraction_ = function (evt) {
                return _this.foundation.handleChipInteraction(evt.detail);
              };
              this.handleChipSelection_ = function (evt) {
                return _this.foundation.handleChipSelection(evt.detail);
              };
              this.handleChipRemoval_ = function (evt) {
                return _this.foundation.handleChipRemoval(evt.detail);
              };
              this.handleChipNavigation_ = function (evt) {
                return _this.foundation.handleChipNavigation(evt.detail);
              };
              this.listen(INTERACTION_EVENT, this.handleChipInteraction_);
              this.listen(SELECTION_EVENT, this.handleChipSelection_);
              this.listen(REMOVAL_EVENT, this.handleChipRemoval_);
              this.listen(NAVIGATION_EVENT, this.handleChipNavigation_);
            };
            MDCChipSet.prototype.destroy = function () {
              this.chips_.forEach(function (chip) {
                chip.destroy();
              });
              this.unlisten(INTERACTION_EVENT, this.handleChipInteraction_);
              this.unlisten(SELECTION_EVENT, this.handleChipSelection_);
              this.unlisten(REMOVAL_EVENT, this.handleChipRemoval_);
              this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation_);
              _super.prototype.destroy.call(this);
            };
            /**
             * Adds a new chip object to the chip set from the given chip element.
             */
            MDCChipSet.prototype.addChip = function (chipEl) {
              chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
              this.chips_.push(this.chipFactory_(chipEl));
            };
            MDCChipSet.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                announceMessage: function announceMessage(message) {
                  announce_1.announce(message);
                },
                focusChipPrimaryActionAtIndex: function focusChipPrimaryActionAtIndex(index) {
                  _this.chips_[index].focusPrimaryAction();
                },
                focusChipTrailingActionAtIndex: function focusChipTrailingActionAtIndex(index) {
                  _this.chips_[index].focusTrailingAction();
                },
                getChipListCount: function getChipListCount() {
                  return _this.chips_.length;
                },
                getIndexOfChipById: function getIndexOfChipById(chipId) {
                  return _this.findChipIndex_(chipId);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                isRTL: function isRTL() {
                  return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
                },
                removeChipAtIndex: function removeChipAtIndex(index) {
                  if (index >= 0 && index < _this.chips_.length) {
                    _this.chips_[index].destroy();
                    _this.chips_[index].remove();
                    _this.chips_.splice(index, 1);
                  }
                },
                removeFocusFromChipAtIndex: function removeFocusFromChipAtIndex(index) {
                  _this.chips_[index].removeFocus();
                },
                selectChipAtIndex: function selectChipAtIndex(index, selected, shouldNotifyClients) {
                  if (index >= 0 && index < _this.chips_.length) {
                    _this.chips_[index].setSelectedFromChipSet(selected, shouldNotifyClients);
                  }
                }
              };
              return new foundation_2.MDCChipSetFoundation(adapter);
            };
            /**
             * Instantiates chip components on all of the chip set's child chip elements.
             */
            MDCChipSet.prototype.instantiateChips_ = function (chipFactory) {
              var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
              return chipElements.map(function (el) {
                el.id = el.id || "mdc-chip-" + ++idCounter;
                return chipFactory(el);
              });
            };
            /**
             * Returns the index of the chip with the given id, or -1 if the chip does not exist.
             */
            MDCChipSet.prototype.findChipIndex_ = function (chipId) {
              for (var i = 0; i < this.chips_.length; i++) {
                if (this.chips_[i].id === chipId) {
                  return i;
                }
              }
              return -1;
            };
            return MDCChipSet;
          }(component_1.MDCComponent);
          exports.MDCChipSet = MDCChipSet;

          /***/ }),

        /***/ "./packages/mdc-chips/chip-set/constants.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-chips/chip-set/constants.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.strings = {
            CHIP_SELECTOR: '.mdc-chip'
          };
          exports.cssClasses = {
            CHOICE: 'mdc-chip-set--choice',
            FILTER: 'mdc-chip-set--filter'
          };

          /***/ }),

        /***/ "./packages/mdc-chips/chip-set/foundation.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-chips/chip-set/foundation.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ../chip/constants */ "./packages/mdc-chips/chip/constants.ts");
          var constants_2 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/chip-set/constants.ts");
          var MDCChipSetFoundation = /** @class */function (_super) {
            __extends(MDCChipSetFoundation, _super);
            function MDCChipSetFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation.defaultAdapter), adapter)) || this;
              /**
               * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.
               */
              _this.selectedChipIds_ = [];
              return _this;
            }
            Object.defineProperty(MDCChipSetFoundation, "strings", {
              get: function get() {
                return constants_2.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipSetFoundation, "cssClasses", {
              get: function get() {
                return constants_2.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipSetFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  announceMessage: function announceMessage() {
                    return undefined;
                  },
                  focusChipPrimaryActionAtIndex: function focusChipPrimaryActionAtIndex() {
                    return undefined;
                  },
                  focusChipTrailingActionAtIndex: function focusChipTrailingActionAtIndex() {
                    return undefined;
                  },
                  getChipListCount: function getChipListCount() {
                    return -1;
                  },
                  getIndexOfChipById: function getIndexOfChipById() {
                    return -1;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  isRTL: function isRTL() {
                    return false;
                  },
                  removeChipAtIndex: function removeChipAtIndex() {
                    return undefined;
                  },
                  removeFocusFromChipAtIndex: function removeFocusFromChipAtIndex() {
                    return undefined;
                  },
                  selectChipAtIndex: function selectChipAtIndex() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Returns an array of the IDs of all selected chips.
             */
            MDCChipSetFoundation.prototype.getSelectedChipIds = function () {
              return this.selectedChipIds_.slice();
            };
            /**
             * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.
             * Does not notify clients of the updated selection state.
             */
            MDCChipSetFoundation.prototype.select = function (chipId) {
              this.select_(chipId, false);
            };
            /**
             * Handles a chip interaction event
             */
            MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {
              var chipId = _a.chipId;
              var index = this.adapter.getIndexOfChipById(chipId);
              this.removeFocusFromChipsExcept_(index);
              if (this.adapter.hasClass(constants_2.cssClasses.CHOICE) || this.adapter.hasClass(constants_2.cssClasses.FILTER)) {
                this.toggleSelect_(chipId);
              }
            };
            /**
             * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.
             */
            MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {
              var chipId = _a.chipId,
                  selected = _a.selected,
                  shouldIgnore = _a.shouldIgnore;
              // Early exit if we should ignore the event
              if (shouldIgnore) {
                return;
              }
              var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;
              if (selected && !chipIsSelected) {
                this.select(chipId);
              } else if (!selected && chipIsSelected) {
                this.deselect_(chipId);
              }
            };
            /**
             * Handles the event when a chip is removed.
             */
            MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {
              var chipId = _a.chipId,
                  removedAnnouncement = _a.removedAnnouncement;
              if (removedAnnouncement) {
                this.adapter.announceMessage(removedAnnouncement);
              }
              var index = this.adapter.getIndexOfChipById(chipId);
              this.deselectAndNotifyClients_(chipId);
              this.adapter.removeChipAtIndex(index);
              var maxIndex = this.adapter.getChipListCount() - 1;
              if (maxIndex < 0) {
                return;
              }
              var nextIndex = Math.min(index, maxIndex);
              this.removeFocusFromChipsExcept_(nextIndex);
              // After removing a chip, we should focus the trailing action for the next chip.
              this.adapter.focusChipTrailingActionAtIndex(nextIndex);
            };
            /**
             * Handles a chip navigation event.
             */
            MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {
              var chipId = _a.chipId,
                  key = _a.key,
                  source = _a.source;
              var maxIndex = this.adapter.getChipListCount() - 1;
              var index = this.adapter.getIndexOfChipById(chipId);
              // Early exit if the index is out of range or the key is unusable
              if (index === -1 || !constants_1.navigationKeys.has(key)) {
                return;
              }
              var isRTL = this.adapter.isRTL();
              var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
              var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
              var isDownKey = key === constants_1.strings.ARROW_DOWN_KEY || key === constants_1.strings.IE_ARROW_DOWN_KEY;
              var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
              var isHome = key === constants_1.strings.HOME_KEY;
              var isEnd = key === constants_1.strings.END_KEY;
              if (shouldIncrement) {
                index++;
              } else if (isHome) {
                index = 0;
              } else if (isEnd) {
                index = maxIndex;
              } else {
                index--;
              }
              // Early exit if the index is out of bounds
              if (index < 0 || index > maxIndex) {
                return;
              }
              this.removeFocusFromChipsExcept_(index);
              this.focusChipAction_(index, key, source);
            };
            MDCChipSetFoundation.prototype.focusChipAction_ = function (index, key, source) {
              var shouldJumpChips = constants_1.jumpChipKeys.has(key);
              if (shouldJumpChips && source === constants_1.EventSource.PRIMARY) {
                return this.adapter.focusChipPrimaryActionAtIndex(index);
              }
              if (shouldJumpChips && source === constants_1.EventSource.TRAILING) {
                return this.adapter.focusChipTrailingActionAtIndex(index);
              }
              var dir = this.getDirection_(key);
              if (dir === constants_1.Direction.LEFT) {
                return this.adapter.focusChipTrailingActionAtIndex(index);
              }
              if (dir === constants_1.Direction.RIGHT) {
                return this.adapter.focusChipPrimaryActionAtIndex(index);
              }
            };
            MDCChipSetFoundation.prototype.getDirection_ = function (key) {
              var isRTL = this.adapter.isRTL();
              var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
              var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
              if (!isRTL && isLeftKey || isRTL && isRightKey) {
                return constants_1.Direction.LEFT;
              }
              return constants_1.Direction.RIGHT;
            };
            /**
             * Deselects the chip with the given id and optionally notifies clients.
             */
            MDCChipSetFoundation.prototype.deselect_ = function (chipId, shouldNotifyClients) {
              if (shouldNotifyClients === void 0) {
                shouldNotifyClients = false;
              }
              var index = this.selectedChipIds_.indexOf(chipId);
              if (index >= 0) {
                this.selectedChipIds_.splice(index, 1);
                var chipIndex = this.adapter.getIndexOfChipById(chipId);
                this.adapter.selectChipAtIndex(chipIndex, /** isSelected */false, shouldNotifyClients);
              }
            };
            /**
             * Deselects the chip with the given id and notifies clients.
             */
            MDCChipSetFoundation.prototype.deselectAndNotifyClients_ = function (chipId) {
              this.deselect_(chipId, true);
            };
            /**
             * Toggles selection of the chip with the given id.
             */
            MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {
              if (this.selectedChipIds_.indexOf(chipId) >= 0) {
                this.deselectAndNotifyClients_(chipId);
              } else {
                this.selectAndNotifyClients_(chipId);
              }
            };
            MDCChipSetFoundation.prototype.removeFocusFromChipsExcept_ = function (index) {
              var chipCount = this.adapter.getChipListCount();
              for (var i = 0; i < chipCount; i++) {
                if (i !== index) {
                  this.adapter.removeFocusFromChipAtIndex(i);
                }
              }
            };
            MDCChipSetFoundation.prototype.selectAndNotifyClients_ = function (chipId) {
              this.select_(chipId, true);
            };
            MDCChipSetFoundation.prototype.select_ = function (chipId, shouldNotifyClients) {
              if (this.selectedChipIds_.indexOf(chipId) >= 0) {
                return;
              }
              if (this.adapter.hasClass(constants_2.cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {
                var previouslySelectedChip = this.selectedChipIds_[0];
                var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
                this.selectedChipIds_ = [];
                this.adapter.selectChipAtIndex(previouslySelectedIndex, /** isSelected */false, shouldNotifyClients);
              }
              this.selectedChipIds_.push(chipId);
              var index = this.adapter.getIndexOfChipById(chipId);
              this.adapter.selectChipAtIndex(index, /** isSelected */true, shouldNotifyClients);
            };
            return MDCChipSetFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCChipSetFoundation = MDCChipSetFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCChipSetFoundation;

          /***/ }),

        /***/ "./packages/mdc-chips/chip-set/index.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-chips/chip-set/index.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-chips/chip-set/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-chips/chip-set/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/chip-set/constants.ts");
          exports.chipSetCssClasses = constants_1.cssClasses;
          exports.chipSetStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-chips/chip/component.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-chips/chip/component.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var component_3 = __webpack_require__(/*! ../trailingaction/component */ "./packages/mdc-chips/trailingaction/component.ts");
          var constants_1 = __webpack_require__(/*! ../trailingaction/constants */ "./packages/mdc-chips/trailingaction/constants.ts");
          var constants_2 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/chip/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-chips/chip/foundation.ts");
          var MDCChip = /** @class */function (_super) {
            __extends(MDCChip, _super);
            function MDCChip() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(MDCChip.prototype, "selected", {
              /**
               * @return Whether the chip is selected.
               */
              get: function get() {
                return this.foundation.isSelected();
              },
              /**
               * Sets selected state on the chip.
               */
              set: function set(selected) {
                this.foundation.setSelected(selected);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChip.prototype, "shouldRemoveOnTrailingIconClick", {
              /**
               * @return Whether a trailing icon click should trigger exit/removal of the chip.
               */
              get: function get() {
                return this.foundation.getShouldRemoveOnTrailingIconClick();
              },
              /**
               * Sets whether a trailing icon click should trigger exit/removal of the chip.
               */
              set: function set(shouldRemove) {
                this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChip.prototype, "setShouldFocusPrimaryActionOnClick", {
              /**
               * Sets whether a clicking on the chip should focus the primary action.
               */
              set: function set(shouldFocus) {
                this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChip.prototype, "ripple", {
              get: function get() {
                return this.ripple_;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChip.prototype, "id", {
              get: function get() {
                return this.root.id;
              },
              enumerable: true,
              configurable: true
            });
            MDCChip.attachTo = function (root) {
              return new MDCChip(root);
            };
            MDCChip.prototype.initialize = function (rippleFactory, trailingActionFactory) {
              var _this = this;
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el, foundation) {
                  return new component_2.MDCRipple(el, foundation);
                };
              }
              if (trailingActionFactory === void 0) {
                trailingActionFactory = function trailingActionFactory(el) {
                  return new component_3.MDCChipTrailingAction(el);
                };
              }
              this.leadingIcon_ = this.root.querySelector(constants_2.strings.LEADING_ICON_SELECTOR);
              this.checkmark_ = this.root.querySelector(constants_2.strings.CHECKMARK_SELECTOR);
              this.primaryAction_ = this.root.querySelector(constants_2.strings.PRIMARY_ACTION_SELECTOR);
              var trailingActionEl = this.root.querySelector(constants_2.strings.TRAILING_ACTION_SELECTOR);
              if (trailingActionEl) {
                this.trailingAction_ = trailingActionFactory(trailingActionEl);
              }
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var rippleAdapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                  return _this.foundation.getDimensions();
                } });
              this.ripple_ = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
            };
            MDCChip.prototype.initialSyncWithDOM = function () {
              var _this = this;
              // Custom events
              this.handleTrailingActionInteraction_ = function () {
                _this.foundation.handleTrailingActionInteraction();
              };
              this.handleTrailingActionNavigation_ = function (evt) {
                _this.foundation.handleTrailingActionNavigation(evt);
              };
              // Native events
              this.handleClick_ = function () {
                _this.foundation.handleClick();
              };
              this.handleKeydown_ = function (evt) {
                _this.foundation.handleKeydown(evt);
              };
              this.handleTransitionEnd_ = function (evt) {
                _this.foundation.handleTransitionEnd(evt);
              };
              this.handleFocusIn_ = function (evt) {
                _this.foundation.handleFocusIn(evt);
              };
              this.handleFocusOut_ = function (evt) {
                _this.foundation.handleFocusOut(evt);
              };
              this.listen('transitionend', this.handleTransitionEnd_);
              this.listen('click', this.handleClick_);
              this.listen('keydown', this.handleKeydown_);
              this.listen('focusin', this.handleFocusIn_);
              this.listen('focusout', this.handleFocusOut_);
              if (this.trailingAction_) {
                this.listen(constants_1.strings.INTERACTION_EVENT, this.handleTrailingActionInteraction_);
                this.listen(constants_1.strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation_);
              }
            };
            MDCChip.prototype.destroy = function () {
              this.ripple_.destroy();
              this.unlisten('transitionend', this.handleTransitionEnd_);
              this.unlisten('keydown', this.handleKeydown_);
              this.unlisten('click', this.handleClick_);
              this.unlisten('focusin', this.handleFocusIn_);
              this.unlisten('focusout', this.handleFocusOut_);
              if (this.trailingAction_) {
                this.unlisten(constants_1.strings.INTERACTION_EVENT, this.handleTrailingActionInteraction_);
                this.unlisten(constants_1.strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation_);
              }
              _super.prototype.destroy.call(this);
            };
            /**
             * Begins the exit animation which leads to removal of the chip.
             */
            MDCChip.prototype.beginExit = function () {
              this.foundation.beginExit();
            };
            MDCChip.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                addClassToLeadingIcon: function addClassToLeadingIcon(className) {
                  if (_this.leadingIcon_) {
                    _this.leadingIcon_.classList.add(className);
                  }
                },
                eventTargetHasClass: function eventTargetHasClass(target, className) {
                  return target ? target.classList.contains(className) : false;
                },
                focusPrimaryAction: function focusPrimaryAction() {
                  if (_this.primaryAction_) {
                    _this.primaryAction_.focus();
                  }
                },
                focusTrailingAction: function focusTrailingAction() {
                  if (_this.trailingAction_) {
                    _this.trailingAction_.focus();
                  }
                },
                getAttribute: function getAttribute(attr) {
                  return _this.root.getAttribute(attr);
                },
                getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
                  return _this.checkmark_ ? _this.checkmark_.getBoundingClientRect() : null;
                },
                getComputedStyleValue: function getComputedStyleValue(propertyName) {
                  return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
                },
                getRootBoundingClientRect: function getRootBoundingClientRect() {
                  return _this.root.getBoundingClientRect();
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                hasLeadingIcon: function hasLeadingIcon() {
                  return !!_this.leadingIcon_;
                },
                isRTL: function isRTL() {
                  return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
                },
                isTrailingActionNavigable: function isTrailingActionNavigable() {
                  if (_this.trailingAction_) {
                    return _this.trailingAction_.isNavigable();
                  }
                  return false;
                },
                notifyInteraction: function notifyInteraction() {
                  return _this.emit(constants_2.strings.INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */);
                },
                notifyNavigation: function notifyNavigation(key, source) {
                  return _this.emit(constants_2.strings.NAVIGATION_EVENT, { chipId: _this.id, key: key, source: source }, true /* shouldBubble */);
                },
                notifyRemoval: function notifyRemoval(removedAnnouncement) {
                  _this.emit(constants_2.strings.REMOVAL_EVENT, { chipId: _this.id, removedAnnouncement: removedAnnouncement }, true /* shouldBubble */);
                },
                notifySelection: function notifySelection(selected, shouldIgnore) {
                  return _this.emit(constants_2.strings.SELECTION_EVENT, { chipId: _this.id, selected: selected, shouldIgnore: shouldIgnore }, true /* shouldBubble */);
                },
                notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
                  return _this.emit(constants_2.strings.TRAILING_ICON_INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */);
                },
                notifyEditStart: function notifyEditStart() {},
                notifyEditFinish: function notifyEditFinish() {},
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                removeClassFromLeadingIcon: function removeClassFromLeadingIcon(className) {
                  if (_this.leadingIcon_) {
                    _this.leadingIcon_.classList.remove(className);
                  }
                },
                removeTrailingActionFocus: function removeTrailingActionFocus() {
                  if (_this.trailingAction_) {
                    _this.trailingAction_.removeFocus();
                  }
                },
                setPrimaryActionAttr: function setPrimaryActionAttr(attr, value) {
                  if (_this.primaryAction_) {
                    _this.primaryAction_.setAttribute(attr, value);
                  }
                },
                setStyleProperty: function setStyleProperty(propertyName, value) {
                  return _this.root.style.setProperty(propertyName, value);
                }
              };
              return new foundation_2.MDCChipFoundation(adapter);
            };
            MDCChip.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
              this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
            };
            MDCChip.prototype.focusPrimaryAction = function () {
              this.foundation.focusPrimaryAction();
            };
            MDCChip.prototype.focusTrailingAction = function () {
              this.foundation.focusTrailingAction();
            };
            MDCChip.prototype.removeFocus = function () {
              this.foundation.removeFocus();
            };
            MDCChip.prototype.remove = function () {
              var parent = this.root.parentNode;
              if (parent !== null) {
                parent.removeChild(this.root);
              }
            };
            return MDCChip;
          }(component_1.MDCComponent);
          exports.MDCChip = MDCChip;

          /***/ }),

        /***/ "./packages/mdc-chips/chip/constants.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-chips/chip/constants.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var Direction;
          (function (Direction) {
            Direction["LEFT"] = "left";
            Direction["RIGHT"] = "right";
          })(Direction = exports.Direction || (exports.Direction = {}));
          var EventSource;
          (function (EventSource) {
            EventSource["PRIMARY"] = "primary";
            EventSource["TRAILING"] = "trailing";
            EventSource["NONE"] = "none";
          })(EventSource = exports.EventSource || (exports.EventSource = {}));
          exports.strings = {
            ADDED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-added-announcement',
            ARIA_CHECKED: 'aria-checked',
            ARROW_DOWN_KEY: 'ArrowDown',
            ARROW_LEFT_KEY: 'ArrowLeft',
            ARROW_RIGHT_KEY: 'ArrowRight',
            ARROW_UP_KEY: 'ArrowUp',
            BACKSPACE_KEY: 'Backspace',
            CHECKMARK_SELECTOR: '.mdc-chip__checkmark',
            DELETE_KEY: 'Delete',
            END_KEY: 'End',
            ENTER_KEY: 'Enter',
            ENTRY_ANIMATION_NAME: 'mdc-chip-entry',
            HOME_KEY: 'Home',
            IE_ARROW_DOWN_KEY: 'Down',
            IE_ARROW_LEFT_KEY: 'Left',
            IE_ARROW_RIGHT_KEY: 'Right',
            IE_ARROW_UP_KEY: 'Up',
            IE_DELETE_KEY: 'Del',
            INTERACTION_EVENT: 'MDCChip:interaction',
            LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',
            NAVIGATION_EVENT: 'MDCChip:navigation',
            PRIMARY_ACTION_SELECTOR: '.mdc-chip__primary-action',
            REMOVED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-removed-announcement',
            REMOVAL_EVENT: 'MDCChip:removal',
            SELECTION_EVENT: 'MDCChip:selection',
            SPACEBAR_KEY: ' ',
            TAB_INDEX: 'tabindex',
            TRAILING_ACTION_SELECTOR: '.mdc-chip-trailing-action',
            TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',
            TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing'
          };
          exports.cssClasses = {
            CHECKMARK: 'mdc-chip__checkmark',
            CHIP_EXIT: 'mdc-chip--exit',
            DELETABLE: 'mdc-chip--deletable',
            EDITABLE: 'mdc-chip--editable',
            EDITING: 'mdc-chip--editing',
            HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',
            LEADING_ICON: 'mdc-chip__icon--leading',
            PRIMARY_ACTION: 'mdc-chip__primary-action',
            PRIMARY_ACTION_FOCUSED: 'mdc-chip--primary-action-focused',
            SELECTED: 'mdc-chip--selected',
            TEXT: 'mdc-chip__text',
            TRAILING_ACTION: 'mdc-chip__trailing-action',
            TRAILING_ICON: 'mdc-chip__icon--trailing'
          };
          exports.navigationKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this by hand
          exports.navigationKeys.add(exports.strings.ARROW_LEFT_KEY);
          exports.navigationKeys.add(exports.strings.ARROW_RIGHT_KEY);
          exports.navigationKeys.add(exports.strings.ARROW_DOWN_KEY);
          exports.navigationKeys.add(exports.strings.ARROW_UP_KEY);
          exports.navigationKeys.add(exports.strings.END_KEY);
          exports.navigationKeys.add(exports.strings.HOME_KEY);
          exports.navigationKeys.add(exports.strings.IE_ARROW_LEFT_KEY);
          exports.navigationKeys.add(exports.strings.IE_ARROW_RIGHT_KEY);
          exports.navigationKeys.add(exports.strings.IE_ARROW_DOWN_KEY);
          exports.navigationKeys.add(exports.strings.IE_ARROW_UP_KEY);
          exports.jumpChipKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this by hand
          exports.jumpChipKeys.add(exports.strings.ARROW_UP_KEY);
          exports.jumpChipKeys.add(exports.strings.ARROW_DOWN_KEY);
          exports.jumpChipKeys.add(exports.strings.HOME_KEY);
          exports.jumpChipKeys.add(exports.strings.END_KEY);
          exports.jumpChipKeys.add(exports.strings.IE_ARROW_UP_KEY);
          exports.jumpChipKeys.add(exports.strings.IE_ARROW_DOWN_KEY);

          /***/ }),

        /***/ "./packages/mdc-chips/chip/foundation.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-chips/chip/foundation.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/chip/constants.ts");
          var emptyClientRect = {
            bottom: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0,
            width: 0
          };
          var FocusBehavior;
          (function (FocusBehavior) {
            FocusBehavior[FocusBehavior["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
            FocusBehavior[FocusBehavior["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
          })(FocusBehavior || (FocusBehavior = {}));
          var MDCChipFoundation = /** @class */function (_super) {
            __extends(MDCChipFoundation, _super);
            function MDCChipFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation.defaultAdapter), adapter)) || this;
              /** Whether a trailing icon click should immediately trigger exit/removal of the chip. */
              _this.shouldRemoveOnTrailingIconClick_ = true;
              /**
               * Whether the primary action should receive focus on click. Should only be
               * set to true for clients who programmatically give focus to a different
               * element on the page when a chip is clicked (like a menu).
               */
              _this.shouldFocusPrimaryActionOnClick_ = true;
              return _this;
            }
            Object.defineProperty(MDCChipFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  addClassToLeadingIcon: function addClassToLeadingIcon() {
                    return undefined;
                  },
                  eventTargetHasClass: function eventTargetHasClass() {
                    return false;
                  },
                  focusPrimaryAction: function focusPrimaryAction() {
                    return undefined;
                  },
                  focusTrailingAction: function focusTrailingAction() {
                    return undefined;
                  },
                  getAttribute: function getAttribute() {
                    return null;
                  },
                  getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
                    return emptyClientRect;
                  },
                  getComputedStyleValue: function getComputedStyleValue() {
                    return '';
                  },
                  getRootBoundingClientRect: function getRootBoundingClientRect() {
                    return emptyClientRect;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  hasLeadingIcon: function hasLeadingIcon() {
                    return false;
                  },
                  isRTL: function isRTL() {
                    return false;
                  },
                  isTrailingActionNavigable: function isTrailingActionNavigable() {
                    return false;
                  },
                  notifyEditFinish: function notifyEditFinish() {
                    return undefined;
                  },
                  notifyEditStart: function notifyEditStart() {
                    return undefined;
                  },
                  notifyInteraction: function notifyInteraction() {
                    return undefined;
                  },
                  notifyNavigation: function notifyNavigation() {
                    return undefined;
                  },
                  notifyRemoval: function notifyRemoval() {
                    return undefined;
                  },
                  notifySelection: function notifySelection() {
                    return undefined;
                  },
                  notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  removeClassFromLeadingIcon: function removeClassFromLeadingIcon() {
                    return undefined;
                  },
                  removeTrailingActionFocus: function removeTrailingActionFocus() {
                    return undefined;
                  },
                  setPrimaryActionAttr: function setPrimaryActionAttr() {
                    return undefined;
                  },
                  setStyleProperty: function setStyleProperty() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCChipFoundation.prototype.isSelected = function () {
              return this.adapter.hasClass(constants_1.cssClasses.SELECTED);
            };
            MDCChipFoundation.prototype.isEditable = function () {
              return this.adapter.hasClass(constants_1.cssClasses.EDITABLE);
            };
            MDCChipFoundation.prototype.isEditing = function () {
              return this.adapter.hasClass(constants_1.cssClasses.EDITING);
            };
            MDCChipFoundation.prototype.setSelected = function (selected) {
              this.setSelected_(selected);
              this.notifySelection_(selected);
            };
            MDCChipFoundation.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
              this.setSelected_(selected);
              if (shouldNotifyClients) {
                this.notifyIgnoredSelection_(selected);
              }
            };
            MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {
              return this.shouldRemoveOnTrailingIconClick_;
            };
            MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {
              this.shouldRemoveOnTrailingIconClick_ = shouldRemove;
            };
            MDCChipFoundation.prototype.setShouldFocusPrimaryActionOnClick = function (shouldFocus) {
              this.shouldFocusPrimaryActionOnClick_ = shouldFocus;
            };
            MDCChipFoundation.prototype.getDimensions = function () {
              var _this = this;
              var getRootRect = function getRootRect() {
                return _this.adapter.getRootBoundingClientRect();
              };
              var getCheckmarkRect = function getCheckmarkRect() {
                return _this.adapter.getCheckmarkBoundingClientRect();
              };
              // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current
              // size of the checkmark.
              if (!this.adapter.hasLeadingIcon()) {
                var checkmarkRect = getCheckmarkRect();
                if (checkmarkRect) {
                  var rootRect = getRootRect();
                  // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.
                  // However, the checkbox is initially hidden by setting the width to 0.
                  // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)
                  // when adding it to the root client rect's width.
                  return {
                    bottom: rootRect.bottom,
                    height: rootRect.height,
                    left: rootRect.left,
                    right: rootRect.right,
                    top: rootRect.top,
                    width: rootRect.width + checkmarkRect.height
                  };
                }
              }
              return getRootRect();
            };
            /**
             * Begins the exit animation which leads to removal of the chip.
             */
            MDCChipFoundation.prototype.beginExit = function () {
              this.adapter.addClass(constants_1.cssClasses.CHIP_EXIT);
            };
            MDCChipFoundation.prototype.handleClick = function () {
              this.adapter.notifyInteraction();
              this.setPrimaryActionFocusable_(this.getFocusBehavior_());
            };
            MDCChipFoundation.prototype.handleDoubleClick = function () {
              if (this.isEditable()) {
                this.startEditing();
              }
            };
            /**
             * Handles a transition end event on the root element.
             */
            MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {
              var _this = this;
              // Handle transition end event on the chip when it is about to be removed.
              var shouldHandle = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.CHIP_EXIT);
              var widthIsAnimating = evt.propertyName === 'width';
              var opacityIsAnimating = evt.propertyName === 'opacity';
              if (shouldHandle && opacityIsAnimating) {
                // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5
                var chipWidth_1 = this.adapter.getComputedStyleValue('width');
                // On the next frame (once we get the computed width), explicitly set the chip's width
                // to its current pixel width, so we aren't transitioning out of 'auto'.
                requestAnimationFrame(function () {
                  _this.adapter.setStyleProperty('width', chipWidth_1);
                  // To mitigate jitter, start transitioning padding and margin before width.
                  _this.adapter.setStyleProperty('padding', '0');
                  _this.adapter.setStyleProperty('margin', '0');
                  // On the next frame (once width is explicitly set), transition width to 0.
                  requestAnimationFrame(function () {
                    _this.adapter.setStyleProperty('width', '0');
                  });
                });
                return;
              }
              if (shouldHandle && widthIsAnimating) {
                this.removeFocus();
                var removedAnnouncement = this.adapter.getAttribute(constants_1.strings.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
                this.adapter.notifyRemoval(removedAnnouncement);
              }
              // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.
              if (!opacityIsAnimating) {
                return;
              }
              var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.LEADING_ICON) && this.adapter.hasClass(constants_1.cssClasses.SELECTED);
              var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.CHECKMARK) && !this.adapter.hasClass(constants_1.cssClasses.SELECTED);
              if (shouldHideLeadingIcon) {
                this.adapter.addClassToLeadingIcon(constants_1.cssClasses.HIDDEN_LEADING_ICON);
                return;
              }
              if (shouldShowLeadingIcon) {
                this.adapter.removeClassFromLeadingIcon(constants_1.cssClasses.HIDDEN_LEADING_ICON);
                return;
              }
            };
            MDCChipFoundation.prototype.handleFocusIn = function (evt) {
              // Early exit if the event doesn't come from the primary action
              if (!this.eventFromPrimaryAction_(evt)) {
                return;
              }
              this.adapter.addClass(constants_1.cssClasses.PRIMARY_ACTION_FOCUSED);
            };
            MDCChipFoundation.prototype.handleFocusOut = function (evt) {
              // Early exit if the event doesn't come from the primary action
              if (!this.eventFromPrimaryAction_(evt)) {
                return;
              }
              if (this.isEditing()) {
                this.finishEditing();
              }
              this.adapter.removeClass(constants_1.cssClasses.PRIMARY_ACTION_FOCUSED);
            };
            /**
             * Handles an interaction event on the trailing icon element. This is used to
             * prevent the ripple from activating on interaction with the trailing icon.
             */
            MDCChipFoundation.prototype.handleTrailingActionInteraction = function () {
              this.adapter.notifyTrailingIconInteraction();
              this.removeChip_();
            };
            /**
             * Handles a keydown event from the root element.
             */
            MDCChipFoundation.prototype.handleKeydown = function (evt) {
              if (this.isEditing()) {
                if (this.shouldFinishEditing(evt)) {
                  evt.preventDefault();
                  this.finishEditing();
                }
                // When editing, the foundation should only handle key events that finish
                // the editing process.
                return;
              }
              if (this.isEditable()) {
                if (this.shouldStartEditing(evt)) {
                  evt.preventDefault();
                  this.startEditing();
                }
              }
              if (this.shouldNotifyInteraction_(evt)) {
                this.adapter.notifyInteraction();
                this.setPrimaryActionFocusable_(this.getFocusBehavior_());
                return;
              }
              if (this.isDeleteAction_(evt)) {
                evt.preventDefault();
                this.removeChip_();
                return;
              }
              // Early exit if the key is not usable
              if (!constants_1.navigationKeys.has(evt.key)) {
                return;
              }
              // Prevent default behavior for movement keys which could include scrolling
              evt.preventDefault();
              this.focusNextAction_(evt.key, constants_1.EventSource.PRIMARY);
            };
            MDCChipFoundation.prototype.handleTrailingActionNavigation = function (evt) {
              return this.focusNextAction_(evt.detail.key, constants_1.EventSource.TRAILING);
            };
            /**
             * Called by the chip set to remove focus from the chip actions.
             */
            MDCChipFoundation.prototype.removeFocus = function () {
              this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, '-1');
              this.adapter.removeTrailingActionFocus();
            };
            /**
             * Called by the chip set to focus the primary action.
             *
             */
            MDCChipFoundation.prototype.focusPrimaryAction = function () {
              this.setPrimaryActionFocusable_(FocusBehavior.SHOULD_FOCUS);
            };
            /**
             * Called by the chip set to focus the trailing action (if present), otherwise
             * gives focus to the trailing action.
             */
            MDCChipFoundation.prototype.focusTrailingAction = function () {
              var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
              if (trailingActionIsNavigable) {
                this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, '-1');
                this.adapter.focusTrailingAction();
                return;
              }
              this.focusPrimaryAction();
            };
            MDCChipFoundation.prototype.setPrimaryActionFocusable_ = function (focusBehavior) {
              this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, '0');
              if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
                this.adapter.focusPrimaryAction();
              }
              this.adapter.removeTrailingActionFocus();
            };
            MDCChipFoundation.prototype.getFocusBehavior_ = function () {
              if (this.shouldFocusPrimaryActionOnClick_) {
                return FocusBehavior.SHOULD_FOCUS;
              }
              return FocusBehavior.SHOULD_NOT_FOCUS;
            };
            MDCChipFoundation.prototype.focusNextAction_ = function (key, source) {
              var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
              var dir = this.getDirection_(key);
              // Early exit if the key should jump chips
              if (constants_1.jumpChipKeys.has(key) || !isTrailingActionNavigable) {
                return this.adapter.notifyNavigation(key, source);
              }
              if (source === constants_1.EventSource.PRIMARY && dir === constants_1.Direction.RIGHT) {
                return this.focusTrailingAction();
              }
              if (source === constants_1.EventSource.TRAILING && dir === constants_1.Direction.LEFT) {
                return this.focusPrimaryAction();
              }
              this.adapter.notifyNavigation(key, constants_1.EventSource.NONE);
            };
            MDCChipFoundation.prototype.getDirection_ = function (key) {
              var isRTL = this.adapter.isRTL();
              var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
              var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
              if (!isRTL && isLeftKey || isRTL && isRightKey) {
                return constants_1.Direction.LEFT;
              }
              return constants_1.Direction.RIGHT;
            };
            MDCChipFoundation.prototype.removeChip_ = function () {
              if (this.shouldRemoveOnTrailingIconClick_) {
                this.beginExit();
              }
            };
            MDCChipFoundation.prototype.shouldStartEditing = function (evt) {
              return this.eventFromPrimaryAction_(evt) && evt.key === constants_1.strings.ENTER_KEY;
            };
            MDCChipFoundation.prototype.shouldFinishEditing = function (evt) {
              return evt.key === constants_1.strings.ENTER_KEY;
            };
            MDCChipFoundation.prototype.shouldNotifyInteraction_ = function (evt) {
              return evt.key === constants_1.strings.ENTER_KEY || evt.key === constants_1.strings.SPACEBAR_KEY;
            };
            MDCChipFoundation.prototype.isDeleteAction_ = function (evt) {
              var isDeletable = this.adapter.hasClass(constants_1.cssClasses.DELETABLE);
              return isDeletable && (evt.key === constants_1.strings.BACKSPACE_KEY || evt.key === constants_1.strings.DELETE_KEY || evt.key === constants_1.strings.IE_DELETE_KEY);
            };
            MDCChipFoundation.prototype.setSelected_ = function (selected) {
              if (selected) {
                this.adapter.addClass(constants_1.cssClasses.SELECTED);
                this.adapter.setPrimaryActionAttr(constants_1.strings.ARIA_CHECKED, 'true');
              } else {
                this.adapter.removeClass(constants_1.cssClasses.SELECTED);
                this.adapter.setPrimaryActionAttr(constants_1.strings.ARIA_CHECKED, 'false');
              }
            };
            MDCChipFoundation.prototype.notifySelection_ = function (selected) {
              this.adapter.notifySelection(selected, false);
            };
            MDCChipFoundation.prototype.notifyIgnoredSelection_ = function (selected) {
              this.adapter.notifySelection(selected, true);
            };
            MDCChipFoundation.prototype.eventFromPrimaryAction_ = function (evt) {
              return this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.PRIMARY_ACTION);
            };
            MDCChipFoundation.prototype.startEditing = function () {
              this.adapter.addClass(constants_1.cssClasses.EDITING);
              this.adapter.notifyEditStart();
            };
            MDCChipFoundation.prototype.finishEditing = function () {
              this.adapter.removeClass(constants_1.cssClasses.EDITING);
              this.adapter.notifyEditFinish();
            };
            return MDCChipFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCChipFoundation = MDCChipFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCChipFoundation;

          /***/ }),

        /***/ "./packages/mdc-chips/chip/index.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-chips/chip/index.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-chips/chip/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-chips/chip/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/chip/constants.ts");
          exports.chipCssClasses = constants_1.cssClasses;
          exports.chipStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-chips/index.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-chips/index.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./trailingaction/index */ "./packages/mdc-chips/trailingaction/index.ts"));
          __export(__webpack_require__(/*! ./chip/index */ "./packages/mdc-chips/chip/index.ts"));
          __export(__webpack_require__(/*! ./chip-set/index */ "./packages/mdc-chips/chip-set/index.ts"));

          /***/ }),

        /***/ "./packages/mdc-chips/trailingaction/component.ts":
        /*!********************************************************!*\
  !*** ./packages/mdc-chips/trailingaction/component.ts ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/trailingaction/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-chips/trailingaction/foundation.ts");
          var MDCChipTrailingAction = /** @class */function (_super) {
            __extends(MDCChipTrailingAction, _super);
            function MDCChipTrailingAction() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(MDCChipTrailingAction.prototype, "ripple", {
              get: function get() {
                return this.ripple_;
              },
              enumerable: true,
              configurable: true
            });
            MDCChipTrailingAction.attachTo = function (root) {
              return new MDCChipTrailingAction(root);
            };
            MDCChipTrailingAction.prototype.initialize = function (rippleFactory) {
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el, foundation) {
                  return new component_2.MDCRipple(el, foundation);
                };
              }
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              var rippleAdapter = component_2.MDCRipple.createAdapter(this);
              this.ripple_ = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
            };
            MDCChipTrailingAction.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleClick_ = function (evt) {
                _this.foundation.handleClick(evt);
              };
              this.handleKeydown_ = function (evt) {
                _this.foundation.handleKeydown(evt);
              };
              this.listen('click', this.handleClick_);
              this.listen('keydown', this.handleKeydown_);
            };
            MDCChipTrailingAction.prototype.destroy = function () {
              this.ripple_.destroy();
              this.unlisten('click', this.handleClick_);
              this.unlisten('keydown', this.handleKeydown_);
              _super.prototype.destroy.call(this);
            };
            MDCChipTrailingAction.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                focus: function focus() {
                  // TODO(b/157231863): Migate MDCComponent#root to HTMLElement
                  _this.root.focus();
                },
                getAttribute: function getAttribute(attr) {
                  return _this.root.getAttribute(attr);
                },
                notifyInteraction: function notifyInteraction(trigger) {
                  return _this.emit(constants_1.strings.INTERACTION_EVENT, { trigger: trigger }, true /* shouldBubble */);
                },
                notifyNavigation: function notifyNavigation(key) {
                  _this.emit(constants_1.strings.NAVIGATION_EVENT, { key: key }, true /* shouldBubble */);
                },
                setAttribute: function setAttribute(attr, value) {
                  _this.root.setAttribute(attr, value);
                }
              };
              return new foundation_2.MDCChipTrailingActionFoundation(adapter);
            };
            MDCChipTrailingAction.prototype.isNavigable = function () {
              return this.foundation.isNavigable();
            };
            MDCChipTrailingAction.prototype.focus = function () {
              this.foundation.focus();
            };
            MDCChipTrailingAction.prototype.removeFocus = function () {
              this.foundation.removeFocus();
            };
            return MDCChipTrailingAction;
          }(component_1.MDCComponent);
          exports.MDCChipTrailingAction = MDCChipTrailingAction;

          /***/ }),

        /***/ "./packages/mdc-chips/trailingaction/constants.ts":
        /*!********************************************************!*\
  !*** ./packages/mdc-chips/trailingaction/constants.ts ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var InteractionTrigger;
          (function (InteractionTrigger) {
            InteractionTrigger[InteractionTrigger["UNSPECIFIED"] = 0] = "UNSPECIFIED";
            InteractionTrigger[InteractionTrigger["CLICK"] = 1] = "CLICK";
            InteractionTrigger[InteractionTrigger["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
            InteractionTrigger[InteractionTrigger["DELETE_KEY"] = 3] = "DELETE_KEY";
            InteractionTrigger[InteractionTrigger["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
            InteractionTrigger[InteractionTrigger["ENTER_KEY"] = 5] = "ENTER_KEY";
          })(InteractionTrigger = exports.InteractionTrigger || (exports.InteractionTrigger = {}));
          exports.strings = {
            ARIA_HIDDEN: 'aria-hidden',
            INTERACTION_EVENT: 'MDCChipTrailingAction:interaction',
            NAVIGATION_EVENT: 'MDCChipTrailingAction:navigation',
            TAB_INDEX: 'tabindex'
          };

          /***/ }),

        /***/ "./packages/mdc-chips/trailingaction/foundation.ts":
        /*!*********************************************************!*\
  !*** ./packages/mdc-chips/trailingaction/foundation.ts ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var keyboard_1 = __webpack_require__(/*! @material/dom/keyboard */ "./packages/mdc-dom/keyboard.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/trailingaction/constants.ts");
          var MDCChipTrailingActionFoundation = /** @class */function (_super) {
            __extends(MDCChipTrailingActionFoundation, _super);
            function MDCChipTrailingActionFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCChipTrailingActionFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCChipTrailingActionFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  focus: function focus() {
                    return undefined;
                  },
                  getAttribute: function getAttribute() {
                    return null;
                  },
                  setAttribute: function setAttribute() {
                    return undefined;
                  },
                  notifyInteraction: function notifyInteraction() {
                    return undefined;
                  },
                  notifyNavigation: function notifyNavigation() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCChipTrailingActionFoundation.prototype.handleClick = function (evt) {
              evt.stopPropagation();
              this.adapter.notifyInteraction(constants_1.InteractionTrigger.CLICK);
            };
            MDCChipTrailingActionFoundation.prototype.handleKeydown = function (evt) {
              evt.stopPropagation();
              var key = keyboard_1.normalizeKey(evt);
              if (this.shouldNotifyInteractionFromKey_(key)) {
                var trigger = this.getTriggerFromKey_(key);
                this.adapter.notifyInteraction(trigger);
                return;
              }
              if (keyboard_1.isNavigationEvent(evt)) {
                this.adapter.notifyNavigation(key);
                return;
              }
            };
            MDCChipTrailingActionFoundation.prototype.removeFocus = function () {
              this.adapter.setAttribute(constants_1.strings.TAB_INDEX, '-1');
            };
            MDCChipTrailingActionFoundation.prototype.focus = function () {
              this.adapter.setAttribute(constants_1.strings.TAB_INDEX, '0');
              this.adapter.focus();
            };
            MDCChipTrailingActionFoundation.prototype.isNavigable = function () {
              return this.adapter.getAttribute(constants_1.strings.ARIA_HIDDEN) !== 'true';
            };
            MDCChipTrailingActionFoundation.prototype.shouldNotifyInteractionFromKey_ = function (key) {
              var isFromActionKey = key === keyboard_1.KEY.ENTER || key === keyboard_1.KEY.SPACEBAR;
              var isFromDeleteKey = key === keyboard_1.KEY.BACKSPACE || key === keyboard_1.KEY.DELETE;
              return isFromActionKey || isFromDeleteKey;
            };
            MDCChipTrailingActionFoundation.prototype.getTriggerFromKey_ = function (key) {
              if (key === keyboard_1.KEY.SPACEBAR) {
                return constants_1.InteractionTrigger.SPACEBAR_KEY;
              }
              if (key === keyboard_1.KEY.ENTER) {
                return constants_1.InteractionTrigger.ENTER_KEY;
              }
              if (key === keyboard_1.KEY.DELETE) {
                return constants_1.InteractionTrigger.DELETE_KEY;
              }
              if (key === keyboard_1.KEY.BACKSPACE) {
                return constants_1.InteractionTrigger.BACKSPACE_KEY;
              }
              // Default case, should never be returned
              return constants_1.InteractionTrigger.UNSPECIFIED;
            };
            return MDCChipTrailingActionFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCChipTrailingActionFoundation = MDCChipTrailingActionFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCChipTrailingActionFoundation;

          /***/ }),

        /***/ "./packages/mdc-chips/trailingaction/index.ts":
        /*!****************************************************!*\
  !*** ./packages/mdc-chips/trailingaction/index.ts ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-chips/trailingaction/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-chips/trailingaction/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-chips/trailingaction/constants.ts");
          exports.trailingActionStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-circular-progress/component.ts":
        /*!*****************************************************!*\
  !*** ./packages/mdc-circular-progress/component.ts ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-circular-progress/foundation.ts");
          var MDCCircularProgress = /** @class */function (_super) {
            __extends(MDCCircularProgress, _super);
            function MDCCircularProgress() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCCircularProgress.prototype.initialize = function () {
              this.determinateCircle_ = this.root.querySelector(foundation_1.MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);
            };
            MDCCircularProgress.attachTo = function (root) {
              return new MDCCircularProgress(root);
            };
            Object.defineProperty(MDCCircularProgress.prototype, "determinate", {
              /**
               * Sets whether the progress indicator is in determinate mode.
               * @param isDeterminate Whether the indicator should be determinate.
               */
              set: function set(value) {
                this.foundation.setDeterminate(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCircularProgress.prototype, "progress", {
              /**
               * Sets the current progress value. In indeterminate mode, this has no
               * visual effect but will be reflected if the indicator is switched to
               * determinate mode.
               * @param value The current progress value, which must be between 0 and 1.
               */
              set: function set(value) {
                this.foundation.setProgress(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCircularProgress.prototype, "isClosed", {
              /**
               * Whether the progress indicator is hidden.
               */
              get: function get() {
                return this.foundation.isClosed();
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Shows the progress indicator.
             */
            MDCCircularProgress.prototype.open = function () {
              this.foundation.open();
            };
            /**
             * Hides the progress indicator.
             */
            MDCCircularProgress.prototype.close = function () {
              this.foundation.close();
            };
            MDCCircularProgress.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                getDeterminateCircleAttribute: function getDeterminateCircleAttribute(attributeName) {
                  return _this.determinateCircle_.getAttribute(attributeName);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                removeAttribute: function removeAttribute(attributeName) {
                  return _this.root.removeAttribute(attributeName);
                },
                setAttribute: function setAttribute(attributeName, value) {
                  return _this.root.setAttribute(attributeName, value);
                },
                setDeterminateCircleAttribute: function setDeterminateCircleAttribute(attributeName, value) {
                  return _this.determinateCircle_.setAttribute(attributeName, value);
                }
              };
              return new foundation_1.MDCCircularProgressFoundation(adapter);
            };
            return MDCCircularProgress;
          }(component_1.MDCComponent);
          exports.MDCCircularProgress = MDCCircularProgress;

          /***/ }),

        /***/ "./packages/mdc-circular-progress/constants.ts":
        /*!*****************************************************!*\
  !*** ./packages/mdc-circular-progress/constants.ts ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * CSS class names used in component.
           */
          exports.cssClasses = {
            INDETERMINATE_CLASS: 'mdc-circular-progress--indeterminate',
            CLOSED_CLASS: 'mdc-circular-progress--closed'
          };
          /**
           * Attributes and selectors used in component.
           */
          exports.strings = {
            DETERMINATE_CIRCLE_SELECTOR: '.mdc-circular-progress__determinate-circle',
            ARIA_VALUENOW: 'aria-valuenow',
            RADIUS: 'r',
            STROKE_DASHOFFSET: 'stroke-dashoffset'
          };

          /***/ }),

        /***/ "./packages/mdc-circular-progress/foundation.ts":
        /*!******************************************************!*\
  !*** ./packages/mdc-circular-progress/foundation.ts ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-circular-progress/constants.ts");
          var MDCCircularProgressFoundation = /** @class */function (_super) {
            __extends(MDCCircularProgressFoundation, _super);
            function MDCCircularProgressFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCCircularProgressFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCircularProgressFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCCircularProgressFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  getDeterminateCircleAttribute: function getDeterminateCircleAttribute() {
                    return null;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  removeAttribute: function removeAttribute() {
                    return undefined;
                  },
                  setAttribute: function setAttribute() {
                    return undefined;
                  },
                  setDeterminateCircleAttribute: function setDeterminateCircleAttribute() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCCircularProgressFoundation.prototype.init = function () {
              this.isClosed_ = this.adapter.hasClass(constants_1.cssClasses.CLOSED_CLASS);
              this.isDeterminate_ = !this.adapter.hasClass(constants_1.cssClasses.INDETERMINATE_CLASS);
              this.progress_ = 0;
              if (this.isDeterminate_) {
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress_.toString());
              }
              this.radius_ = Number(this.adapter.getDeterminateCircleAttribute(constants_1.strings.RADIUS));
            };
            MDCCircularProgressFoundation.prototype.isDeterminate = function () {
              return this.isDeterminate_;
            };
            MDCCircularProgressFoundation.prototype.getProgress = function () {
              return this.progress_;
            };
            /**
             * @return Returns whether the progress indicator is hidden.
             */
            MDCCircularProgressFoundation.prototype.isClosed = function () {
              return this.isClosed_;
            };
            /**
             * Sets whether the progress indicator is in determinate mode.
             * @param isDeterminate Whether the indicator should be determinate.
             */
            MDCCircularProgressFoundation.prototype.setDeterminate = function (isDeterminate) {
              this.isDeterminate_ = isDeterminate;
              if (this.isDeterminate_) {
                this.adapter.removeClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                this.setProgress(this.progress_);
              } else {
                this.adapter.addClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                this.adapter.removeAttribute(constants_1.strings.ARIA_VALUENOW);
              }
            };
            /**
             * Sets the current progress value. In indeterminate mode, this has no
             * visual effect but will be reflected if the indicator is switched to
             * determinate mode.
             * @param value The current progress value, which must be between 0 and 1.
             */
            MDCCircularProgressFoundation.prototype.setProgress = function (value) {
              this.progress_ = value;
              if (this.isDeterminate_) {
                var unfilledArcLength = (1 - this.progress_) * (2 * Math.PI * this.radius_);
                this.adapter.setDeterminateCircleAttribute(constants_1.strings.STROKE_DASHOFFSET, "" + unfilledArcLength);
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress_.toString());
              }
            };
            /**
             * Shows the progress indicator.
             */
            MDCCircularProgressFoundation.prototype.open = function () {
              this.isClosed_ = false;
              this.adapter.removeClass(constants_1.cssClasses.CLOSED_CLASS);
            };
            /**
             * Hides the progress indicator
             */
            MDCCircularProgressFoundation.prototype.close = function () {
              this.isClosed_ = true;
              this.adapter.addClass(constants_1.cssClasses.CLOSED_CLASS);
            };
            return MDCCircularProgressFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCCircularProgressFoundation = MDCCircularProgressFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCCircularProgressFoundation;

          /***/ }),

        /***/ "./packages/mdc-circular-progress/index.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-circular-progress/index.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-circular-progress/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-circular-progress/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-circular-progress/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-data-table/component.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-data-table/component.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/checkbox/component */ "./packages/mdc-checkbox/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_3 = __webpack_require__(/*! @material/linear-progress/component */ "./packages/mdc-linear-progress/component.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-data-table/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-data-table/foundation.ts");
          /**
           * Implementation of `MDCDataTableFoundation`
           */
          var MDCDataTable = /** @class */function (_super) {
            __extends(MDCDataTable, _super);
            function MDCDataTable() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCDataTable.attachTo = function (root) {
              return new MDCDataTable(root);
            };
            MDCDataTable.prototype.initialize = function (checkboxFactory) {
              if (checkboxFactory === void 0) {
                checkboxFactory = function checkboxFactory(el) {
                  return new component_2.MDCCheckbox(el);
                };
              }
              this.checkboxFactory = checkboxFactory;
            };
            MDCDataTable.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.headerRow = this.root.querySelector("." + constants_1.cssClasses.HEADER_ROW);
              this.handleHeaderRowCheckboxChange = function () {
                _this.foundation.handleHeaderRowCheckboxChange();
              };
              this.headerRow.addEventListener('change', this.handleHeaderRowCheckboxChange);
              this.headerRowClickListener = function (event) {
                _this.handleHeaderRowClick(event);
              };
              this.headerRow.addEventListener('click', this.headerRowClickListener);
              this.content = this.root.querySelector("." + constants_1.cssClasses.CONTENT);
              this.handleRowCheckboxChange = function (event) {
                _this.foundation.handleRowCheckboxChange(event);
              };
              this.content.addEventListener('change', this.handleRowCheckboxChange);
              this.layout();
            };
            /**
             * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.
             */
            MDCDataTable.prototype.layout = function () {
              this.foundation.layout();
            };
            /**
             * @return Returns array of header row cell elements.
             */
            MDCDataTable.prototype.getHeaderCells = function () {
              return [].slice.call(this.root.querySelectorAll(constants_1.selectors.HEADER_CELL));
            };
            /**
             * @return Returns array of row elements.
             */
            MDCDataTable.prototype.getRows = function () {
              return this.foundation.getRows();
            };
            /**
             * @return Returns array of selected row ids.
             */
            MDCDataTable.prototype.getSelectedRowIds = function () {
              return this.foundation.getSelectedRowIds();
            };
            /**
             * Sets selected row ids. Overwrites previously selected rows.
             * @param rowIds Array of row ids that needs to be selected.
             */
            MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {
              this.foundation.setSelectedRowIds(rowIds);
            };
            /**
             * Shows progress indicator when data table is in loading state.
             */
            MDCDataTable.prototype.showProgress = function () {
              this.getLinearProgress().open();
              this.foundation.showProgress();
            };
            /**
             * Hides progress indicator after data table is finished loading.
             */
            MDCDataTable.prototype.hideProgress = function () {
              this.foundation.hideProgress();
              this.getLinearProgress().close();
            };
            MDCDataTable.prototype.destroy = function () {
              var e_1, _a;
              if (this.handleHeaderRowCheckboxChange) {
                this.headerRow.removeEventListener('change', this.handleHeaderRowCheckboxChange);
              }
              if (this.headerRowClickListener) {
                this.headerRow.removeEventListener('click', this.headerRowClickListener);
              }
              if (this.handleRowCheckboxChange) {
                this.content.removeEventListener('change', this.handleRowCheckboxChange);
              }
              if (this.headerRowCheckbox) {
                this.headerRowCheckbox.destroy();
              }
              if (this.rowCheckboxList) {
                try {
                  for (var _b = __values(this.rowCheckboxList), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var checkbox = _c.value;
                    checkbox.destroy();
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                }
              }
            };
            MDCDataTable.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                getHeaderCellElements: function getHeaderCellElements() {
                  return _this.getHeaderCells();
                },
                getHeaderCellCount: function getHeaderCellCount() {
                  return _this.getHeaderCells().length;
                },
                getAttributeByHeaderCellIndex: function getAttributeByHeaderCellIndex(index, attribute) {
                  return _this.getHeaderCells()[index].getAttribute(attribute);
                },
                setAttributeByHeaderCellIndex: function setAttributeByHeaderCellIndex(index, attribute, value) {
                  _this.getHeaderCells()[index].setAttribute(attribute, value);
                },
                setClassNameByHeaderCellIndex: function setClassNameByHeaderCellIndex(index, className) {
                  _this.getHeaderCells()[index].classList.add(className);
                },
                removeClassNameByHeaderCellIndex: function removeClassNameByHeaderCellIndex(index, className) {
                  _this.getHeaderCells()[index].classList.remove(className);
                },
                notifySortAction: function notifySortAction(data) {
                  _this.emit(constants_1.events.SORTED, data, /** shouldBubble */true);
                },
                getTableContainerHeight: function getTableContainerHeight() {
                  var tableContainer = _this.root.querySelector("." + constants_1.cssClasses.TABLE_CONTAINER);
                  if (!tableContainer) {
                    throw new Error('MDCDataTable: Table container element not found.');
                  }
                  return tableContainer.getBoundingClientRect().height;
                },
                getTableHeaderHeight: function getTableHeaderHeight() {
                  var tableHeader = _this.root.querySelector(constants_1.selectors.HEADER_ROW);
                  if (!tableHeader) {
                    throw new Error('MDCDataTable: Table header element not found.');
                  }
                  return tableHeader.getBoundingClientRect().height;
                },
                setProgressIndicatorStyles: function setProgressIndicatorStyles(styles) {
                  var progressIndicator = _this.root.querySelector(constants_1.selectors.PROGRESS_INDICATOR);
                  if (!progressIndicator) {
                    throw new Error('MDCDataTable: Progress indicator element not found.');
                  }
                  progressIndicator.style.setProperty('height', styles.height);
                  progressIndicator.style.setProperty('top', styles.top);
                },
                addClassAtRowIndex: function addClassAtRowIndex(rowIndex, className) {
                  _this.getRows()[rowIndex].classList.add(className);
                },
                getRowCount: function getRowCount() {
                  return _this.getRows().length;
                },
                getRowElements: function getRowElements() {
                  return [].slice.call(_this.root.querySelectorAll(constants_1.selectors.ROW));
                },
                getRowIdAtIndex: function getRowIdAtIndex(rowIndex) {
                  return _this.getRows()[rowIndex].getAttribute(constants_1.dataAttributes.ROW_ID);
                },
                getRowIndexByChildElement: function getRowIndexByChildElement(el) {
                  return _this.getRows().indexOf(ponyfill_1.closest(el, constants_1.selectors.ROW));
                },
                getSelectedRowCount: function getSelectedRowCount() {
                  return _this.root.querySelectorAll(constants_1.selectors.ROW_SELECTED).length;
                },
                isCheckboxAtRowIndexChecked: function isCheckboxAtRowIndexChecked(rowIndex) {
                  return _this.rowCheckboxList[rowIndex].checked;
                },
                isHeaderRowCheckboxChecked: function isHeaderRowCheckboxChecked() {
                  return _this.headerRowCheckbox.checked;
                },
                isRowsSelectable: function isRowsSelectable() {
                  return !!_this.root.querySelector(constants_1.selectors.ROW_CHECKBOX) || !!_this.root.querySelector(constants_1.selectors.HEADER_ROW_CHECKBOX);
                },
                notifyRowSelectionChanged: function notifyRowSelectionChanged(data) {
                  _this.emit(constants_1.events.ROW_SELECTION_CHANGED, {
                        row: _this.getRowByIndex(data.rowIndex),
                        rowId: _this.getRowIdByIndex(data.rowIndex),
                        rowIndex: data.rowIndex,
                        selected: data.selected
                      },
                      /** shouldBubble */true);
                },
                notifySelectedAll: function notifySelectedAll() {
                  _this.emit(constants_1.events.SELECTED_ALL, {}, /** shouldBubble */true);
                },
                notifyUnselectedAll: function notifyUnselectedAll() {
                  _this.emit(constants_1.events.UNSELECTED_ALL, {}, /** shouldBubble */true);
                },
                registerHeaderRowCheckbox: function registerHeaderRowCheckbox() {
                  if (_this.headerRowCheckbox) {
                    _this.headerRowCheckbox.destroy();
                  }
                  var checkboxEl = _this.root.querySelector(constants_1.selectors.HEADER_ROW_CHECKBOX);
                  _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);
                },
                registerRowCheckboxes: function registerRowCheckboxes() {
                  if (_this.rowCheckboxList) {
                    _this.rowCheckboxList.forEach(function (checkbox) {
                      checkbox.destroy();
                    });
                  }
                  _this.rowCheckboxList = [];
                  _this.getRows().forEach(function (rowEl) {
                    var checkbox = _this.checkboxFactory(rowEl.querySelector(constants_1.selectors.ROW_CHECKBOX));
                    _this.rowCheckboxList.push(checkbox);
                  });
                },
                removeClassAtRowIndex: function removeClassAtRowIndex(rowIndex, className) {
                  _this.getRows()[rowIndex].classList.remove(className);
                },
                setAttributeAtRowIndex: function setAttributeAtRowIndex(rowIndex, attr, value) {
                  _this.getRows()[rowIndex].setAttribute(attr, value);
                },
                setHeaderRowCheckboxChecked: function setHeaderRowCheckboxChecked(checked) {
                  _this.headerRowCheckbox.checked = checked;
                },
                setHeaderRowCheckboxIndeterminate: function setHeaderRowCheckboxIndeterminate(indeterminate) {
                  _this.headerRowCheckbox.indeterminate = indeterminate;
                },
                setRowCheckboxCheckedAtIndex: function setRowCheckboxCheckedAtIndex(rowIndex, checked) {
                  _this.rowCheckboxList[rowIndex].checked = checked;
                },
                setSortStatusLabelByHeaderCellIndex: function setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue) {
                  var headerCell = _this.getHeaderCells()[columnIndex];
                  var sortStatusLabel = headerCell.querySelector(constants_1.selectors.SORT_STATUS_LABEL);
                  if (!sortStatusLabel) return;
                  sortStatusLabel.textContent = _this.getSortStatusMessageBySortValue(sortValue);
                }
              };
              return new foundation_1.MDCDataTableFoundation(adapter);
            };
            MDCDataTable.prototype.getRowByIndex = function (index) {
              return this.getRows()[index];
            };
            MDCDataTable.prototype.getRowIdByIndex = function (index) {
              return this.getRowByIndex(index).getAttribute(constants_1.dataAttributes.ROW_ID);
            };
            MDCDataTable.prototype.handleHeaderRowClick = function (event) {
              var headerCell = ponyfill_1.closest(event.target, constants_1.selectors.HEADER_CELL_WITH_SORT);
              if (!headerCell) {
                return;
              }
              var columnId = headerCell.getAttribute(constants_1.dataAttributes.COLUMN_ID);
              var columnIndex = this.getHeaderCells().indexOf(headerCell);
              if (columnIndex === -1) {
                return;
              }
              this.foundation.handleSortAction({ columnId: columnId, columnIndex: columnIndex, headerCell: headerCell });
            };
            MDCDataTable.prototype.getSortStatusMessageBySortValue = function (sortValue) {
              switch (sortValue) {
                case constants_1.SortValue.ASCENDING:
                  return constants_1.messages.SORTED_IN_ASCENDING;
                case constants_1.SortValue.DESCENDING:
                  return constants_1.messages.SORTED_IN_DESCENDING;
                default:
                  return '';
              }
            };
            MDCDataTable.prototype.getLinearProgressElement = function () {
              var el = this.root.querySelector("." + constants_1.cssClasses.LINEAR_PROGRESS);
              if (!el) {
                throw new Error('MDCDataTable: linear progress element is not found.');
              }
              return el;
            };
            MDCDataTable.prototype.getLinearProgress = function () {
              if (!this.linearProgress) {
                var el = this.getLinearProgressElement();
                this.linearProgress = new component_3.MDCLinearProgress(el);
              }
              return this.linearProgress;
            };
            return MDCDataTable;
          }(component_1.MDCComponent);
          exports.MDCDataTable = MDCDataTable;

          /***/ }),

        /***/ "./packages/mdc-data-table/constants.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-data-table/constants.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * CSS class names used in component.
           */
          exports.cssClasses = {
            CELL: 'mdc-data-table__cell',
            CELL_NUMERIC: 'mdc-data-table__cell--numeric',
            CONTENT: 'mdc-data-table__content',
            HEADER_CELL: 'mdc-data-table__header-cell',
            HEADER_CELL_LABEL: 'mdc-data-table__header-cell-label',
            HEADER_CELL_SORTED: 'mdc-data-table__header-cell--sorted',
            HEADER_CELL_SORTED_DESCENDING: 'mdc-data-table__header-cell--sorted-descending',
            HEADER_CELL_WITH_SORT: 'mdc-data-table__header-cell--with-sort',
            HEADER_CELL_WRAPPER: 'mdc-data-table__header-cell-wrapper',
            HEADER_ROW: 'mdc-data-table__header-row',
            HEADER_ROW_CHECKBOX: 'mdc-data-table__header-row-checkbox',
            IN_PROGRESS: 'mdc-data-table--in-progress',
            LINEAR_PROGRESS: 'mdc-data-table__linear-progress',
            PAGINATION_ROWS_PER_PAGE_LABEL: 'mdc-data-table__pagination-rows-per-page-label',
            PAGINATION_ROWS_PER_PAGE_SELECT: 'mdc-data-table__pagination-rows-per-page-select',
            PROGRESS_INDICATOR: 'mdc-data-table__progress-indicator',
            ROOT: 'mdc-data-table',
            ROW: 'mdc-data-table__row',
            ROW_CHECKBOX: 'mdc-data-table__row-checkbox',
            ROW_SELECTED: 'mdc-data-table__row--selected',
            SORT_ICON_BUTTON: 'mdc-data-table__sort-icon-button',
            SORT_STATUS_LABEL: 'mdc-data-table__sort-status-label',
            TABLE_CONTAINER: 'mdc-data-table__table-container'
          };
          /**
           * DOM attributes used in component.
           */
          exports.attributes = {
            ARIA_SELECTED: 'aria-selected',
            ARIA_SORT: 'aria-sort'
          };
          /**
           * List of data attributes used in component.
           */
          exports.dataAttributes = {
            COLUMN_ID: 'data-column-id',
            ROW_ID: 'data-row-id'
          };
          /**
           * CSS selectors used in component.
           */
          exports.selectors = {
            CONTENT: "." + exports.cssClasses.CONTENT,
            HEADER_CELL: "." + exports.cssClasses.HEADER_CELL,
            HEADER_CELL_WITH_SORT: "." + exports.cssClasses.HEADER_CELL_WITH_SORT,
            HEADER_ROW: "." + exports.cssClasses.HEADER_ROW,
            HEADER_ROW_CHECKBOX: "." + exports.cssClasses.HEADER_ROW_CHECKBOX,
            PROGRESS_INDICATOR: "." + exports.cssClasses.PROGRESS_INDICATOR,
            ROW: "." + exports.cssClasses.ROW,
            ROW_CHECKBOX: "." + exports.cssClasses.ROW_CHECKBOX,
            ROW_SELECTED: "." + exports.cssClasses.ROW_SELECTED,
            SORT_ICON_BUTTON: "." + exports.cssClasses.SORT_ICON_BUTTON,
            SORT_STATUS_LABEL: "." + exports.cssClasses.SORT_STATUS_LABEL
          };
          /**
           * Messages used in component.
           */
          exports.messages = {
            SORTED_IN_DESCENDING: 'Sorted in descending order',
            SORTED_IN_ASCENDING: 'Sorted in ascending order'
          };
          /**
           * Attributes and selectors used in component.
           * @deprecated Use `attributes`, `dataAttributes` and `selectors` instead.
           */
          exports.strings = {
            ARIA_SELECTED: exports.attributes.ARIA_SELECTED,
            ARIA_SORT: exports.attributes.ARIA_SORT,
            DATA_ROW_ID_ATTR: exports.dataAttributes.ROW_ID,
            HEADER_ROW_CHECKBOX_SELECTOR: exports.selectors.HEADER_ROW_CHECKBOX,
            ROW_CHECKBOX_SELECTOR: exports.selectors.ROW_CHECKBOX,
            ROW_SELECTED_SELECTOR: exports.selectors.ROW_SELECTED,
            ROW_SELECTOR: exports.selectors.ROW
          };
          /**
           * Sort values defined by ARIA.
           * See https://www.w3.org/WAI/PF/aria/states_and_properties#aria-sort
           */
          var SortValue;
          (function (SortValue) {
            // Items are sorted in ascending order by this column.
            SortValue["ASCENDING"] = "ascending";
            // Items are sorted in descending order by this column.
            SortValue["DESCENDING"] = "descending";
            // There is no defined sort applied to the column.
            SortValue["NONE"] = "none";
            // A sort algorithm other than ascending or descending has been applied.
            SortValue["OTHER"] = "other";
          })(SortValue = exports.SortValue || (exports.SortValue = {}));
          /**
           * Event names used in component.
           */
          exports.events = {
            ROW_SELECTION_CHANGED: 'MDCDataTable:rowSelectionChanged',
            SELECTED_ALL: 'MDCDataTable:selectedAll',
            UNSELECTED_ALL: 'MDCDataTable:unselectedAll',
            SORTED: 'MDCDataTable:sorted'
          };

          /***/ }),

        /***/ "./packages/mdc-data-table/foundation.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-data-table/foundation.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }
              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }
              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }
              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };
          var __generator = this && this.__generator || function (thisArg, body) {
            var _ = { label: 0, sent: function sent() {
                    if (t[0] & 1) throw t[1];return t[1];
                  }, trys: [], ops: [] },
                f,
                y,
                t,
                g;
            return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;
            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }
            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");
              while (_) {
                try {
                  if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                  if (y = 0, t) op = [op[0] & 2, t.value];
                  switch (op[0]) {
                    case 0:case 1:
                      t = op;break;
                    case 4:
                      _.label++;return { value: op[1], done: false };
                    case 5:
                      _.label++;y = op[1];op = [0];continue;
                    case 7:
                      op = _.ops.pop();_.trys.pop();continue;
                    default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;continue;
                      }
                      if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];break;
                      }
                      if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];t = op;break;
                      }
                      if (t && _.label < t[2]) {
                        _.label = t[2];_.ops.push(op);break;
                      }
                      if (t[2]) _.ops.pop();
                      _.trys.pop();continue;
                  }
                  op = body.call(thisArg, _);
                } catch (e) {
                  op = [6, e];y = 0;
                } finally {
                  f = t = 0;
                }
              }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
            }
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-data-table/constants.ts");
          /**
           * The Foundation of data table component containing pure business logic, any
           * logic requiring DOM manipulation are delegated to adapter methods.
           */
          var MDCDataTableFoundation = /** @class */function (_super) {
            __extends(MDCDataTableFoundation, _super);
            function MDCDataTableFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCDataTableFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  addClassAtRowIndex: function addClassAtRowIndex() {
                    return undefined;
                  },
                  getAttributeByHeaderCellIndex: function getAttributeByHeaderCellIndex() {
                    return '';
                  },
                  getHeaderCellCount: function getHeaderCellCount() {
                    return 0;
                  },
                  getHeaderCellElements: function getHeaderCellElements() {
                    return [];
                  },
                  getRowCount: function getRowCount() {
                    return 0;
                  },
                  getRowElements: function getRowElements() {
                    return [];
                  },
                  getRowIdAtIndex: function getRowIdAtIndex() {
                    return '';
                  },
                  getRowIndexByChildElement: function getRowIndexByChildElement() {
                    return 0;
                  },
                  getSelectedRowCount: function getSelectedRowCount() {
                    return 0;
                  },
                  getTableContainerHeight: function getTableContainerHeight() {
                    return 0;
                  },
                  getTableHeaderHeight: function getTableHeaderHeight() {
                    return 0;
                  },
                  isCheckboxAtRowIndexChecked: function isCheckboxAtRowIndexChecked() {
                    return false;
                  },
                  isHeaderRowCheckboxChecked: function isHeaderRowCheckboxChecked() {
                    return false;
                  },
                  isRowsSelectable: function isRowsSelectable() {
                    return false;
                  },
                  notifyRowSelectionChanged: function notifyRowSelectionChanged() {
                    return undefined;
                  },
                  notifySelectedAll: function notifySelectedAll() {
                    return undefined;
                  },
                  notifySortAction: function notifySortAction() {
                    return undefined;
                  },
                  notifyUnselectedAll: function notifyUnselectedAll() {
                    return undefined;
                  },
                  registerHeaderRowCheckbox: function registerHeaderRowCheckbox() {
                    return undefined;
                  },
                  registerRowCheckboxes: function registerRowCheckboxes() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  removeClassAtRowIndex: function removeClassAtRowIndex() {
                    return undefined;
                  },
                  removeClassNameByHeaderCellIndex: function removeClassNameByHeaderCellIndex() {
                    return undefined;
                  },
                  setAttributeAtRowIndex: function setAttributeAtRowIndex() {
                    return undefined;
                  },
                  setAttributeByHeaderCellIndex: function setAttributeByHeaderCellIndex() {
                    return undefined;
                  },
                  setClassNameByHeaderCellIndex: function setClassNameByHeaderCellIndex() {
                    return undefined;
                  },
                  setHeaderRowCheckboxChecked: function setHeaderRowCheckboxChecked() {
                    return undefined;
                  },
                  setHeaderRowCheckboxIndeterminate: function setHeaderRowCheckboxIndeterminate() {
                    return undefined;
                  },
                  setProgressIndicatorStyles: function setProgressIndicatorStyles() {
                    return undefined;
                  },
                  setRowCheckboxCheckedAtIndex: function setRowCheckboxCheckedAtIndex() {
                    return undefined;
                  },
                  setSortStatusLabelByHeaderCellIndex: function setSortStatusLabelByHeaderCellIndex() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.
             * Use this if registering checkbox is synchronous.
             */
            MDCDataTableFoundation.prototype.layout = function () {
              if (this.adapter.isRowsSelectable()) {
                this.adapter.registerHeaderRowCheckbox();
                this.adapter.registerRowCheckboxes();
                this.setHeaderRowCheckboxState();
              }
            };
            /**
             * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.
             * Use this if registering checkbox is asynchronous.
             */
            MDCDataTableFoundation.prototype.layoutAsync = function () {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      if (!this.adapter.isRowsSelectable()) return [3 /*break*/, 3];
                      return [4 /*yield*/, this.adapter.registerHeaderRowCheckbox()];
                    case 1:
                      _a.sent();
                      return [4 /*yield*/, this.adapter.registerRowCheckboxes()];
                    case 2:
                      _a.sent();
                      this.setHeaderRowCheckboxState();
                      _a.label = 3;
                    case 3:
                      return [2 /*return*/];
                  }
                });
              });
            };
            /**
             * @return Returns array of row elements.
             */
            MDCDataTableFoundation.prototype.getRows = function () {
              return this.adapter.getRowElements();
            };
            /**
             * @return Array of header cell elements.
             */
            MDCDataTableFoundation.prototype.getHeaderCells = function () {
              return this.adapter.getHeaderCellElements();
            };
            /**
             * Sets selected row ids. Overwrites previously selected rows.
             * @param rowIds Array of row ids that needs to be selected.
             */
            MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {
              for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                var rowId = this.adapter.getRowIdAtIndex(rowIndex);
                var isSelected = false;
                if (rowId && rowIds.indexOf(rowId) >= 0) {
                  isSelected = true;
                }
                this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
                this.selectRowAtIndex(rowIndex, isSelected);
              }
              this.setHeaderRowCheckboxState();
            };
            /**
             * @return Returns array of all row ids.
             */
            MDCDataTableFoundation.prototype.getRowIds = function () {
              var rowIds = [];
              for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
              }
              return rowIds;
            };
            /**
             * @return Returns array of selected row ids.
             */
            MDCDataTableFoundation.prototype.getSelectedRowIds = function () {
              var selectedRowIds = [];
              for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
                  selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
                }
              }
              return selectedRowIds;
            };
            /**
             * Handles header row checkbox change event.
             */
            MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {
              var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
              for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
                this.selectRowAtIndex(rowIndex, isHeaderChecked);
              }
              if (isHeaderChecked) {
                this.adapter.notifySelectedAll();
              } else {
                this.adapter.notifyUnselectedAll();
              }
            };
            /**
             * Handles change event originated from row checkboxes.
             */
            MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {
              var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
              if (rowIndex === -1) {
                return;
              }
              var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
              this.selectRowAtIndex(rowIndex, selected);
              this.setHeaderRowCheckboxState();
              var rowId = this.adapter.getRowIdAtIndex(rowIndex);
              this.adapter.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });
            };
            /**
             * Handles sort action on sortable header cell.
             */
            MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {
              var columnId = eventData.columnId,
                  columnIndex = eventData.columnIndex,
                  headerCell = eventData.headerCell;
              // Reset sort attributes / classes on other header cells.
              for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
                if (index === columnIndex) {
                  continue;
                }
                this.adapter.removeClassNameByHeaderCellIndex(index, constants_1.cssClasses.HEADER_CELL_SORTED);
                this.adapter.removeClassNameByHeaderCellIndex(index, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(index, constants_1.strings.ARIA_SORT, constants_1.SortValue.NONE);
                this.adapter.setSortStatusLabelByHeaderCellIndex(index, constants_1.SortValue.NONE);
              }
              // Set appropriate sort attributes / classes on target header cell.
              this.adapter.setClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED);
              var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT);
              var sortValue = constants_1.SortValue.NONE;
              // Set to descending if sorted on ascending order.
              if (currentSortValue === constants_1.SortValue.ASCENDING) {
                this.adapter.setClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.DESCENDING);
                sortValue = constants_1.SortValue.DESCENDING;
                // Set to ascending if sorted on descending order.
              } else if (currentSortValue === constants_1.SortValue.DESCENDING) {
                this.adapter.removeClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.ASCENDING);
                sortValue = constants_1.SortValue.ASCENDING;
              } else {
                // Set to ascending by default when not sorted.
                this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.ASCENDING);
                sortValue = constants_1.SortValue.ASCENDING;
              }
              this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
              this.adapter.notifySortAction({
                columnId: columnId,
                columnIndex: columnIndex,
                headerCell: headerCell,
                sortValue: sortValue
              });
            };
            /**
             * Shows progress indicator blocking only the table body content when in
             * loading state.
             */
            MDCDataTableFoundation.prototype.showProgress = function () {
              var tableHeaderHeight = this.adapter.getTableHeaderHeight();
              // Calculate the height of table content (Not scroll content) excluding
              // header row height.
              var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
              var top = tableHeaderHeight;
              this.adapter.setProgressIndicatorStyles({
                height: height + "px",
                top: top + "px"
              });
              this.adapter.addClass(constants_1.cssClasses.IN_PROGRESS);
            };
            /**
             * Hides progress indicator when data table is finished loading.
             */
            MDCDataTableFoundation.prototype.hideProgress = function () {
              this.adapter.removeClass(constants_1.cssClasses.IN_PROGRESS);
            };
            /**
             * Updates header row checkbox state based on number of rows selected.
             */
            MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {
              if (this.adapter.getSelectedRowCount() === 0) {
                this.adapter.setHeaderRowCheckboxChecked(false);
                this.adapter.setHeaderRowCheckboxIndeterminate(false);
              } else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
                this.adapter.setHeaderRowCheckboxChecked(true);
                this.adapter.setHeaderRowCheckboxIndeterminate(false);
              } else {
                this.adapter.setHeaderRowCheckboxIndeterminate(true);
                this.adapter.setHeaderRowCheckboxChecked(false);
              }
            };
            /**
             * Sets the attributes of row element based on selection state.
             */
            MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {
              if (selected) {
                this.adapter.addClassAtRowIndex(rowIndex, constants_1.cssClasses.ROW_SELECTED);
                this.adapter.setAttributeAtRowIndex(rowIndex, constants_1.strings.ARIA_SELECTED, 'true');
              } else {
                this.adapter.removeClassAtRowIndex(rowIndex, constants_1.cssClasses.ROW_SELECTED);
                this.adapter.setAttributeAtRowIndex(rowIndex, constants_1.strings.ARIA_SELECTED, 'false');
              }
            };
            return MDCDataTableFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCDataTableFoundation = MDCDataTableFoundation;

          /***/ }),

        /***/ "./packages/mdc-data-table/index.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-data-table/index.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-data-table/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-data-table/foundation.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-data-table/constants.ts"));

          /***/ }),

        /***/ "./packages/mdc-dialog/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-dialog/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var focus_trap_1 = __webpack_require__(/*! @material/dom/focus-trap */ "./packages/mdc-dom/focus-trap.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-dialog/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-dialog/util.ts"));
          var strings = foundation_1.MDCDialogFoundation.strings;
          var MDCDialog = /** @class */function (_super) {
            __extends(MDCDialog, _super);
            function MDCDialog() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(MDCDialog.prototype, "isOpen", {
              get: function get() {
                return this.foundation.isOpen();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialog.prototype, "escapeKeyAction", {
              get: function get() {
                return this.foundation.getEscapeKeyAction();
              },
              set: function set(action) {
                this.foundation.setEscapeKeyAction(action);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialog.prototype, "scrimClickAction", {
              get: function get() {
                return this.foundation.getScrimClickAction();
              },
              set: function set(action) {
                this.foundation.setScrimClickAction(action);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialog.prototype, "autoStackButtons", {
              get: function get() {
                return this.foundation.getAutoStackButtons();
              },
              set: function set(autoStack) {
                this.foundation.setAutoStackButtons(autoStack);
              },
              enumerable: true,
              configurable: true
            });
            MDCDialog.attachTo = function (root) {
              return new MDCDialog(root);
            };
            MDCDialog.prototype.initialize = function (focusTrapFactory) {
              var e_1, _a;
              if (focusTrapFactory === void 0) {
                focusTrapFactory = function focusTrapFactory(el, focusOptions) {
                  return new focus_trap_1.FocusTrap(el, focusOptions);
                };
              }
              var container = this.root.querySelector(strings.CONTAINER_SELECTOR);
              if (!container) {
                throw new Error("Dialog component requires a " + strings.CONTAINER_SELECTOR + " container element");
              }
              this.container_ = container;
              this.content_ = this.root.querySelector(strings.CONTENT_SELECTOR);
              this.buttons_ = [].slice.call(this.root.querySelectorAll(strings.BUTTON_SELECTOR));
              this.defaultButton_ = this.root.querySelector("[" + strings.BUTTON_DEFAULT_ATTRIBUTE + "]");
              this.focusTrapFactory_ = focusTrapFactory;
              this.buttonRipples_ = [];
              try {
                for (var _b = __values(this.buttons_), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var buttonEl = _c.value;
                  this.buttonRipples_.push(new component_2.MDCRipple(buttonEl));
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            };
            MDCDialog.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.focusTrap_ = util.createFocusTrapInstance(this.container_, this.focusTrapFactory_, this.getInitialFocusEl_() || undefined);
              this.handleClick_ = this.foundation.handleClick.bind(this.foundation);
              this.handleKeydown_ = this.foundation.handleKeydown.bind(this.foundation);
              this.handleDocumentKeydown_ = this.foundation.handleDocumentKeydown.bind(this.foundation);
              this.handleLayout_ = this.layout.bind(this);
              var LAYOUT_EVENTS = ['resize', 'orientationchange'];
              this.handleOpening_ = function () {
                LAYOUT_EVENTS.forEach(function (evtType) {
                  return window.addEventListener(evtType, _this.handleLayout_);
                });
                document.addEventListener('keydown', _this.handleDocumentKeydown_);
              };
              this.handleClosing_ = function () {
                LAYOUT_EVENTS.forEach(function (evtType) {
                  return window.removeEventListener(evtType, _this.handleLayout_);
                });
                document.removeEventListener('keydown', _this.handleDocumentKeydown_);
              };
              this.listen('click', this.handleClick_);
              this.listen('keydown', this.handleKeydown_);
              this.listen(strings.OPENING_EVENT, this.handleOpening_);
              this.listen(strings.CLOSING_EVENT, this.handleClosing_);
            };
            MDCDialog.prototype.destroy = function () {
              this.unlisten('click', this.handleClick_);
              this.unlisten('keydown', this.handleKeydown_);
              this.unlisten(strings.OPENING_EVENT, this.handleOpening_);
              this.unlisten(strings.CLOSING_EVENT, this.handleClosing_);
              this.handleClosing_();
              this.buttonRipples_.forEach(function (ripple) {
                return ripple.destroy();
              });
              _super.prototype.destroy.call(this);
            };
            MDCDialog.prototype.layout = function () {
              this.foundation.layout();
            };
            MDCDialog.prototype.open = function () {
              this.foundation.open();
            };
            MDCDialog.prototype.close = function (action) {
              if (action === void 0) {
                action = '';
              }
              this.foundation.close(action);
            };
            MDCDialog.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addBodyClass: function addBodyClass(className) {
                  return document.body.classList.add(className);
                },
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                areButtonsStacked: function areButtonsStacked() {
                  return util.areTopsMisaligned(_this.buttons_);
                },
                clickDefaultButton: function clickDefaultButton() {
                  return _this.defaultButton_ && _this.defaultButton_.click();
                },
                eventTargetMatches: function eventTargetMatches(target, selector) {
                  return target ? ponyfill_1.matches(target, selector) : false;
                },
                getActionFromEvent: function getActionFromEvent(evt) {
                  if (!evt.target) {
                    return '';
                  }
                  var element = ponyfill_1.closest(evt.target, "[" + strings.ACTION_ATTRIBUTE + "]");
                  return element && element.getAttribute(strings.ACTION_ATTRIBUTE);
                },
                getInitialFocusEl: function getInitialFocusEl() {
                  return _this.getInitialFocusEl_();
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                isContentScrollable: function isContentScrollable() {
                  return util.isScrollable(_this.content_);
                },
                notifyClosed: function notifyClosed(action) {
                  return _this.emit(strings.CLOSED_EVENT, action ? { action: action } : {});
                },
                notifyClosing: function notifyClosing(action) {
                  return _this.emit(strings.CLOSING_EVENT, action ? { action: action } : {});
                },
                notifyOpened: function notifyOpened() {
                  return _this.emit(strings.OPENED_EVENT, {});
                },
                notifyOpening: function notifyOpening() {
                  return _this.emit(strings.OPENING_EVENT, {});
                },
                releaseFocus: function releaseFocus() {
                  return _this.focusTrap_.releaseFocus();
                },
                removeBodyClass: function removeBodyClass(className) {
                  return document.body.classList.remove(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                reverseButtons: function reverseButtons() {
                  _this.buttons_.reverse();
                  _this.buttons_.forEach(function (button) {
                    button.parentElement.appendChild(button);
                  });
                },
                trapFocus: function trapFocus() {
                  return _this.focusTrap_.trapFocus();
                }
              };
              return new foundation_1.MDCDialogFoundation(adapter);
            };
            MDCDialog.prototype.getInitialFocusEl_ = function () {
              return this.root.querySelector("[" + strings.INITIAL_FOCUS_ATTRIBUTE + "]");
            };
            return MDCDialog;
          }(component_1.MDCComponent);
          exports.MDCDialog = MDCDialog;

          /***/ }),

        /***/ "./packages/mdc-dialog/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-dialog/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            CLOSING: 'mdc-dialog--closing',
            OPEN: 'mdc-dialog--open',
            OPENING: 'mdc-dialog--opening',
            SCROLLABLE: 'mdc-dialog--scrollable',
            SCROLL_LOCK: 'mdc-dialog-scroll-lock',
            STACKED: 'mdc-dialog--stacked'
          };
          exports.strings = {
            ACTION_ATTRIBUTE: 'data-mdc-dialog-action',
            BUTTON_DEFAULT_ATTRIBUTE: 'data-mdc-dialog-button-default',
            BUTTON_SELECTOR: '.mdc-dialog__button',
            CLOSED_EVENT: 'MDCDialog:closed',
            CLOSE_ACTION: 'close',
            CLOSING_EVENT: 'MDCDialog:closing',
            CONTAINER_SELECTOR: '.mdc-dialog__container',
            CONTENT_SELECTOR: '.mdc-dialog__content',
            DESTROY_ACTION: 'destroy',
            INITIAL_FOCUS_ATTRIBUTE: 'data-mdc-dialog-initial-focus',
            OPENED_EVENT: 'MDCDialog:opened',
            OPENING_EVENT: 'MDCDialog:opening',
            SCRIM_SELECTOR: '.mdc-dialog__scrim',
            SUPPRESS_DEFAULT_PRESS_SELECTOR: ['textarea', '.mdc-menu .mdc-list-item'].join(', '),
            SURFACE_SELECTOR: '.mdc-dialog__surface'
          };
          exports.numbers = {
            DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
            DIALOG_ANIMATION_OPEN_TIME_MS: 150
          };

          /***/ }),

        /***/ "./packages/mdc-dialog/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-dialog/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-dialog/constants.ts");
          var MDCDialogFoundation = /** @class */function (_super) {
            __extends(MDCDialogFoundation, _super);
            function MDCDialogFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCDialogFoundation.defaultAdapter), adapter)) || this;
              _this.isOpen_ = false;
              _this.animationFrame_ = 0;
              _this.animationTimer_ = 0;
              _this.layoutFrame_ = 0;
              _this.escapeKeyAction_ = constants_1.strings.CLOSE_ACTION;
              _this.scrimClickAction_ = constants_1.strings.CLOSE_ACTION;
              _this.autoStackButtons_ = true;
              _this.areButtonsStacked_ = false;
              _this.suppressDefaultPressSelector = constants_1.strings.SUPPRESS_DEFAULT_PRESS_SELECTOR;
              return _this;
            }
            Object.defineProperty(MDCDialogFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialogFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialogFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDialogFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addBodyClass: function addBodyClass() {
                    return undefined;
                  },
                  addClass: function addClass() {
                    return undefined;
                  },
                  areButtonsStacked: function areButtonsStacked() {
                    return false;
                  },
                  clickDefaultButton: function clickDefaultButton() {
                    return undefined;
                  },
                  eventTargetMatches: function eventTargetMatches() {
                    return false;
                  },
                  getActionFromEvent: function getActionFromEvent() {
                    return '';
                  },
                  getInitialFocusEl: function getInitialFocusEl() {
                    return null;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  isContentScrollable: function isContentScrollable() {
                    return false;
                  },
                  notifyClosed: function notifyClosed() {
                    return undefined;
                  },
                  notifyClosing: function notifyClosing() {
                    return undefined;
                  },
                  notifyOpened: function notifyOpened() {
                    return undefined;
                  },
                  notifyOpening: function notifyOpening() {
                    return undefined;
                  },
                  releaseFocus: function releaseFocus() {
                    return undefined;
                  },
                  removeBodyClass: function removeBodyClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  reverseButtons: function reverseButtons() {
                    return undefined;
                  },
                  trapFocus: function trapFocus() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCDialogFoundation.prototype.init = function () {
              if (this.adapter.hasClass(constants_1.cssClasses.STACKED)) {
                this.setAutoStackButtons(false);
              }
            };
            MDCDialogFoundation.prototype.destroy = function () {
              if (this.isOpen_) {
                this.close(constants_1.strings.DESTROY_ACTION);
              }
              if (this.animationTimer_) {
                clearTimeout(this.animationTimer_);
                this.handleAnimationTimerEnd_();
              }
              if (this.layoutFrame_) {
                cancelAnimationFrame(this.layoutFrame_);
                this.layoutFrame_ = 0;
              }
            };
            MDCDialogFoundation.prototype.open = function () {
              var _this = this;
              this.isOpen_ = true;
              this.adapter.notifyOpening();
              this.adapter.addClass(constants_1.cssClasses.OPENING);
              // Wait a frame once display is no longer "none", to establish basis for animation
              this.runNextAnimationFrame_(function () {
                _this.adapter.addClass(constants_1.cssClasses.OPEN);
                _this.adapter.addBodyClass(constants_1.cssClasses.SCROLL_LOCK);
                _this.layout();
                _this.animationTimer_ = setTimeout(function () {
                  _this.handleAnimationTimerEnd_();
                  _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());
                  _this.adapter.notifyOpened();
                }, constants_1.numbers.DIALOG_ANIMATION_OPEN_TIME_MS);
              });
            };
            MDCDialogFoundation.prototype.close = function (action) {
              var _this = this;
              if (action === void 0) {
                action = '';
              }
              if (!this.isOpen_) {
                // Avoid redundant close calls (and events), e.g. from keydown on elements that inherently emit click
                return;
              }
              this.isOpen_ = false;
              this.adapter.notifyClosing(action);
              this.adapter.addClass(constants_1.cssClasses.CLOSING);
              this.adapter.removeClass(constants_1.cssClasses.OPEN);
              this.adapter.removeBodyClass(constants_1.cssClasses.SCROLL_LOCK);
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = 0;
              clearTimeout(this.animationTimer_);
              this.animationTimer_ = setTimeout(function () {
                _this.adapter.releaseFocus();
                _this.handleAnimationTimerEnd_();
                _this.adapter.notifyClosed(action);
              }, constants_1.numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);
            };
            MDCDialogFoundation.prototype.isOpen = function () {
              return this.isOpen_;
            };
            MDCDialogFoundation.prototype.getEscapeKeyAction = function () {
              return this.escapeKeyAction_;
            };
            MDCDialogFoundation.prototype.setEscapeKeyAction = function (action) {
              this.escapeKeyAction_ = action;
            };
            MDCDialogFoundation.prototype.getScrimClickAction = function () {
              return this.scrimClickAction_;
            };
            MDCDialogFoundation.prototype.setScrimClickAction = function (action) {
              this.scrimClickAction_ = action;
            };
            MDCDialogFoundation.prototype.getAutoStackButtons = function () {
              return this.autoStackButtons_;
            };
            MDCDialogFoundation.prototype.setAutoStackButtons = function (autoStack) {
              this.autoStackButtons_ = autoStack;
            };
            MDCDialogFoundation.prototype.getSuppressDefaultPressSelector = function () {
              return this.suppressDefaultPressSelector;
            };
            MDCDialogFoundation.prototype.setSuppressDefaultPressSelector = function (selector) {
              this.suppressDefaultPressSelector = selector;
            };
            MDCDialogFoundation.prototype.layout = function () {
              var _this = this;
              if (this.layoutFrame_) {
                cancelAnimationFrame(this.layoutFrame_);
              }
              this.layoutFrame_ = requestAnimationFrame(function () {
                _this.layoutInternal_();
                _this.layoutFrame_ = 0;
              });
            };
            /** Handles click on the dialog root element. */
            MDCDialogFoundation.prototype.handleClick = function (evt) {
              var isScrim = this.adapter.eventTargetMatches(evt.target, constants_1.strings.SCRIM_SELECTOR);
              // Check for scrim click first since it doesn't require querying ancestors.
              if (isScrim && this.scrimClickAction_ !== '') {
                this.close(this.scrimClickAction_);
              } else {
                var action = this.adapter.getActionFromEvent(evt);
                if (action) {
                  this.close(action);
                }
              }
            };
            /** Handles keydown on the dialog root element. */
            MDCDialogFoundation.prototype.handleKeydown = function (evt) {
              var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
              if (!isEnter) {
                return;
              }
              var action = this.adapter.getActionFromEvent(evt);
              if (action) {
                // Action button callback is handled in `handleClick`,
                // since space/enter keydowns on buttons trigger click events.
                return;
              }
              // `composedPath` is used here, when available, to account for use cases
              // where a target meant to suppress the default press behaviour
              // may exist in a shadow root.
              // For example, a textarea inside a web component:
              // <mwc-dialog>
              //   <horizontal-layout>
              //     #shadow-root (open)
              //       <mwc-textarea>
              //         #shadow-root (open)
              //           <textarea></textarea>
              //       </mwc-textarea>
              //   </horizontal-layout>
              // </mwc-dialog>
              var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
              var isDefault = !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector);
              if (isEnter && isDefault) {
                this.adapter.clickDefaultButton();
              }
            };
            /** Handles keydown on the document. */
            MDCDialogFoundation.prototype.handleDocumentKeydown = function (evt) {
              var isEscape = evt.key === 'Escape' || evt.keyCode === 27;
              if (isEscape && this.escapeKeyAction_ !== '') {
                this.close(this.escapeKeyAction_);
              }
            };
            MDCDialogFoundation.prototype.layoutInternal_ = function () {
              if (this.autoStackButtons_) {
                this.detectStackedButtons_();
              }
              this.detectScrollableContent_();
            };
            MDCDialogFoundation.prototype.handleAnimationTimerEnd_ = function () {
              this.animationTimer_ = 0;
              this.adapter.removeClass(constants_1.cssClasses.OPENING);
              this.adapter.removeClass(constants_1.cssClasses.CLOSING);
            };
            /**
             * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
             */
            MDCDialogFoundation.prototype.runNextAnimationFrame_ = function (callback) {
              var _this = this;
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = requestAnimationFrame(function () {
                _this.animationFrame_ = 0;
                clearTimeout(_this.animationTimer_);
                _this.animationTimer_ = setTimeout(callback, 0);
              });
            };
            MDCDialogFoundation.prototype.detectStackedButtons_ = function () {
              // Remove the class first to let us measure the buttons' natural positions.
              this.adapter.removeClass(constants_1.cssClasses.STACKED);
              var areButtonsStacked = this.adapter.areButtonsStacked();
              if (areButtonsStacked) {
                this.adapter.addClass(constants_1.cssClasses.STACKED);
              }
              if (areButtonsStacked !== this.areButtonsStacked_) {
                this.adapter.reverseButtons();
                this.areButtonsStacked_ = areButtonsStacked;
              }
            };
            MDCDialogFoundation.prototype.detectScrollableContent_ = function () {
              // Remove the class first to let us measure the natural height of the content.
              this.adapter.removeClass(constants_1.cssClasses.SCROLLABLE);
              if (this.adapter.isContentScrollable()) {
                this.adapter.addClass(constants_1.cssClasses.SCROLLABLE);
              }
            };
            return MDCDialogFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCDialogFoundation = MDCDialogFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCDialogFoundation;

          /***/ }),

        /***/ "./packages/mdc-dialog/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-dialog/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-dialog/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-dialog/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-dialog/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-dialog/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-dialog/util.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-dialog/util.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          function createFocusTrapInstance(surfaceEl, focusTrapFactory, initialFocusEl) {
            return focusTrapFactory(surfaceEl, { initialFocusEl: initialFocusEl });
          }
          exports.createFocusTrapInstance = createFocusTrapInstance;
          function isScrollable(el) {
            return el ? el.scrollHeight > el.offsetHeight : false;
          }
          exports.isScrollable = isScrollable;
          function areTopsMisaligned(els) {
            var tops = new Set();
            [].forEach.call(els, function (el) {
              return tops.add(el.offsetTop);
            });
            return tops.size > 1;
          }
          exports.areTopsMisaligned = areTopsMisaligned;

          /***/ }),

        /***/ "./packages/mdc-dom/announce.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-dom/announce.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * Priorities for the announce function
           */
          var AnnouncerPriority;
          (function (AnnouncerPriority) {
            AnnouncerPriority["POLITE"] = "polite";
            AnnouncerPriority["ASSERTIVE"] = "assertive";
          })(AnnouncerPriority = exports.AnnouncerPriority || (exports.AnnouncerPriority = {}));
          /**
           * Data attribute added to live region element.
           */
          exports.DATA_MDC_DOM_ANNOUNCE = 'data-mdc-dom-announce';
          /**
           * Announces the given message with optional priority, defaulting to "polite"
           */
          function announce(message, priority) {
            Announcer.getInstance().say(message, priority);
          }
          exports.announce = announce;
          var Announcer = /** @class */function () {
            // Constructor made private to ensure only the singleton is used
            function Announcer() {
              this.liveRegions = new Map();
            }
            Announcer.getInstance = function () {
              if (!Announcer.instance) {
                Announcer.instance = new Announcer();
              }
              return Announcer.instance;
            };
            Announcer.prototype.say = function (message, priority) {
              if (priority === void 0) {
                priority = AnnouncerPriority.POLITE;
              }
              var liveRegion = this.getLiveRegion(priority);
              // Reset the region to pick up the message, even if the message is the
              // exact same as before.
              liveRegion.textContent = '';
              // Timeout is necessary for screen readers like NVDA and VoiceOver.
              setTimeout(function () {
                liveRegion.textContent = message;
                document.addEventListener('click', clearLiveRegion);
              }, 1);
              function clearLiveRegion() {
                liveRegion.textContent = '';
                document.removeEventListener('click', clearLiveRegion);
              }
            };
            Announcer.prototype.getLiveRegion = function (priority) {
              var existingLiveRegion = this.liveRegions.get(priority);
              if (existingLiveRegion && document.body.contains(existingLiveRegion)) {
                return existingLiveRegion;
              }
              var liveRegion = this.createLiveRegion(priority);
              this.liveRegions.set(priority, liveRegion);
              return liveRegion;
            };
            Announcer.prototype.createLiveRegion = function (priority) {
              var el = document.createElement('div');
              el.style.position = 'absolute';
              el.style.top = '-9999px';
              el.style.left = '-9999px';
              el.style.height = '1px';
              el.style.overflow = 'hidden';
              el.setAttribute('aria-atomic', 'true');
              el.setAttribute('aria-live', priority);
              el.setAttribute(exports.DATA_MDC_DOM_ANNOUNCE, 'true');
              document.body.appendChild(el);
              return el;
            };
            return Announcer;
          }();

          /***/ }),

        /***/ "./packages/mdc-dom/events.ts":
        /*!************************************!*\
  !*** ./packages/mdc-dom/events.ts ***!
  \************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * Determine whether the current browser supports passive event listeners, and
           * if so, use them.
           */
          function applyPassive(globalObj) {
            if (globalObj === void 0) {
              globalObj = window;
            }
            return supportsPassiveOption(globalObj) ? { passive: true } : false;
          }
          exports.applyPassive = applyPassive;
          function supportsPassiveOption(globalObj) {
            if (globalObj === void 0) {
              globalObj = window;
            }
            // See
            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
            var passiveSupported = false;
            try {
              var options = {
                // This function will be called when the browser
                // attempts to access the passive property.
                get passive() {
                  passiveSupported = true;
                  return false;
                }
              };
              var handler = function handler() {};
              globalObj.document.addEventListener('test', handler, options);
              globalObj.document.removeEventListener('test', handler, options);
            } catch (err) {
              passiveSupported = false;
            }
            return passiveSupported;
          }

          /***/ }),

        /***/ "./packages/mdc-dom/focus-trap.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-dom/focus-trap.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var FOCUS_SENTINEL_CLASS = 'mdc-dom-focus-sentinel';
          /**
           * Utility to trap focus in a given root element, e.g. for modal components such
           * as dialogs. The root should have at least one focusable child element,
           * for setting initial focus when trapping focus.
           * Also tracks the previously focused element, and restores focus to that
           * element when releasing focus.
           */
          var FocusTrap = /** @class */function () {
            function FocusTrap(root, options) {
              if (options === void 0) {
                options = {};
              }
              this.root = root;
              this.options = options;
              // Previously focused element before trapping focus.
              this.elFocusedBeforeTrapFocus = null;
            }
            /**
             * Traps focus in `root`. Also focuses on either `initialFocusEl` if set;
             * otherwises sets initial focus to the first focusable child element.
             */
            FocusTrap.prototype.trapFocus = function () {
              var focusableEls = this.getFocusableElements(this.root);
              if (focusableEls.length === 0) {
                throw new Error('FocusTrap: Element must have at least one focusable child.');
              }
              this.elFocusedBeforeTrapFocus = document.activeElement instanceof HTMLElement ? document.activeElement : null;
              this.wrapTabFocus(this.root, focusableEls);
              if (!this.options.skipInitialFocus) {
                this.focusInitialElement(focusableEls, this.options.initialFocusEl);
              }
            };
            /**
             * Releases focus from `root`. Also restores focus to the previously focused
             * element.
             */
            FocusTrap.prototype.releaseFocus = function () {
              [].slice.call(this.root.querySelectorAll("." + FOCUS_SENTINEL_CLASS)).forEach(function (sentinelEl) {
                sentinelEl.parentElement.removeChild(sentinelEl);
              });
              if (this.elFocusedBeforeTrapFocus) {
                this.elFocusedBeforeTrapFocus.focus();
              }
            };
            /**
             * Wraps tab focus within `el` by adding two hidden sentinel divs which are
             * used to mark the beginning and the end of the tabbable region. When
             * focused, these sentinel elements redirect focus to the first/last
             * children elements of the tabbable region, ensuring that focus is trapped
             * within that region.
             */
            FocusTrap.prototype.wrapTabFocus = function (el, focusableEls) {
              var sentinelStart = this.createSentinel();
              var sentinelEnd = this.createSentinel();
              sentinelStart.addEventListener('focus', function () {
                if (focusableEls.length > 0) {
                  focusableEls[focusableEls.length - 1].focus();
                }
              });
              sentinelEnd.addEventListener('focus', function () {
                if (focusableEls.length > 0) {
                  focusableEls[0].focus();
                }
              });
              el.insertBefore(sentinelStart, el.children[0]);
              el.appendChild(sentinelEnd);
            };
            /**
             * Focuses on `initialFocusEl` if defined and a child of the root element.
             * Otherwise, focuses on the first focusable child element of the root.
             */
            FocusTrap.prototype.focusInitialElement = function (focusableEls, initialFocusEl) {
              var focusIndex = 0;
              if (initialFocusEl) {
                focusIndex = Math.max(focusableEls.indexOf(initialFocusEl), 0);
              }
              focusableEls[focusIndex].focus();
            };
            FocusTrap.prototype.getFocusableElements = function (root) {
              var focusableEls = [].slice.call(root.querySelectorAll('[autofocus], [tabindex], a, input, textarea, select, button'));
              return focusableEls.filter(function (el) {
                var isDisabledOrHidden = el.getAttribute('aria-disabled') === 'true' || el.getAttribute('disabled') != null || el.getAttribute('hidden') != null || el.getAttribute('aria-hidden') === 'true';
                var isTabbableAndVisible = el.tabIndex >= 0 && el.getBoundingClientRect().width > 0 && !el.classList.contains(FOCUS_SENTINEL_CLASS) && !isDisabledOrHidden;
                var isProgrammaticallyHidden = false;
                if (isTabbableAndVisible) {
                  var style = getComputedStyle(el);
                  isProgrammaticallyHidden = style.display === 'none' || style.visibility === 'hidden';
                }
                return isTabbableAndVisible && !isProgrammaticallyHidden;
              });
            };
            FocusTrap.prototype.createSentinel = function () {
              var sentinel = document.createElement('div');
              sentinel.setAttribute('tabindex', '0');
              // Don't announce in screen readers.
              sentinel.setAttribute('aria-hidden', 'true');
              sentinel.classList.add(FOCUS_SENTINEL_CLASS);
              return sentinel;
            };
            return FocusTrap;
          }();
          exports.FocusTrap = FocusTrap;

          /***/ }),

        /***/ "./packages/mdc-dom/index.ts":
        /*!***********************************!*\
  !*** ./packages/mdc-dom/index.ts ***!
  \***********************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var events = __importStar(__webpack_require__(/*! ./events */ "./packages/mdc-dom/events.ts"));
          exports.events = events;
          var focusTrap = __importStar(__webpack_require__(/*! ./focus-trap */ "./packages/mdc-dom/focus-trap.ts"));
          exports.focusTrap = focusTrap;
          var keyboard = __importStar(__webpack_require__(/*! ./keyboard */ "./packages/mdc-dom/keyboard.ts"));
          exports.keyboard = keyboard;
          var ponyfill = __importStar(__webpack_require__(/*! ./ponyfill */ "./packages/mdc-dom/ponyfill.ts"));
          exports.ponyfill = ponyfill;

          /***/ }),

        /***/ "./packages/mdc-dom/keyboard.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-dom/keyboard.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * KEY provides normalized string values for keys.
           */
          exports.KEY = {
            UNKNOWN: 'Unknown',
            BACKSPACE: 'Backspace',
            ENTER: 'Enter',
            SPACEBAR: 'Spacebar',
            PAGE_UP: 'PageUp',
            PAGE_DOWN: 'PageDown',
            END: 'End',
            HOME: 'Home',
            ARROW_LEFT: 'ArrowLeft',
            ARROW_UP: 'ArrowUp',
            ARROW_RIGHT: 'ArrowRight',
            ARROW_DOWN: 'ArrowDown',
            DELETE: 'Delete',
            ESCAPE: 'Escape'
          };
          var normalizedKeys = new Set();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
          normalizedKeys.add(exports.KEY.BACKSPACE);
          normalizedKeys.add(exports.KEY.ENTER);
          normalizedKeys.add(exports.KEY.SPACEBAR);
          normalizedKeys.add(exports.KEY.PAGE_UP);
          normalizedKeys.add(exports.KEY.PAGE_DOWN);
          normalizedKeys.add(exports.KEY.END);
          normalizedKeys.add(exports.KEY.HOME);
          normalizedKeys.add(exports.KEY.ARROW_LEFT);
          normalizedKeys.add(exports.KEY.ARROW_UP);
          normalizedKeys.add(exports.KEY.ARROW_RIGHT);
          normalizedKeys.add(exports.KEY.ARROW_DOWN);
          normalizedKeys.add(exports.KEY.DELETE);
          normalizedKeys.add(exports.KEY.ESCAPE);
          var KEY_CODE = {
            BACKSPACE: 8,
            ENTER: 13,
            SPACEBAR: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            ARROW_LEFT: 37,
            ARROW_UP: 38,
            ARROW_RIGHT: 39,
            ARROW_DOWN: 40,
            DELETE: 46,
            ESCAPE: 27
          };
          var mappedKeyCodes = new Map();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
          mappedKeyCodes.set(KEY_CODE.BACKSPACE, exports.KEY.BACKSPACE);
          mappedKeyCodes.set(KEY_CODE.ENTER, exports.KEY.ENTER);
          mappedKeyCodes.set(KEY_CODE.SPACEBAR, exports.KEY.SPACEBAR);
          mappedKeyCodes.set(KEY_CODE.PAGE_UP, exports.KEY.PAGE_UP);
          mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, exports.KEY.PAGE_DOWN);
          mappedKeyCodes.set(KEY_CODE.END, exports.KEY.END);
          mappedKeyCodes.set(KEY_CODE.HOME, exports.KEY.HOME);
          mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, exports.KEY.ARROW_LEFT);
          mappedKeyCodes.set(KEY_CODE.ARROW_UP, exports.KEY.ARROW_UP);
          mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, exports.KEY.ARROW_RIGHT);
          mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, exports.KEY.ARROW_DOWN);
          mappedKeyCodes.set(KEY_CODE.DELETE, exports.KEY.DELETE);
          mappedKeyCodes.set(KEY_CODE.ESCAPE, exports.KEY.ESCAPE);
          var navigationKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this
// by hand.
          navigationKeys.add(exports.KEY.PAGE_UP);
          navigationKeys.add(exports.KEY.PAGE_DOWN);
          navigationKeys.add(exports.KEY.END);
          navigationKeys.add(exports.KEY.HOME);
          navigationKeys.add(exports.KEY.ARROW_LEFT);
          navigationKeys.add(exports.KEY.ARROW_UP);
          navigationKeys.add(exports.KEY.ARROW_RIGHT);
          navigationKeys.add(exports.KEY.ARROW_DOWN);
          /**
           * normalizeKey returns the normalized string for a navigational action.
           */
          function normalizeKey(evt) {
            var key = evt.key;
            // If the event already has a normalized key, return it
            if (normalizedKeys.has(key)) {
              return key;
            }
            // tslint:disable-next-line:deprecation
            var mappedKey = mappedKeyCodes.get(evt.keyCode);
            if (mappedKey) {
              return mappedKey;
            }
            return exports.KEY.UNKNOWN;
          }
          exports.normalizeKey = normalizeKey;
          /**
           * isNavigationEvent returns whether the event is a navigation event
           */
          function isNavigationEvent(evt) {
            return navigationKeys.has(normalizeKey(evt));
          }
          exports.isNavigationEvent = isNavigationEvent;

          /***/ }),

        /***/ "./packages/mdc-dom/ponyfill.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-dom/ponyfill.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
           * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
           */
          function closest(element, selector) {
            if (element.closest) {
              return element.closest(selector);
            }
            var el = element;
            while (el) {
              if (matches(el, selector)) {
                return el;
              }
              el = el.parentElement;
            }
            return null;
          }
          exports.closest = closest;
          function matches(element, selector) {
            var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
            return nativeMatches.call(element, selector);
          }
          exports.matches = matches;
          /**
           * Used to compute the estimated scroll width of elements. When an element is
           * hidden due to display: none; being applied to a parent element, the width is
           * returned as 0. However, the element will have a true width once no longer
           * inside a display: none context. This method computes an estimated width when
           * the element is hidden or returns the true width when the element is visble.
           * @param {Element} element the element whose width to estimate
           */
          function estimateScrollWidth(element) {
            // Check the offsetParent. If the element inherits display: none from any
            // parent, the offsetParent property will be null (see
            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
            // This check ensures we only clone the node when necessary.
            var htmlEl = element;
            if (htmlEl.offsetParent !== null) {
              return htmlEl.scrollWidth;
            }
            var clone = htmlEl.cloneNode(true);
            clone.style.setProperty('position', 'absolute');
            clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
            document.documentElement.appendChild(clone);
            var scrollWidth = clone.scrollWidth;
            document.documentElement.removeChild(clone);
            return scrollWidth;
          }
          exports.estimateScrollWidth = estimateScrollWidth;

          /***/ }),

        /***/ "./packages/mdc-drawer/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-drawer/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var focus_trap_1 = __webpack_require__(/*! @material/dom/focus-trap */ "./packages/mdc-dom/focus-trap.ts");
          var component_2 = __webpack_require__(/*! @material/list/component */ "./packages/mdc-list/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/list/foundation */ "./packages/mdc-list/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./dismissible/foundation */ "./packages/mdc-drawer/dismissible/foundation.ts");
          var foundation_3 = __webpack_require__(/*! ./modal/foundation */ "./packages/mdc-drawer/modal/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-drawer/util.ts"));
          var cssClasses = foundation_2.MDCDismissibleDrawerFoundation.cssClasses,
              strings = foundation_2.MDCDismissibleDrawerFoundation.strings;
          /**
           * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.
           * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.
           */
          var MDCDrawer = /** @class */function (_super) {
            __extends(MDCDrawer, _super);
            function MDCDrawer() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCDrawer.attachTo = function (root) {
              return new MDCDrawer(root);
            };
            Object.defineProperty(MDCDrawer.prototype, "open", {
              /**
               * @return boolean Proxies to the foundation's `open`/`close` methods.
               * Also returns true if drawer is in the open position.
               */
              get: function get() {
                return this.foundation.isOpen();
              },
              /**
               * Toggles the drawer open and closed.
               */
              set: function set(isOpen) {
                if (isOpen) {
                  this.foundation.open();
                } else {
                  this.foundation.close();
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDrawer.prototype, "list", {
              get: function get() {
                return this.list_;
              },
              enumerable: true,
              configurable: true
            });
            MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {
              if (focusTrapFactory === void 0) {
                focusTrapFactory = function focusTrapFactory(el) {
                  return new focus_trap_1.FocusTrap(el);
                };
              }
              if (listFactory === void 0) {
                listFactory = function listFactory(el) {
                  return new component_2.MDCList(el);
                };
              }
              var listEl = this.root.querySelector("." + foundation_1.MDCListFoundation.cssClasses.ROOT);
              if (listEl) {
                this.list_ = listFactory(listEl);
                this.list_.wrapFocus = true;
              }
              this.focusTrapFactory_ = focusTrapFactory;
            };
            MDCDrawer.prototype.initialSyncWithDOM = function () {
              var _this = this;
              var MODAL = cssClasses.MODAL;
              var SCRIM_SELECTOR = strings.SCRIM_SELECTOR;
              this.scrim_ = this.root.parentNode.querySelector(SCRIM_SELECTOR);
              if (this.scrim_ && this.root.classList.contains(MODAL)) {
                this.handleScrimClick_ = function () {
                  return _this.foundation.handleScrimClick();
                };
                this.scrim_.addEventListener('click', this.handleScrimClick_);
                this.focusTrap_ = util.createFocusTrapInstance(this.root, this.focusTrapFactory_);
              }
              this.handleKeydown_ = function (evt) {
                return _this.foundation.handleKeydown(evt);
              };
              this.handleTransitionEnd_ = function (evt) {
                return _this.foundation.handleTransitionEnd(evt);
              };
              this.listen('keydown', this.handleKeydown_);
              this.listen('transitionend', this.handleTransitionEnd_);
            };
            MDCDrawer.prototype.destroy = function () {
              this.unlisten('keydown', this.handleKeydown_);
              this.unlisten('transitionend', this.handleTransitionEnd_);
              if (this.list_) {
                this.list_.destroy();
              }
              var MODAL = cssClasses.MODAL;
              if (this.scrim_ && this.handleScrimClick_ && this.root.classList.contains(MODAL)) {
                this.scrim_.removeEventListener('click', this.handleScrimClick_);
                // Ensure drawer is closed to hide scrim and release focus
                this.open = false;
              }
            };
            MDCDrawer.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                elementHasClass: function elementHasClass(element, className) {
                  return element.classList.contains(className);
                },
                saveFocus: function saveFocus() {
                  return _this.previousFocus_ = document.activeElement;
                },
                restoreFocus: function restoreFocus() {
                  var previousFocus = _this.previousFocus_;
                  if (previousFocus && previousFocus.focus && _this.root.contains(document.activeElement)) {
                    previousFocus.focus();
                  }
                },
                focusActiveNavigationItem: function focusActiveNavigationItem() {
                  var activeNavItemEl = _this.root.querySelector("." + foundation_1.MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
                  if (activeNavItemEl) {
                    activeNavItemEl.focus();
                  }
                },
                notifyClose: function notifyClose() {
                  return _this.emit(strings.CLOSE_EVENT, {}, true /* shouldBubble */);
                },
                notifyOpen: function notifyOpen() {
                  return _this.emit(strings.OPEN_EVENT, {}, true /* shouldBubble */);
                },
                trapFocus: function trapFocus() {
                  return _this.focusTrap_.trapFocus();
                },
                releaseFocus: function releaseFocus() {
                  return _this.focusTrap_.releaseFocus();
                }
              };
              // tslint:enable:object-literal-sort-keys
              var DISMISSIBLE = cssClasses.DISMISSIBLE,
                  MODAL = cssClasses.MODAL;
              if (this.root.classList.contains(DISMISSIBLE)) {
                return new foundation_2.MDCDismissibleDrawerFoundation(adapter);
              } else if (this.root.classList.contains(MODAL)) {
                return new foundation_3.MDCModalDrawerFoundation(adapter);
              } else {
                throw new Error("MDCDrawer: Failed to instantiate component. Supported variants are " + DISMISSIBLE + " and " + MODAL + ".");
              }
            };
            return MDCDrawer;
          }(component_1.MDCComponent);
          exports.MDCDrawer = MDCDrawer;

          /***/ }),

        /***/ "./packages/mdc-drawer/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-drawer/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ANIMATE: 'mdc-drawer--animate',
            CLOSING: 'mdc-drawer--closing',
            DISMISSIBLE: 'mdc-drawer--dismissible',
            MODAL: 'mdc-drawer--modal',
            OPEN: 'mdc-drawer--open',
            OPENING: 'mdc-drawer--opening',
            ROOT: 'mdc-drawer'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
            CLOSE_EVENT: 'MDCDrawer:closed',
            OPEN_EVENT: 'MDCDrawer:opened',
            SCRIM_SELECTOR: '.mdc-drawer-scrim'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-drawer/dismissible/foundation.ts":
        /*!*******************************************************!*\
  !*** ./packages/mdc-drawer/dismissible/foundation.ts ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ../constants */ "./packages/mdc-drawer/constants.ts");
          var MDCDismissibleDrawerFoundation = /** @class */function (_super) {
            __extends(MDCDismissibleDrawerFoundation, _super);
            function MDCDismissibleDrawerFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter), adapter)) || this;
              _this.animationFrame_ = 0;
              _this.animationTimer_ = 0;
              return _this;
            }
            Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  elementHasClass: function elementHasClass() {
                    return false;
                  },
                  notifyClose: function notifyClose() {
                    return undefined;
                  },
                  notifyOpen: function notifyOpen() {
                    return undefined;
                  },
                  saveFocus: function saveFocus() {
                    return undefined;
                  },
                  restoreFocus: function restoreFocus() {
                    return undefined;
                  },
                  focusActiveNavigationItem: function focusActiveNavigationItem() {
                    return undefined;
                  },
                  trapFocus: function trapFocus() {
                    return undefined;
                  },
                  releaseFocus: function releaseFocus() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCDismissibleDrawerFoundation.prototype.destroy = function () {
              if (this.animationFrame_) {
                cancelAnimationFrame(this.animationFrame_);
              }
              if (this.animationTimer_) {
                clearTimeout(this.animationTimer_);
              }
            };
            /**
             * Opens the drawer from the closed state.
             */
            MDCDismissibleDrawerFoundation.prototype.open = function () {
              var _this = this;
              if (this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
              }
              this.adapter.addClass(constants_1.cssClasses.OPEN);
              this.adapter.addClass(constants_1.cssClasses.ANIMATE);
              // Wait a frame once display is no longer "none", to establish basis for animation
              this.runNextAnimationFrame_(function () {
                _this.adapter.addClass(constants_1.cssClasses.OPENING);
              });
              this.adapter.saveFocus();
            };
            /**
             * Closes the drawer from the open state.
             */
            MDCDismissibleDrawerFoundation.prototype.close = function () {
              if (!this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
              }
              this.adapter.addClass(constants_1.cssClasses.CLOSING);
            };
            /**
             * Returns true if the drawer is in the open position.
             * @return true if drawer is in open state.
             */
            MDCDismissibleDrawerFoundation.prototype.isOpen = function () {
              return this.adapter.hasClass(constants_1.cssClasses.OPEN);
            };
            /**
             * Returns true if the drawer is animating open.
             * @return true if drawer is animating open.
             */
            MDCDismissibleDrawerFoundation.prototype.isOpening = function () {
              return this.adapter.hasClass(constants_1.cssClasses.OPENING) || this.adapter.hasClass(constants_1.cssClasses.ANIMATE);
            };
            /**
             * Returns true if the drawer is animating closed.
             * @return true if drawer is animating closed.
             */
            MDCDismissibleDrawerFoundation.prototype.isClosing = function () {
              return this.adapter.hasClass(constants_1.cssClasses.CLOSING);
            };
            /**
             * Keydown handler to close drawer when key is escape.
             */
            MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {
              var keyCode = evt.keyCode,
                  key = evt.key;
              var isEscape = key === 'Escape' || keyCode === 27;
              if (isEscape) {
                this.close();
              }
            };
            /**
             * Handles the `transitionend` event when the drawer finishes opening/closing.
             */
            MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {
              var OPENING = constants_1.cssClasses.OPENING,
                  CLOSING = constants_1.cssClasses.CLOSING,
                  OPEN = constants_1.cssClasses.OPEN,
                  ANIMATE = constants_1.cssClasses.ANIMATE,
                  ROOT = constants_1.cssClasses.ROOT;
              // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.
              var isRootElement = this.isElement_(evt.target) && this.adapter.elementHasClass(evt.target, ROOT);
              if (!isRootElement) {
                return;
              }
              if (this.isClosing()) {
                this.adapter.removeClass(OPEN);
                this.closed_();
                this.adapter.restoreFocus();
                this.adapter.notifyClose();
              } else {
                this.adapter.focusActiveNavigationItem();
                this.opened_();
                this.adapter.notifyOpen();
              }
              this.adapter.removeClass(ANIMATE);
              this.adapter.removeClass(OPENING);
              this.adapter.removeClass(CLOSING);
            };
            /**
             * Extension point for when drawer finishes open animation.
             */
            MDCDismissibleDrawerFoundation.prototype.opened_ = function () {}; // tslint:disable-line:no-empty
            /**
             * Extension point for when drawer finishes close animation.
             */
            MDCDismissibleDrawerFoundation.prototype.closed_ = function () {}; // tslint:disable-line:no-empty
            /**
             * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
             */
            MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {
              var _this = this;
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = requestAnimationFrame(function () {
                _this.animationFrame_ = 0;
                clearTimeout(_this.animationTimer_);
                _this.animationTimer_ = setTimeout(callback, 0);
              });
            };
            MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {
              // In Edge, transitionend on ripple pseudo-elements yields a target without classList.
              return Boolean(element.classList);
            };
            return MDCDismissibleDrawerFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCDismissibleDrawerFoundation = MDCDismissibleDrawerFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCDismissibleDrawerFoundation;

          /***/ }),

        /***/ "./packages/mdc-drawer/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-drawer/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-drawer/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-drawer/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-drawer/constants.ts"));
          __export(__webpack_require__(/*! ./dismissible/foundation */ "./packages/mdc-drawer/dismissible/foundation.ts"));
          __export(__webpack_require__(/*! ./modal/foundation */ "./packages/mdc-drawer/modal/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-drawer/modal/foundation.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-drawer/modal/foundation.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! ../dismissible/foundation */ "./packages/mdc-drawer/dismissible/foundation.ts");
          /* istanbul ignore next: subclass is not a branch statement */
          var MDCModalDrawerFoundation = /** @class */function (_super) {
            __extends(MDCModalDrawerFoundation, _super);
            function MDCModalDrawerFoundation() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            /**
             * Handles click event on scrim.
             */
            MDCModalDrawerFoundation.prototype.handleScrimClick = function () {
              this.close();
            };
            /**
             * Called when drawer finishes open animation.
             */
            MDCModalDrawerFoundation.prototype.opened_ = function () {
              this.adapter.trapFocus();
            };
            /**
             * Called when drawer finishes close animation.
             */
            MDCModalDrawerFoundation.prototype.closed_ = function () {
              this.adapter.releaseFocus();
            };
            return MDCModalDrawerFoundation;
          }(foundation_1.MDCDismissibleDrawerFoundation);
          exports.MDCModalDrawerFoundation = MDCModalDrawerFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCModalDrawerFoundation;

          /***/ }),

        /***/ "./packages/mdc-drawer/util.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-drawer/util.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          function createFocusTrapInstance(surfaceEl, focusTrapFactory) {
            return focusTrapFactory(surfaceEl, {
              // Component handles focusing on active nav item.
              skipInitialFocus: true
            });
          }
          exports.createFocusTrapInstance = createFocusTrapInstance;

          /***/ }),

        /***/ "./packages/mdc-floating-label/component.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-floating-label/component.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-floating-label/foundation.ts");
          var MDCFloatingLabel = /** @class */function (_super) {
            __extends(MDCFloatingLabel, _super);
            function MDCFloatingLabel() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCFloatingLabel.attachTo = function (root) {
              return new MDCFloatingLabel(root);
            };
            /**
             * Styles the label to produce the label shake for errors.
             * @param shouldShake If true, shakes the label by adding a CSS class; otherwise, stops shaking by removing the class.
             */
            MDCFloatingLabel.prototype.shake = function (shouldShake) {
              this.foundation.shake(shouldShake);
            };
            /**
             * Styles the label to float/dock.
             * @param shouldFloat If true, floats the label by adding a CSS class; otherwise, docks it by removing the class.
             */
            MDCFloatingLabel.prototype.float = function (shouldFloat) {
              this.foundation.float(shouldFloat);
            };
            /**
             * Styles the label as required.
             * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
             */
            MDCFloatingLabel.prototype.setRequired = function (isRequired) {
              this.foundation.setRequired(isRequired);
            };
            MDCFloatingLabel.prototype.getWidth = function () {
              return this.foundation.getWidth();
            };
            MDCFloatingLabel.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                getWidth: function getWidth() {
                  return ponyfill_1.estimateScrollWidth(_this.root);
                },
                registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.listen(evtType, handler);
                },
                deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.unlisten(evtType, handler);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCFloatingLabelFoundation(adapter);
            };
            return MDCFloatingLabel;
          }(component_1.MDCComponent);
          exports.MDCFloatingLabel = MDCFloatingLabel;

          /***/ }),

        /***/ "./packages/mdc-floating-label/constants.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-floating-label/constants.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
            LABEL_REQUIRED: 'mdc-floating-label--required',
            LABEL_SHAKE: 'mdc-floating-label--shake',
            ROOT: 'mdc-floating-label'
          };

          /***/ }),

        /***/ "./packages/mdc-floating-label/foundation.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-floating-label/foundation.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-floating-label/constants.ts");
          var MDCFloatingLabelFoundation = /** @class */function (_super) {
            __extends(MDCFloatingLabelFoundation, _super);
            function MDCFloatingLabelFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
              _this.shakeAnimationEndHandler_ = function () {
                return _this.handleShakeAnimationEnd_();
              };
              return _this;
            }
            Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
              /**
               * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  getWidth: function getWidth() {
                    return 0;
                  },
                  registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                  },
                  deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCFloatingLabelFoundation.prototype.init = function () {
              this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);
            };
            MDCFloatingLabelFoundation.prototype.destroy = function () {
              this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);
            };
            /**
             * Returns the width of the label element.
             */
            MDCFloatingLabelFoundation.prototype.getWidth = function () {
              return this.adapter.getWidth();
            };
            /**
             * Styles the label to produce a shake animation to indicate an error.
             * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
             */
            MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
              var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
              if (shouldShake) {
                this.adapter.addClass(LABEL_SHAKE);
              } else {
                this.adapter.removeClass(LABEL_SHAKE);
              }
            };
            /**
             * Styles the label to float or dock.
             * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
             */
            MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
              var _a = MDCFloatingLabelFoundation.cssClasses,
                  LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE,
                  LABEL_SHAKE = _a.LABEL_SHAKE;
              if (shouldFloat) {
                this.adapter.addClass(LABEL_FLOAT_ABOVE);
              } else {
                this.adapter.removeClass(LABEL_FLOAT_ABOVE);
                this.adapter.removeClass(LABEL_SHAKE);
              }
            };
            /**
             * Styles the label as required.
             * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
             */
            MDCFloatingLabelFoundation.prototype.setRequired = function (isRequired) {
              var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
              if (isRequired) {
                this.adapter.addClass(LABEL_REQUIRED);
              } else {
                this.adapter.removeClass(LABEL_REQUIRED);
              }
            };
            MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd_ = function () {
              var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
              this.adapter.removeClass(LABEL_SHAKE);
            };
            return MDCFloatingLabelFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCFloatingLabelFoundation = MDCFloatingLabelFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCFloatingLabelFoundation;

          /***/ }),

        /***/ "./packages/mdc-floating-label/index.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-floating-label/index.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-floating-label/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-floating-label/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-floating-label/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-form-field/component.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-form-field/component.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-form-field/foundation.ts");
          var MDCFormField = /** @class */function (_super) {
            __extends(MDCFormField, _super);
            function MDCFormField() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCFormField.attachTo = function (root) {
              return new MDCFormField(root);
            };
            MDCFormField.prototype.labelEl = function () {
              var LABEL_SELECTOR = foundation_1.MDCFormFieldFoundation.strings.LABEL_SELECTOR;
              return this.root.querySelector(LABEL_SELECTOR);
            };
            MDCFormField.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                activateInputRipple: function activateInputRipple() {
                  if (_this.input && _this.input.ripple) {
                    _this.input.ripple.activate();
                  }
                },
                deactivateInputRipple: function deactivateInputRipple() {
                  if (_this.input && _this.input.ripple) {
                    _this.input.ripple.deactivate();
                  }
                },
                deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  var labelEl = _this.labelEl();
                  if (labelEl) {
                    labelEl.removeEventListener(evtType, handler);
                  }
                },
                registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  var labelEl = _this.labelEl();
                  if (labelEl) {
                    labelEl.addEventListener(evtType, handler);
                  }
                }
              };
              return new foundation_1.MDCFormFieldFoundation(adapter);
            };
            return MDCFormField;
          }(component_1.MDCComponent);
          exports.MDCFormField = MDCFormField;

          /***/ }),

        /***/ "./packages/mdc-form-field/constants.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-form-field/constants.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            ROOT: 'mdc-form-field'
          };
          exports.strings = {
            LABEL_SELECTOR: '.mdc-form-field > label'
          };

          /***/ }),

        /***/ "./packages/mdc-form-field/foundation.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-form-field/foundation.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-form-field/constants.ts");
          var MDCFormFieldFoundation = /** @class */function (_super) {
            __extends(MDCFormFieldFoundation, _super);
            function MDCFormFieldFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation.defaultAdapter), adapter)) || this;
              _this.click = function () {
                _this.handleClick();
              };
              return _this;
            }
            Object.defineProperty(MDCFormFieldFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFormFieldFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCFormFieldFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  activateInputRipple: function activateInputRipple() {
                    return undefined;
                  },
                  deactivateInputRipple: function deactivateInputRipple() {
                    return undefined;
                  },
                  deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                  },
                  registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCFormFieldFoundation.prototype.init = function () {
              this.adapter.registerInteractionHandler('click', this.click);
            };
            MDCFormFieldFoundation.prototype.destroy = function () {
              this.adapter.deregisterInteractionHandler('click', this.click);
            };
            MDCFormFieldFoundation.prototype.handleClick = function () {
              var _this = this;
              this.adapter.activateInputRipple();
              requestAnimationFrame(function () {
                _this.adapter.deactivateInputRipple();
              });
            };
            return MDCFormFieldFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCFormFieldFoundation = MDCFormFieldFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCFormFieldFoundation;

          /***/ }),

        /***/ "./packages/mdc-form-field/index.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-form-field/index.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-form-field/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-form-field/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-form-field/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-icon-button/component.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-icon-button/component.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-icon-button/foundation.ts");
          var strings = foundation_1.MDCIconButtonToggleFoundation.strings;
          var MDCIconButtonToggle = /** @class */function (_super) {
            __extends(MDCIconButtonToggle, _super);
            function MDCIconButtonToggle() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.rippleComponent = _this.createRipple();
              return _this;
            }
            MDCIconButtonToggle.attachTo = function (root) {
              return new MDCIconButtonToggle(root);
            };
            MDCIconButtonToggle.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleClick = function () {
                _this.foundation.handleClick();
              };
              this.listen('click', this.handleClick);
            };
            MDCIconButtonToggle.prototype.destroy = function () {
              this.unlisten('click', this.handleClick);
              this.ripple.destroy();
              _super.prototype.destroy.call(this);
            };
            MDCIconButtonToggle.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                notifyChange: function notifyChange(evtData) {
                  _this.emit(strings.CHANGE_EVENT, evtData);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                getAttr: function getAttr(attrName) {
                  return _this.root.getAttribute(attrName);
                },
                setAttr: function setAttr(attrName, attrValue) {
                  return _this.root.setAttribute(attrName, attrValue);
                }
              };
              return new foundation_1.MDCIconButtonToggleFoundation(adapter);
            };
            Object.defineProperty(MDCIconButtonToggle.prototype, "ripple", {
              get: function get() {
                return this.rippleComponent;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCIconButtonToggle.prototype, "on", {
              get: function get() {
                return this.foundation.isOn();
              },
              set: function set(isOn) {
                this.foundation.toggle(isOn);
              },
              enumerable: true,
              configurable: true
            });
            MDCIconButtonToggle.prototype.createRipple = function () {
              var ripple = new component_2.MDCRipple(this.root);
              ripple.unbounded = true;
              return ripple;
            };
            return MDCIconButtonToggle;
          }(component_1.MDCComponent);
          exports.MDCIconButtonToggle = MDCIconButtonToggle;

          /***/ }),

        /***/ "./packages/mdc-icon-button/constants.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-icon-button/constants.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            ICON_BUTTON_ON: 'mdc-icon-button--on',
            ROOT: 'mdc-icon-button'
          };
          exports.strings = {
            ARIA_LABEL: 'aria-label',
            ARIA_PRESSED: 'aria-pressed',
            DATA_ARIA_LABEL_OFF: 'data-aria-label-off',
            DATA_ARIA_LABEL_ON: 'data-aria-label-on',
            CHANGE_EVENT: 'MDCIconButtonToggle:change'
          };

          /***/ }),

        /***/ "./packages/mdc-icon-button/foundation.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-icon-button/foundation.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-icon-button/constants.ts");
          var MDCIconButtonToggleFoundation = /** @class */function (_super) {
            __extends(MDCIconButtonToggleFoundation, _super);
            function MDCIconButtonToggleFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;
              /**
               * Whether the icon button has an aria label that changes depending on
               * toggled state.
               */
              _this.hasToggledAriaLabel = false;
              return _this;
            }
            Object.defineProperty(MDCIconButtonToggleFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCIconButtonToggleFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCIconButtonToggleFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  notifyChange: function notifyChange() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  getAttr: function getAttr() {
                    return null;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCIconButtonToggleFoundation.prototype.init = function () {
              var ariaLabelOn = this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_ON);
              var ariaLabelOff = this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_OFF);
              if (ariaLabelOn && ariaLabelOff) {
                if (this.adapter.getAttr(constants_1.strings.ARIA_PRESSED) !== null) {
                  throw new Error('MDCIconButtonToggleFoundation: Button should not set ' + '`aria-pressed` if it has a toggled aria label.');
                }
                this.hasToggledAriaLabel = true;
              } else {
                this.adapter.setAttr(constants_1.strings.ARIA_PRESSED, String(this.isOn()));
              }
            };
            MDCIconButtonToggleFoundation.prototype.handleClick = function () {
              this.toggle();
              this.adapter.notifyChange({ isOn: this.isOn() });
            };
            MDCIconButtonToggleFoundation.prototype.isOn = function () {
              return this.adapter.hasClass(constants_1.cssClasses.ICON_BUTTON_ON);
            };
            MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {
              if (isOn === void 0) {
                isOn = !this.isOn();
              }
              // Toggle UI based on state.
              if (isOn) {
                this.adapter.addClass(constants_1.cssClasses.ICON_BUTTON_ON);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.ICON_BUTTON_ON);
              }
              // Toggle aria attributes based on state.
              if (this.hasToggledAriaLabel) {
                var ariaLabel = isOn ? this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_ON) : this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_OFF);
                this.adapter.setAttr(constants_1.strings.ARIA_LABEL, ariaLabel || '');
              } else {
                this.adapter.setAttr(constants_1.strings.ARIA_PRESSED, "" + isOn);
              }
            };
            return MDCIconButtonToggleFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCIconButtonToggleFoundation = MDCIconButtonToggleFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCIconButtonToggleFoundation;

          /***/ }),

        /***/ "./packages/mdc-icon-button/index.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-icon-button/index.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-icon-button/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-icon-button/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-icon-button/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-line-ripple/component.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-line-ripple/component.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-line-ripple/foundation.ts");
          var MDCLineRipple = /** @class */function (_super) {
            __extends(MDCLineRipple, _super);
            function MDCLineRipple() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCLineRipple.attachTo = function (root) {
              return new MDCLineRipple(root);
            };
            /**
             * Activates the line ripple
             */
            MDCLineRipple.prototype.activate = function () {
              this.foundation.activate();
            };
            /**
             * Deactivates the line ripple
             */
            MDCLineRipple.prototype.deactivate = function () {
              this.foundation.deactivate();
            };
            /**
             * Sets the transform origin given a user's click location.
             * The `rippleCenter` is the x-coordinate of the middle of the ripple.
             */
            MDCLineRipple.prototype.setRippleCenter = function (xCoordinate) {
              this.foundation.setRippleCenter(xCoordinate);
            };
            MDCLineRipple.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                setStyle: function setStyle(propertyName, value) {
                  return _this.root.style.setProperty(propertyName, value);
                },
                registerEventHandler: function registerEventHandler(evtType, handler) {
                  return _this.listen(evtType, handler);
                },
                deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
                  return _this.unlisten(evtType, handler);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCLineRippleFoundation(adapter);
            };
            return MDCLineRipple;
          }(component_1.MDCComponent);
          exports.MDCLineRipple = MDCLineRipple;

          /***/ }),

        /***/ "./packages/mdc-line-ripple/constants.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-line-ripple/constants.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
            LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating'
          };
          exports.cssClasses = cssClasses;

          /***/ }),

        /***/ "./packages/mdc-line-ripple/foundation.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-line-ripple/foundation.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-line-ripple/constants.ts");
          var MDCLineRippleFoundation = /** @class */function (_super) {
            __extends(MDCLineRippleFoundation, _super);
            function MDCLineRippleFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
              _this.transitionEndHandler_ = function (evt) {
                return _this.handleTransitionEnd(evt);
              };
              return _this;
            }
            Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
              /**
               * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  setStyle: function setStyle() {
                    return undefined;
                  },
                  registerEventHandler: function registerEventHandler() {
                    return undefined;
                  },
                  deregisterEventHandler: function deregisterEventHandler() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCLineRippleFoundation.prototype.init = function () {
              this.adapter.registerEventHandler('transitionend', this.transitionEndHandler_);
            };
            MDCLineRippleFoundation.prototype.destroy = function () {
              this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler_);
            };
            MDCLineRippleFoundation.prototype.activate = function () {
              this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
              this.adapter.addClass(constants_1.cssClasses.LINE_RIPPLE_ACTIVE);
            };
            MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
              this.adapter.setStyle('transform-origin', xCoordinate + "px center");
            };
            MDCLineRippleFoundation.prototype.deactivate = function () {
              this.adapter.addClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
            };
            MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
              // Wait for the line ripple to be either transparent or opaque
              // before emitting the animation end event
              var isDeactivating = this.adapter.hasClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
              if (evt.propertyName === 'opacity') {
                if (isDeactivating) {
                  this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_ACTIVE);
                  this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
                }
              }
            };
            return MDCLineRippleFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCLineRippleFoundation = MDCLineRippleFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCLineRippleFoundation;

          /***/ }),

        /***/ "./packages/mdc-line-ripple/index.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-line-ripple/index.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-line-ripple/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-line-ripple/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-line-ripple/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-linear-progress/component.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-linear-progress/component.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-linear-progress/foundation.ts");
          var MDCLinearProgress = /** @class */function (_super) {
            __extends(MDCLinearProgress, _super);
            function MDCLinearProgress() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCLinearProgress.attachTo = function (root) {
              return new MDCLinearProgress(root);
            };
            Object.defineProperty(MDCLinearProgress.prototype, "determinate", {
              set: function set(value) {
                this.foundation.setDeterminate(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLinearProgress.prototype, "progress", {
              set: function set(value) {
                this.foundation.setProgress(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLinearProgress.prototype, "buffer", {
              set: function set(value) {
                this.foundation.setBuffer(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLinearProgress.prototype, "reverse", {
              set: function set(value) {
                this.foundation.setReverse(value);
              },
              enumerable: true,
              configurable: true
            });
            MDCLinearProgress.prototype.open = function () {
              this.foundation.open();
            };
            MDCLinearProgress.prototype.close = function () {
              this.foundation.close();
            };
            MDCLinearProgress.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.root.addEventListener('transitionend', function () {
                _this.foundation.handleTransitionEnd();
              });
            };
            MDCLinearProgress.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                forceLayout: function forceLayout() {
                  _this.root.getBoundingClientRect();
                },
                setBufferBarStyle: function setBufferBarStyle(styleProperty, value) {
                  var bufferBar = _this.root.querySelector(foundation_1.MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);
                  if (bufferBar) {
                    bufferBar.style.setProperty(styleProperty, value);
                  }
                },
                setPrimaryBarStyle: function setPrimaryBarStyle(styleProperty, value) {
                  var primaryBar = _this.root.querySelector(foundation_1.MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
                  if (primaryBar) {
                    primaryBar.style.setProperty(styleProperty, value);
                  }
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                removeAttribute: function removeAttribute(attributeName) {
                  _this.root.removeAttribute(attributeName);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                setAttribute: function setAttribute(attributeName, value) {
                  _this.root.setAttribute(attributeName, value);
                },
                setStyle: function setStyle(name, value) {
                  _this.root.style.setProperty(name, value);
                },
                attachResizeObserver: function attachResizeObserver(callback) {
                  if (window.ResizeObserver) {
                    var ro = new ResizeObserver(callback);
                    ro.observe(_this.root);
                    return ro;
                  }
                  return null;
                },
                getWidth: function getWidth() {
                  return _this.root.offsetWidth;
                }
              };
              return new foundation_1.MDCLinearProgressFoundation(adapter);
            };
            return MDCLinearProgress;
          }(component_1.MDCComponent);
          exports.MDCLinearProgress = MDCLinearProgress;

          /***/ }),

        /***/ "./packages/mdc-linear-progress/constants.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-linear-progress/constants.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            CLOSED_CLASS: 'mdc-linear-progress--closed',
            CLOSED_ANIMATION_OFF_CLASS: 'mdc-linear-progress--closed-animation-off',
            INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
            REVERSED_CLASS: 'mdc-linear-progress--reversed',
            ANIMATION_READY_CLASS: 'mdc-linear-progress--animation-ready'
          };
          exports.strings = {
            ARIA_VALUEMAX: 'aria-valuemax',
            ARIA_VALUEMIN: 'aria-valuemin',
            ARIA_VALUENOW: 'aria-valuenow',
            BUFFER_BAR_SELECTOR: '.mdc-linear-progress__buffer-bar',
            FLEX_BASIS: 'flex-basis',
            PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar'
          };
// these are percentages pulled from keyframes.scss
          exports.animationDimensionPercentages = {
            PRIMARY_HALF: .8367142,
            PRIMARY_FULL: 2.00611057,
            SECONDARY_QUARTER: .37651913,
            SECONDARY_HALF: .84386165,
            SECONDARY_FULL: 1.60277782
          };

          /***/ }),

        /***/ "./packages/mdc-linear-progress/foundation.ts":
        /*!****************************************************!*\
  !*** ./packages/mdc-linear-progress/foundation.ts ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util_1 = __webpack_require__(/*! @material/animation/util */ "./packages/mdc-animation/util.ts");
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-linear-progress/constants.ts");
          var MDCLinearProgressFoundation = /** @class */function (_super) {
            __extends(MDCLinearProgressFoundation, _super);
            function MDCLinearProgressFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation.defaultAdapter), adapter)) || this;
              _this.observer = null;
              return _this;
            }
            Object.defineProperty(MDCLinearProgressFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLinearProgressFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCLinearProgressFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  attachResizeObserver: function attachResizeObserver() {
                    return null;
                  },
                  forceLayout: function forceLayout() {
                    return undefined;
                  },
                  getWidth: function getWidth() {
                    return 0;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  setBufferBarStyle: function setBufferBarStyle() {
                    return null;
                  },
                  setPrimaryBarStyle: function setPrimaryBarStyle() {
                    return null;
                  },
                  setStyle: function setStyle() {
                    return undefined;
                  },
                  removeAttribute: function removeAttribute() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setAttribute: function setAttribute() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCLinearProgressFoundation.prototype.init = function () {
              var _this = this;
              this.isDeterminate = !this.adapter.hasClass(constants_1.cssClasses.INDETERMINATE_CLASS);
              this.adapter.addClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
              this.isReversed = this.adapter.hasClass(constants_1.cssClasses.REVERSED_CLASS);
              this.progress = 0;
              this.buffer = 1;
              this.observer = this.adapter.attachResizeObserver(function (entries) {
                var e_1, _a;
                if (_this.isDeterminate) {
                  return;
                }
                try {
                  for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                    var entry = entries_1_1.value;
                    if (entry.contentRect) {
                      _this.calculateAndSetDimensions(entry.contentRect.width);
                    }
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                }
              });
              if (!this.isDeterminate && this.observer) {
                this.calculateAndSetDimensions(this.adapter.getWidth());
              }
            };
            MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {
              this.isDeterminate = isDeterminate;
              if (this.isDeterminate) {
                this.adapter.removeClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress.toString());
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUEMAX, '1');
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUEMIN, '0');
                this.setPrimaryBarProgress(this.progress);
                this.setBufferBarProgress(this.buffer);
                return;
              }
              if (this.isReversed) {
                // Adding/removing REVERSED_CLASS starts a translate animation, while
                // adding INDETERMINATE_CLASS starts a scale animation. Here, we reset
                // the translate animation in order to keep it in sync with the new
                // scale animation that will start from adding INDETERMINATE_CLASS
                // below.
                this.adapter.removeClass(constants_1.cssClasses.REVERSED_CLASS);
                this.adapter.forceLayout();
                this.adapter.addClass(constants_1.cssClasses.REVERSED_CLASS);
              }
              if (this.observer) {
                this.calculateAndSetDimensions(this.adapter.getWidth());
              }
              this.adapter.addClass(constants_1.cssClasses.INDETERMINATE_CLASS);
              this.adapter.removeAttribute(constants_1.strings.ARIA_VALUENOW);
              this.adapter.removeAttribute(constants_1.strings.ARIA_VALUEMAX);
              this.adapter.removeAttribute(constants_1.strings.ARIA_VALUEMIN);
              this.setPrimaryBarProgress(1);
              this.setBufferBarProgress(1);
            };
            MDCLinearProgressFoundation.prototype.getDeterminate = function () {
              return this.isDeterminate;
            };
            MDCLinearProgressFoundation.prototype.setProgress = function (value) {
              this.progress = value;
              if (this.isDeterminate) {
                this.setPrimaryBarProgress(value);
                this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, value.toString());
              }
            };
            MDCLinearProgressFoundation.prototype.getProgress = function () {
              return this.progress;
            };
            MDCLinearProgressFoundation.prototype.setBuffer = function (value) {
              this.buffer = value;
              if (this.isDeterminate) {
                this.setBufferBarProgress(value);
              }
            };
            MDCLinearProgressFoundation.prototype.setReverse = function (isReversed) {
              this.isReversed = isReversed;
              if (!this.isDeterminate) {
                // Adding ANIMATION_READY_CLASS starts a scale animation, while
                // adding/removing REVERSED_CLASS starts a translate animation. Here, we
                // reset the scale animation in order to keep it in sync with the new
                // translate animation that will start from adding/removing REVERSED_CLASS
                // below.
                this.restartAnimation();
              }
              if (this.isReversed) {
                this.adapter.addClass(constants_1.cssClasses.REVERSED_CLASS);
                return;
              }
              this.adapter.removeClass(constants_1.cssClasses.REVERSED_CLASS);
            };
            MDCLinearProgressFoundation.prototype.open = function () {
              this.adapter.removeClass(constants_1.cssClasses.CLOSED_CLASS);
              this.adapter.removeClass(constants_1.cssClasses.CLOSED_ANIMATION_OFF_CLASS);
            };
            MDCLinearProgressFoundation.prototype.close = function () {
              this.adapter.addClass(constants_1.cssClasses.CLOSED_CLASS);
            };
            /**
             * Handles the transitionend event emitted after `close()` is called and the
             * opacity fades out. This is so that animations are removed only after the
             * progress indicator is completely hidden.
             */
            MDCLinearProgressFoundation.prototype.handleTransitionEnd = function () {
              if (this.adapter.hasClass(constants_1.cssClasses.CLOSED_CLASS)) {
                this.adapter.addClass(constants_1.cssClasses.CLOSED_ANIMATION_OFF_CLASS);
              }
            };
            MDCLinearProgressFoundation.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              if (this.observer) {
                this.observer.disconnect();
              }
            };
            MDCLinearProgressFoundation.prototype.setPrimaryBarProgress = function (progressValue) {
              var value = "scaleX(" + progressValue + ")";
              // Accessing `window` without a `typeof` check will throw on Node
              // environments.
              var transformProp = typeof window !== 'undefined' ? util_1.getCorrectPropertyName(window, 'transform') : 'transform';
              this.adapter.setPrimaryBarStyle(transformProp, value);
            };
            MDCLinearProgressFoundation.prototype.setBufferBarProgress = function (progressValue) {
              var value = progressValue * 100 + "%";
              this.adapter.setBufferBarStyle(constants_1.strings.FLEX_BASIS, value);
            };
            MDCLinearProgressFoundation.prototype.restartAnimation = function () {
              this.adapter.removeClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
              this.adapter.forceLayout();
              this.adapter.addClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
            };
            MDCLinearProgressFoundation.prototype.calculateAndSetDimensions = function (width) {
              var primaryHalf = width * constants_1.animationDimensionPercentages.PRIMARY_HALF;
              var primaryFull = width * constants_1.animationDimensionPercentages.PRIMARY_FULL;
              var secondaryQuarter = width * constants_1.animationDimensionPercentages.SECONDARY_QUARTER;
              var secondaryHalf = width * constants_1.animationDimensionPercentages.SECONDARY_HALF;
              var secondaryFull = width * constants_1.animationDimensionPercentages.SECONDARY_FULL;
              this.adapter.setStyle('--mdc-linear-progress-primary-half', primaryHalf + "px");
              this.adapter.setStyle('--mdc-linear-progress-primary-half-neg', -primaryHalf + "px");
              this.adapter.setStyle('--mdc-linear-progress-primary-full', primaryFull + "px");
              this.adapter.setStyle('--mdc-linear-progress-primary-full-neg', -primaryFull + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-quarter', secondaryQuarter + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-quarter-neg', -secondaryQuarter + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-half', secondaryHalf + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-half-neg', -secondaryHalf + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-full', secondaryFull + "px");
              this.adapter.setStyle('--mdc-linear-progress-secondary-full-neg', -secondaryFull + "px");
              // need to restart animation for custom props to apply to keyframes
              this.restartAnimation();
            };
            return MDCLinearProgressFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCLinearProgressFoundation = MDCLinearProgressFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCLinearProgressFoundation;

          /***/ }),

        /***/ "./packages/mdc-linear-progress/index.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-linear-progress/index.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-linear-progress/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-linear-progress/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-linear-progress/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-list/component.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-list/component.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-list/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-list/foundation.ts");
          var MDCList = /** @class */function (_super) {
            __extends(MDCList, _super);
            function MDCList() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(MDCList.prototype, "vertical", {
              set: function set(value) {
                this.foundation.setVerticalOrientation(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "listElements", {
              get: function get() {
                return [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.LIST_ITEM_CLASS));
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "wrapFocus", {
              set: function set(value) {
                this.foundation.setWrapFocus(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "typeaheadInProgress", {
              /**
               * @return Whether typeahead is currently matching a user-specified prefix.
               */
              get: function get() {
                return this.foundation.isTypeaheadInProgress();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "hasTypeahead", {
              /**
               * Sets whether typeahead functionality is enabled on the list.
               * @param hasTypeahead Whether typeahead is enabled.
               */
              set: function set(hasTypeahead) {
                this.foundation.setHasTypeahead(hasTypeahead);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "singleSelection", {
              set: function set(isSingleSelectionList) {
                this.foundation.setSingleSelection(isSingleSelectionList);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCList.prototype, "selectedIndex", {
              get: function get() {
                return this.foundation.getSelectedIndex();
              },
              set: function set(index) {
                this.foundation.setSelectedIndex(index);
              },
              enumerable: true,
              configurable: true
            });
            MDCList.attachTo = function (root) {
              return new MDCList(root);
            };
            MDCList.prototype.initialSyncWithDOM = function () {
              this.handleClick_ = this.handleClickEvent_.bind(this);
              this.handleKeydown_ = this.handleKeydownEvent_.bind(this);
              this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);
              this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);
              this.listen('keydown', this.handleKeydown_);
              this.listen('click', this.handleClick_);
              this.listen('focusin', this.focusInEventListener_);
              this.listen('focusout', this.focusOutEventListener_);
              this.layout();
              this.initializeListType();
            };
            MDCList.prototype.destroy = function () {
              this.unlisten('keydown', this.handleKeydown_);
              this.unlisten('click', this.handleClick_);
              this.unlisten('focusin', this.focusInEventListener_);
              this.unlisten('focusout', this.focusOutEventListener_);
            };
            MDCList.prototype.layout = function () {
              var direction = this.root.getAttribute(constants_1.strings.ARIA_ORIENTATION);
              this.vertical = direction !== constants_1.strings.ARIA_ORIENTATION_HORIZONTAL;
              // List items need to have at least tabindex=-1 to be focusable.
              [].slice.call(this.root.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (el) {
                el.setAttribute('tabindex', '-1');
              });
              // Child button/a elements are not tabbable until the list item is focused.
              [].slice.call(this.root.querySelectorAll(constants_1.strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (el) {
                return el.setAttribute('tabindex', '-1');
              });
              this.foundation.layout();
            };
            /**
             * Extracts the primary text from a list item.
             * @param item The list item element.
             * @return The primary text in the element.
             */
            MDCList.prototype.getPrimaryText = function (item) {
              var primaryText = item.querySelector("." + constants_1.cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS);
              if (primaryText) {
                return primaryText.textContent || '';
              }
              var singleLineText = item.querySelector("." + constants_1.cssClasses.LIST_ITEM_TEXT_CLASS);
              return singleLineText && singleLineText.textContent || '';
            };
            /**
             * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
             */
            MDCList.prototype.initializeListType = function () {
              var _this = this;
              var checkboxListItems = this.root.querySelectorAll(constants_1.strings.ARIA_ROLE_CHECKBOX_SELECTOR);
              var radioSelectedListItem = this.root.querySelector(constants_1.strings.ARIA_CHECKED_RADIO_SELECTOR);
              if (checkboxListItems.length) {
                var preselectedItems = this.root.querySelectorAll(constants_1.strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
                this.selectedIndex = [].map.call(preselectedItems, function (listItem) {
                  return _this.listElements.indexOf(listItem);
                });
              } else if (radioSelectedListItem) {
                this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
              }
            };
            /**
             * Updates the list item at itemIndex to the desired isEnabled state.
             * @param itemIndex Index of the list item
             * @param isEnabled Sets the list item to enabled or disabled.
             */
            MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {
              this.foundation.setEnabled(itemIndex, isEnabled);
            };
            /**
             * Given the next desired character from the user, adds it to the typeahead
             * buffer. Then, attempts to find the next option matching the buffer. Wraps
             * around if at the end of options.
             *
             * @param nextChar The next character to add to the prefix buffer.
             * @param startingIndex The index from which to start matching. Defaults to
             *     the currently focused index.
             * @return The index of the matched item.
             */
            MDCList.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {
              return this.foundation.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */true);
            };
            MDCList.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClassForElementIndex: function addClassForElementIndex(index, className) {
                  var element = _this.listElements[index];
                  if (element) {
                    element.classList.add(className);
                  }
                },
                focusItemAtIndex: function focusItemAtIndex(index) {
                  var element = _this.listElements[index];
                  if (element) {
                    element.focus();
                  }
                },
                getAttributeForElementIndex: function getAttributeForElementIndex(index, attr) {
                  return _this.listElements[index].getAttribute(attr);
                },
                getFocusedElementIndex: function getFocusedElementIndex() {
                  return _this.listElements.indexOf(document.activeElement);
                },
                getListItemCount: function getListItemCount() {
                  return _this.listElements.length;
                },
                getPrimaryTextAtIndex: function getPrimaryTextAtIndex(index) {
                  return _this.getPrimaryText(_this.listElements[index]);
                },
                hasCheckboxAtIndex: function hasCheckboxAtIndex(index) {
                  var listItem = _this.listElements[index];
                  return !!listItem.querySelector(constants_1.strings.CHECKBOX_SELECTOR);
                },
                hasRadioAtIndex: function hasRadioAtIndex(index) {
                  var listItem = _this.listElements[index];
                  return !!listItem.querySelector(constants_1.strings.RADIO_SELECTOR);
                },
                isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex(index) {
                  var listItem = _this.listElements[index];
                  var toggleEl = listItem.querySelector(constants_1.strings.CHECKBOX_SELECTOR);
                  return toggleEl.checked;
                },
                isFocusInsideList: function isFocusInsideList() {
                  return _this.root !== document.activeElement && _this.root.contains(document.activeElement);
                },
                isRootFocused: function isRootFocused() {
                  return document.activeElement === _this.root;
                },
                listItemAtIndexHasClass: function listItemAtIndexHasClass(index, className) {
                  return _this.listElements[index].classList.contains(className);
                },
                notifyAction: function notifyAction(index) {
                  _this.emit(constants_1.strings.ACTION_EVENT, { index: index }, /** shouldBubble */true);
                },
                removeClassForElementIndex: function removeClassForElementIndex(index, className) {
                  var element = _this.listElements[index];
                  if (element) {
                    element.classList.remove(className);
                  }
                },
                setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
                  var element = _this.listElements[index];
                  if (element) {
                    element.setAttribute(attr, value);
                  }
                },
                setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {
                  var listItem = _this.listElements[index];
                  var toggleEl = listItem.querySelector(constants_1.strings.CHECKBOX_RADIO_SELECTOR);
                  toggleEl.checked = isChecked;
                  var event = document.createEvent('Event');
                  event.initEvent('change', true, true);
                  toggleEl.dispatchEvent(event);
                },
                setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
                  var element = _this.listElements[listItemIndex];
                  var listItemChildren = [].slice.call(element.querySelectorAll(constants_1.strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
                  listItemChildren.forEach(function (el) {
                    return el.setAttribute('tabindex', tabIndexValue);
                  });
                }
              };
              return new foundation_1.MDCListFoundation(adapter);
            };
            /**
             * Used to figure out which list item this event is targetting. Or returns -1 if
             * there is no list item
             */
            MDCList.prototype.getListItemIndex_ = function (evt) {
              var eventTarget = evt.target;
              var nearestParent = ponyfill_1.closest(eventTarget, "." + constants_1.cssClasses.LIST_ITEM_CLASS + ", ." + constants_1.cssClasses.ROOT);
              // Get the index of the element if it is a list item.
              if (nearestParent && ponyfill_1.matches(nearestParent, "." + constants_1.cssClasses.LIST_ITEM_CLASS)) {
                return this.listElements.indexOf(nearestParent);
              }
              return -1;
            };
            /**
             * Used to figure out which element was clicked before sending the event to the foundation.
             */
            MDCList.prototype.handleFocusInEvent_ = function (evt) {
              var index = this.getListItemIndex_(evt);
              this.foundation.handleFocusIn(evt, index);
            };
            /**
             * Used to figure out which element was clicked before sending the event to the foundation.
             */
            MDCList.prototype.handleFocusOutEvent_ = function (evt) {
              var index = this.getListItemIndex_(evt);
              this.foundation.handleFocusOut(evt, index);
            };
            /**
             * Used to figure out which element was focused when keydown event occurred before sending the event to the
             * foundation.
             */
            MDCList.prototype.handleKeydownEvent_ = function (evt) {
              var index = this.getListItemIndex_(evt);
              var target = evt.target;
              this.foundation.handleKeydown(evt, target.classList.contains(constants_1.cssClasses.LIST_ITEM_CLASS), index);
            };
            /**
             * Used to figure out which element was clicked before sending the event to the foundation.
             */
            MDCList.prototype.handleClickEvent_ = function (evt) {
              var index = this.getListItemIndex_(evt);
              var target = evt.target;
              // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.
              var toggleCheckbox = !ponyfill_1.matches(target, constants_1.strings.CHECKBOX_RADIO_SELECTOR);
              this.foundation.handleClick(index, toggleCheckbox);
            };
            return MDCList;
          }(component_1.MDCComponent);
          exports.MDCList = MDCList;

          /***/ }),

        /***/ "./packages/mdc-list/constants.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-list/constants.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
            LIST_ITEM_CLASS: 'mdc-list-item',
            LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
            LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
            LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
            LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
            ROOT: 'mdc-list'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ACTION_EVENT: 'MDCList:action',
            ARIA_CHECKED: 'aria-checked',
            ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
            ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
            ARIA_CURRENT: 'aria-current',
            ARIA_DISABLED: 'aria-disabled',
            ARIA_ORIENTATION: 'aria-orientation',
            ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
            ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
            ARIA_SELECTED: 'aria-selected',
            CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
            CHECKBOX_SELECTOR: 'input[type="checkbox"]',
            CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a\n  ",
            FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a,\n    ." + cssClasses.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled)\n  ",
            RADIO_SELECTOR: 'input[type="radio"]'
          };
          exports.strings = strings;
          var numbers = {
            UNSET_INDEX: -1,
            TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
          };
          exports.numbers = numbers;

          /***/ }),

        /***/ "./packages/mdc-list/events.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-list/events.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
          /**
           * Ensures that preventDefault is only called if the containing element
           * doesn't consume the event, and it will cause an unintended scroll.
           *
           * @param evt keyboard event to be prevented.
           */
          exports.preventDefaultEvent = function (evt) {
            var target = evt.target;
            if (!target) {
              return;
            }
            var tagName = ("" + target.tagName).toLowerCase();
            if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
              evt.preventDefault();
            }
          };

          /***/ }),

        /***/ "./packages/mdc-list/foundation.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-list/foundation.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
// TODO(b/152410470): Remove trailing underscores from private properties
// tslint:disable:strip-private-property-underscore
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var keyboard_1 = __webpack_require__(/*! @material/dom/keyboard */ "./packages/mdc-dom/keyboard.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-list/constants.ts");
          var events_1 = __webpack_require__(/*! ./events */ "./packages/mdc-list/events.ts");
          var typeahead = __importStar(__webpack_require__(/*! ./typeahead */ "./packages/mdc-list/typeahead.ts"));
          function isNumberArray(selectedIndex) {
            return selectedIndex instanceof Array;
          }
          var MDCListFoundation = /** @class */function (_super) {
            __extends(MDCListFoundation, _super);
            function MDCListFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;
              _this.wrapFocus_ = false;
              _this.isVertical_ = true;
              _this.isSingleSelectionList_ = false;
              _this.selectedIndex_ = constants_1.numbers.UNSET_INDEX;
              _this.focusedItemIndex = constants_1.numbers.UNSET_INDEX;
              _this.useActivatedClass_ = false;
              _this.useSelectedAttr_ = false;
              _this.ariaCurrentAttrValue_ = null;
              _this.isCheckboxList_ = false;
              _this.isRadioList_ = false;
              _this.hasTypeahead = false;
              // Transiently holds current typeahead prefix from user.
              _this.typeaheadState = typeahead.initState();
              _this.sortedIndexByFirstChar = new Map();
              return _this;
            }
            Object.defineProperty(MDCListFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCListFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCListFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCListFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClassForElementIndex: function addClassForElementIndex() {
                    return undefined;
                  },
                  focusItemAtIndex: function focusItemAtIndex() {
                    return undefined;
                  },
                  getAttributeForElementIndex: function getAttributeForElementIndex() {
                    return null;
                  },
                  getFocusedElementIndex: function getFocusedElementIndex() {
                    return 0;
                  },
                  getListItemCount: function getListItemCount() {
                    return 0;
                  },
                  hasCheckboxAtIndex: function hasCheckboxAtIndex() {
                    return false;
                  },
                  hasRadioAtIndex: function hasRadioAtIndex() {
                    return false;
                  },
                  isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex() {
                    return false;
                  },
                  isFocusInsideList: function isFocusInsideList() {
                    return false;
                  },
                  isRootFocused: function isRootFocused() {
                    return false;
                  },
                  listItemAtIndexHasClass: function listItemAtIndexHasClass() {
                    return false;
                  },
                  notifyAction: function notifyAction() {
                    return undefined;
                  },
                  removeClassForElementIndex: function removeClassForElementIndex() {
                    return undefined;
                  },
                  setAttributeForElementIndex: function setAttributeForElementIndex() {
                    return undefined;
                  },
                  setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex() {
                    return undefined;
                  },
                  setTabIndexForListItemChildren: function setTabIndexForListItemChildren() {
                    return undefined;
                  },
                  getPrimaryTextAtIndex: function getPrimaryTextAtIndex() {
                    return '';
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCListFoundation.prototype.layout = function () {
              if (this.adapter.getListItemCount() === 0) {
                return;
              }
              // TODO(b/172274142): consider all items when determining the list's type.
              if (this.adapter.hasCheckboxAtIndex(0)) {
                this.isCheckboxList_ = true;
              } else if (this.adapter.hasRadioAtIndex(0)) {
                this.isRadioList_ = true;
              } else {
                this.maybeInitializeSingleSelection();
              }
              if (this.hasTypeahead) {
                this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
              }
            };
            /**
             * Sets the private wrapFocus_ variable.
             */
            MDCListFoundation.prototype.setWrapFocus = function (value) {
              this.wrapFocus_ = value;
            };
            /**
             * Sets the isVertical_ private variable.
             */
            MDCListFoundation.prototype.setVerticalOrientation = function (value) {
              this.isVertical_ = value;
            };
            /**
             * Sets the isSingleSelectionList_ private variable.
             */
            MDCListFoundation.prototype.setSingleSelection = function (value) {
              this.isSingleSelectionList_ = value;
              if (value) {
                this.maybeInitializeSingleSelection();
              }
            };
            /**
             * Automatically determines whether the list is single selection list. If so,
             * initializes the internal state to match the selected item.
             */
            MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {
              for (var i = 0; i < this.adapter.getListItemCount(); i++) {
                var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, constants_1.cssClasses.LIST_ITEM_SELECTED_CLASS);
                var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, constants_1.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
                if (!(hasSelectedClass || hasActivatedClass)) {
                  continue;
                }
                if (hasActivatedClass) {
                  this.setUseActivatedClass(true);
                }
                this.isSingleSelectionList_ = true;
                this.selectedIndex_ = i;
                return;
              }
            };
            /**
             * Sets whether typeahead is enabled on the list.
             * @param hasTypeahead Whether typeahead is enabled.
             */
            MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {
              this.hasTypeahead = hasTypeahead;
              if (hasTypeahead) {
                this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
              }
            };
            /**
             * @return Whether typeahead is currently matching a user-specified prefix.
             */
            MDCListFoundation.prototype.isTypeaheadInProgress = function () {
              return this.hasTypeahead && typeahead.isTypingInProgress(this.typeaheadState);
            };
            /**
             * Sets the useActivatedClass_ private variable.
             */
            MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
              this.useActivatedClass_ = useActivated;
            };
            /**
             * Sets the useSelectedAttr_ private variable.
             */
            MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {
              this.useSelectedAttr_ = useSelected;
            };
            MDCListFoundation.prototype.getSelectedIndex = function () {
              return this.selectedIndex_;
            };
            MDCListFoundation.prototype.setSelectedIndex = function (index) {
              if (!this.isIndexValid_(index)) {
                return;
              }
              if (this.isCheckboxList_) {
                this.setCheckboxAtIndex_(index);
              } else if (this.isRadioList_) {
                this.setRadioAtIndex_(index);
              } else {
                this.setSingleSelectionAtIndex_(index);
              }
            };
            /**
             * Focus in handler for the list items.
             */
            MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {
              if (listItemIndex >= 0) {
                this.focusedItemIndex = listItemIndex;
                this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');
                this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');
              }
            };
            /**
             * Focus out handler for the list items.
             */
            MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {
              var _this = this;
              if (listItemIndex >= 0) {
                this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');
                this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');
              }
              /**
               * Between Focusout & Focusin some browsers do not have focus on any
               * element. Setting a delay to wait till the focus is moved to next element.
               */
              setTimeout(function () {
                if (!_this.adapter.isFocusInsideList()) {
                  _this.setTabindexToFirstSelectedOrFocusedItem();
                }
              }, 0);
            };
            /**
             * Key handler for the list.
             */
            MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {
              var _this = this;
              var isArrowLeft = keyboard_1.normalizeKey(event) === 'ArrowLeft';
              var isArrowUp = keyboard_1.normalizeKey(event) === 'ArrowUp';
              var isArrowRight = keyboard_1.normalizeKey(event) === 'ArrowRight';
              var isArrowDown = keyboard_1.normalizeKey(event) === 'ArrowDown';
              var isHome = keyboard_1.normalizeKey(event) === 'Home';
              var isEnd = keyboard_1.normalizeKey(event) === 'End';
              var isEnter = keyboard_1.normalizeKey(event) === 'Enter';
              var isSpace = keyboard_1.normalizeKey(event) === 'Spacebar';
              // Have to check both upper and lower case, because having caps lock on affects the value.
              var isLetterA = event.key === 'A' || event.key === 'a';
              if (this.adapter.isRootFocused()) {
                if (isArrowUp || isEnd) {
                  event.preventDefault();
                  this.focusLastElement();
                } else if (isArrowDown || isHome) {
                  event.preventDefault();
                  this.focusFirstElement();
                }
                if (this.hasTypeahead) {
                  var handleKeydownOpts = {
                    event: event,
                    focusItemAtIndex: function focusItemAtIndex(index) {
                      _this.focusItemAtIndex(index);
                    },
                    focusedItemIndex: -1,
                    isTargetListItem: isRootListItem,
                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                    isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                      return _this.adapter.listItemAtIndexHasClass(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                    }
                  };
                  typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
                }
                return;
              }
              var currentIndex = this.adapter.getFocusedElementIndex();
              if (currentIndex === -1) {
                currentIndex = listItemIndex;
                if (currentIndex < 0) {
                  // If this event doesn't have a mdc-list-item ancestor from the
                  // current list (not from a sublist), return early.
                  return;
                }
              }
              if (this.isVertical_ && isArrowDown || !this.isVertical_ && isArrowRight) {
                events_1.preventDefaultEvent(event);
                this.focusNextElement(currentIndex);
              } else if (this.isVertical_ && isArrowUp || !this.isVertical_ && isArrowLeft) {
                events_1.preventDefaultEvent(event);
                this.focusPrevElement(currentIndex);
              } else if (isHome) {
                events_1.preventDefaultEvent(event);
                this.focusFirstElement();
              } else if (isEnd) {
                events_1.preventDefaultEvent(event);
                this.focusLastElement();
              } else if (isLetterA && event.ctrlKey && this.isCheckboxList_) {
                event.preventDefault();
                this.toggleAll(this.selectedIndex_ === constants_1.numbers.UNSET_INDEX ? [] : this.selectedIndex_);
              } else if (isEnter || isSpace) {
                if (isRootListItem) {
                  // Return early if enter key is pressed on anchor element which triggers
                  // synthetic MouseEvent event.
                  var target = event.target;
                  if (target && target.tagName === 'A' && isEnter) {
                    return;
                  }
                  events_1.preventDefaultEvent(event);
                  if (this.adapter.listItemAtIndexHasClass(currentIndex, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS)) {
                    return;
                  }
                  if (!this.isTypeaheadInProgress()) {
                    if (this.isSelectableList_()) {
                      this.setSelectedIndexOnAction_(currentIndex);
                    }
                    this.adapter.notifyAction(currentIndex);
                  }
                }
              }
              if (this.hasTypeahead) {
                var handleKeydownOpts = {
                  event: event,
                  focusItemAtIndex: function focusItemAtIndex(index) {
                    _this.focusItemAtIndex(index);
                  },
                  focusedItemIndex: this.focusedItemIndex,
                  isTargetListItem: isRootListItem,
                  sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                  isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                    return _this.adapter.listItemAtIndexHasClass(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                  }
                };
                typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
              }
            };
            /**
             * Click handler for the list.
             */
            MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {
              if (index === constants_1.numbers.UNSET_INDEX) {
                return;
              }
              if (this.adapter.listItemAtIndexHasClass(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS)) {
                return;
              }
              if (this.isSelectableList_()) {
                this.setSelectedIndexOnAction_(index, toggleCheckbox);
              }
              this.adapter.notifyAction(index);
            };
            /**
             * Focuses the next element on the list.
             */
            MDCListFoundation.prototype.focusNextElement = function (index) {
              var count = this.adapter.getListItemCount();
              var nextIndex = index + 1;
              if (nextIndex >= count) {
                if (this.wrapFocus_) {
                  nextIndex = 0;
                } else {
                  // Return early because last item is already focused.
                  return index;
                }
              }
              this.focusItemAtIndex(nextIndex);
              return nextIndex;
            };
            /**
             * Focuses the previous element on the list.
             */
            MDCListFoundation.prototype.focusPrevElement = function (index) {
              var prevIndex = index - 1;
              if (prevIndex < 0) {
                if (this.wrapFocus_) {
                  prevIndex = this.adapter.getListItemCount() - 1;
                } else {
                  // Return early because first item is already focused.
                  return index;
                }
              }
              this.focusItemAtIndex(prevIndex);
              return prevIndex;
            };
            MDCListFoundation.prototype.focusFirstElement = function () {
              this.focusItemAtIndex(0);
              return 0;
            };
            MDCListFoundation.prototype.focusLastElement = function () {
              var lastIndex = this.adapter.getListItemCount() - 1;
              this.focusItemAtIndex(lastIndex);
              return lastIndex;
            };
            MDCListFoundation.prototype.focusInitialElement = function () {
              var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
              this.focusItemAtIndex(initialIndex);
              return initialIndex;
            };
            /**
             * @param itemIndex Index of the list item
             * @param isEnabled Sets the list item to enabled or disabled.
             */
            MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {
              if (!this.isIndexValid_(itemIndex)) {
                return;
              }
              if (isEnabled) {
                this.adapter.removeClassForElementIndex(itemIndex, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                this.adapter.setAttributeForElementIndex(itemIndex, constants_1.strings.ARIA_DISABLED, 'false');
              } else {
                this.adapter.addClassForElementIndex(itemIndex, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                this.adapter.setAttributeForElementIndex(itemIndex, constants_1.strings.ARIA_DISABLED, 'true');
              }
            };
            MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {
              if (this.selectedIndex_ === index) {
                return;
              }
              var selectedClassName = constants_1.cssClasses.LIST_ITEM_SELECTED_CLASS;
              if (this.useActivatedClass_) {
                selectedClassName = constants_1.cssClasses.LIST_ITEM_ACTIVATED_CLASS;
              }
              if (this.selectedIndex_ !== constants_1.numbers.UNSET_INDEX) {
                this.adapter.removeClassForElementIndex(this.selectedIndex_, selectedClassName);
              }
              this.setAriaForSingleSelectionAtIndex_(index);
              this.setTabindexAtIndex(index);
              if (index !== constants_1.numbers.UNSET_INDEX) {
                this.adapter.addClassForElementIndex(index, selectedClassName);
              }
              this.selectedIndex_ = index;
            };
            /**
             * Sets aria attribute for single selection at given index.
             */
            MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {
              // Detect the presence of aria-current and get the value only during list
              // initialization when it is in unset state.
              if (this.selectedIndex_ === constants_1.numbers.UNSET_INDEX) {
                this.ariaCurrentAttrValue_ = this.adapter.getAttributeForElementIndex(index, constants_1.strings.ARIA_CURRENT);
              }
              var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;
              var ariaAttribute = isAriaCurrent ? constants_1.strings.ARIA_CURRENT : constants_1.strings.ARIA_SELECTED;
              if (this.selectedIndex_ !== constants_1.numbers.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');
              }
              if (index !== constants_1.numbers.UNSET_INDEX) {
                var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';
                this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
              }
            };
            /**
             * Returns the attribute to use for indicating selection status.
             */
            MDCListFoundation.prototype.getSelectionAttribute = function () {
              return this.useSelectedAttr_ ? constants_1.strings.ARIA_SELECTED : constants_1.strings.ARIA_CHECKED;
            };
            /**
             * Toggles radio at give index. Radio doesn't change the checked state if it
             * is already checked.
             */
            MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {
              var selectionAttribute = this.getSelectionAttribute();
              this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
              if (this.selectedIndex_ !== constants_1.numbers.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex_, selectionAttribute, 'false');
              }
              this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');
              this.selectedIndex_ = index;
            };
            MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {
              var selectionAttribute = this.getSelectionAttribute();
              for (var i = 0; i < this.adapter.getListItemCount(); i++) {
                var isChecked = false;
                if (index.indexOf(i) >= 0) {
                  isChecked = true;
                }
                this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
                this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');
              }
              this.selectedIndex_ = index;
            };
            MDCListFoundation.prototype.setTabindexAtIndex = function (index) {
              if (this.focusedItemIndex === constants_1.numbers.UNSET_INDEX && index !== 0) {
                // If some list item was selected set first list item's tabindex to -1.
                // Generally, tabindex is set to 0 on first list item of list that has no
                // preselected items.
                this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');
              } else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {
                this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');
              }
              // Set the previous selection's tabindex to -1. We need this because
              // in selection menus that are not visible, programmatically setting an
              // option will not change focus but will change where tabindex should be 0.
              if (!(this.selectedIndex_ instanceof Array) && this.selectedIndex_ !== index) {
                this.adapter.setAttributeForElementIndex(this.selectedIndex_, 'tabindex', '-1');
              }
              if (index !== constants_1.numbers.UNSET_INDEX) {
                this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');
              }
            };
            /**
             * @return Return true if it is single selectin list, checkbox list or radio
             *     list.
             */
            MDCListFoundation.prototype.isSelectableList_ = function () {
              return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;
            };
            MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {
              var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
              this.setTabindexAtIndex(targetIndex);
            };
            MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {
              var targetIndex = this.focusedItemIndex >= 0 ? this.focusedItemIndex : 0;
              if (this.isSelectableList_()) {
                if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== constants_1.numbers.UNSET_INDEX) {
                  targetIndex = this.selectedIndex_;
                } else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {
                  targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) {
                    return Math.min(currentIndex, minIndex);
                  });
                }
              }
              return targetIndex;
            };
            MDCListFoundation.prototype.isIndexValid_ = function (index) {
              var _this = this;
              if (index instanceof Array) {
                if (!this.isCheckboxList_) {
                  throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
                }
                if (index.length === 0) {
                  return true;
                } else {
                  return index.some(function (i) {
                    return _this.isIndexInRange_(i);
                  });
                }
              } else if (typeof index === 'number') {
                if (this.isCheckboxList_) {
                  throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
                }
                return this.isIndexInRange_(index) || this.isSingleSelectionList_ && index === constants_1.numbers.UNSET_INDEX;
              } else {
                return false;
              }
            };
            MDCListFoundation.prototype.isIndexInRange_ = function (index) {
              var listSize = this.adapter.getListItemCount();
              return index >= 0 && index < listSize;
            };
            /**
             * Sets selected index on user action, toggles checkbox / radio based on
             * toggleCheckbox value. User interaction should not toggle list item(s) when
             * disabled.
             */
            MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {
              if (toggleCheckbox === void 0) {
                toggleCheckbox = true;
              }
              if (this.isCheckboxList_) {
                this.toggleCheckboxAtIndex_(index, toggleCheckbox);
              } else {
                this.setSelectedIndex(index);
              }
            };
            MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {
              var selectionAttribute = this.getSelectionAttribute();
              var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);
              if (toggleCheckbox) {
                isChecked = !isChecked;
                this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
              }
              this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false');
              // If none of the checkbox items are selected and selectedIndex is not
              // initialized then provide a default value.
              var selectedIndexes = this.selectedIndex_ === constants_1.numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();
              if (isChecked) {
                selectedIndexes.push(index);
              } else {
                selectedIndexes = selectedIndexes.filter(function (i) {
                  return i !== index;
                });
              }
              this.selectedIndex_ = selectedIndexes;
            };
            MDCListFoundation.prototype.focusItemAtIndex = function (index) {
              this.adapter.focusItemAtIndex(index);
              this.focusedItemIndex = index;
            };
            MDCListFoundation.prototype.toggleAll = function (currentlySelectedIndexes) {
              var count = this.adapter.getListItemCount();
              // If all items are selected, deselect everything.
              if (currentlySelectedIndexes.length === count) {
                this.setCheckboxAtIndex_([]);
              } else {
                // Otherwise select all enabled options.
                var allIndexes = [];
                for (var i = 0; i < count; i++) {
                  if (!this.adapter.listItemAtIndexHasClass(i, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS) || currentlySelectedIndexes.indexOf(i) > -1) {
                    allIndexes.push(i);
                  }
                }
                this.setCheckboxAtIndex_(allIndexes);
              }
            };
            /**
             * Given the next desired character from the user, adds it to the typeahead
             * buffer. Then, attempts to find the next option matching the buffer. Wraps
             * around if at the end of options.
             *
             * @param nextChar The next character to add to the prefix buffer.
             * @param startingIndex The index from which to start matching. Only relevant
             *     when starting a new match sequence. To start a new match sequence,
             *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
             *     to clear after a set interval defined in list foundation. Defaults to
             *     the currently focused index.
             * @return The index of the matched item, or -1 if no match.
             */
            MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {
              var _this = this;
              if (skipFocus === void 0) {
                skipFocus = false;
              }
              var opts = {
                focusItemAtIndex: function focusItemAtIndex(index) {
                  _this.focusItemAtIndex(index);
                },
                focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
                nextChar: nextChar,
                sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                skipFocus: skipFocus,
                isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                  return _this.adapter.listItemAtIndexHasClass(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                }
              };
              return typeahead.matchItem(opts, this.typeaheadState);
            };
            /**
             * Initializes the MDCListTextAndIndex data structure by indexing the current
             * list items by primary text.
             *
             * @return The primary texts of all the list items sorted by first character.
             */
            MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {
              return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
            };
            /**
             * Clears the typeahead buffer.
             */
            MDCListFoundation.prototype.clearTypeaheadBuffer = function () {
              typeahead.clearBuffer(this.typeaheadState);
            };
            return MDCListFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCListFoundation = MDCListFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCListFoundation;

          /***/ }),

        /***/ "./packages/mdc-list/index.ts":
        /*!************************************!*\
  !*** ./packages/mdc-list/index.ts ***!
  \************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-list/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-list/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-list/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-list/typeahead.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-list/typeahead.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var keyboard_1 = __webpack_require__(/*! @material/dom/keyboard */ "./packages/mdc-dom/keyboard.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-list/constants.ts");
          var events_1 = __webpack_require__(/*! ./events */ "./packages/mdc-list/events.ts");
          /**
           * Initializes a state object for typeahead. Use the same reference for calls to
           * typeahead functions.
           *
           * @return The current state of the typeahead process. Each state reference
           *     represents a typeahead instance as the reference is typically mutated
           *     in-place.
           */
          function initState() {
            var state = {
              bufferClearTimeout: 0,
              currentFirstChar: '',
              sortedIndexCursor: 0,
              typeaheadBuffer: ''
            };
            return state;
          }
          exports.initState = initState;
          /**
           * Initializes typeahead state by indexing the current list items by primary
           * text into the sortedIndexByFirstChar data structure.
           *
           * @param listItemCount numer of items in the list
           * @param getPrimaryTextByItemIndex function that returns the primary text at a
           *     given index
           *
           * @return Map that maps the first character of the primary text to the full
           *     list text and it's index
           */
          function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
            var sortedIndexByFirstChar = new Map();
            // Aggregate item text to index mapping
            for (var i = 0; i < listItemCount; i++) {
              var primaryText = getPrimaryTextByItemIndex(i).trim();
              if (!primaryText) {
                continue;
              }
              var firstChar = primaryText[0].toLowerCase();
              if (!sortedIndexByFirstChar.has(firstChar)) {
                sortedIndexByFirstChar.set(firstChar, []);
              }
              sortedIndexByFirstChar.get(firstChar).push({ text: primaryText.toLowerCase(), index: i });
            }
            // Sort the mapping
            // TODO(b/157162694): Investigate replacing forEach with Map.values()
            sortedIndexByFirstChar.forEach(function (values) {
              values.sort(function (first, second) {
                return first.index - second.index;
              });
            });
            return sortedIndexByFirstChar;
          }
          exports.initSortedIndex = initSortedIndex;
          /**
           * Given the next desired character from the user, it attempts to find the next
           * list option matching the buffer. Wraps around if at the end of options.
           *
           * @param opts Options and accessors
           *   - nextChar - the next character to match against items
           *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
           *   - focusedItemIndex - the index of the currently focused item
           *   - focusItemAtIndex - function that focuses a list item at given index
           *   - skipFocus - whether or not to focus the matched item
           *   - isItemAtIndexDisabled - function that determines whether an item at a
           *        given index is disabled
           * @param state The typeahead state instance. See `initState`.
           *
           * @return The index of the matched item, or -1 if no match.
           */
          function matchItem(opts, state) {
            var nextChar = opts.nextChar,
                focusItemAtIndex = opts.focusItemAtIndex,
                sortedIndexByFirstChar = opts.sortedIndexByFirstChar,
                focusedItemIndex = opts.focusedItemIndex,
                skipFocus = opts.skipFocus,
                isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
            clearTimeout(state.bufferClearTimeout);
            state.bufferClearTimeout = setTimeout(function () {
              clearBuffer(state);
            }, constants_1.numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
            state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
            var index;
            if (state.typeaheadBuffer.length === 1) {
              index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
            } else {
              index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
            }
            if (index !== -1 && !skipFocus) {
              focusItemAtIndex(index);
            }
            return index;
          }
          exports.matchItem = matchItem;
          /**
           * Matches the user's single input character in the buffer to the
           * next option that begins with such character. Wraps around if at
           * end of options. Returns -1 if no match is found.
           */
          function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
            var firstChar = state.typeaheadBuffer[0];
            var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
            if (!itemsMatchingFirstChar) {
              return -1;
            }
            // Has the same firstChar been recently matched?
            // Also, did starting index remain the same between key presses?
            // If both hold true, simply increment index.
            if (firstChar === state.currentFirstChar && itemsMatchingFirstChar[state.sortedIndexCursor].index === focusedItemIndex) {
              state.sortedIndexCursor = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
              var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
              if (!isItemAtIndexDisabled(newIndex)) {
                return newIndex;
              }
            }
            // If we're here, it means one of the following happened:
            // - either firstChar or startingIndex has changed, invalidating the
            // cursor.
            // - The next item of typeahead is disabled, so we have to look further.
            state.currentFirstChar = firstChar;
            var newCursorPosition = -1;
            var cursorPosition;
            // Find the first non-disabled item as a fallback.
            for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
              if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                newCursorPosition = cursorPosition;
                break;
              }
            }
            // Advance cursor to first item matching the firstChar that is positioned
            // after starting item. Cursor is unchanged from fallback if there's no
            // such item.
            for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
              if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex && !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                newCursorPosition = cursorPosition;
                break;
              }
            }
            if (newCursorPosition !== -1) {
              state.sortedIndexCursor = newCursorPosition;
              return itemsMatchingFirstChar[state.sortedIndexCursor].index;
            }
            return -1;
          }
          /**
           * Attempts to find the next item that matches all of the typeahead buffer.
           * Wraps around if at end of options. Returns -1 if no match is found.
           */
          function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
            var firstChar = state.typeaheadBuffer[0];
            var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
            if (!itemsMatchingFirstChar) {
              return -1;
            }
            // Do nothing if text already matches
            var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
            if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 && !isItemAtIndexDisabled(startingItem.index)) {
              return startingItem.index;
            }
            // Find next item that matches completely; if no match, we'll eventually
            // loop around to same position
            var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
            var nextCursorPosition = -1;
            while (cursorPosition !== state.sortedIndexCursor) {
              var currentItem = itemsMatchingFirstChar[cursorPosition];
              var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
              var isEnabled = !isItemAtIndexDisabled(currentItem.index);
              if (matches && isEnabled) {
                nextCursorPosition = cursorPosition;
                break;
              }
              cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
            }
            if (nextCursorPosition !== -1) {
              state.sortedIndexCursor = nextCursorPosition;
              return itemsMatchingFirstChar[state.sortedIndexCursor].index;
            }
            return -1;
          }
          /**
           * Whether or not the given typeahead instaance state is currently typing.
           *
           * @param state The typeahead state instance. See `initState`.
           */
          function isTypingInProgress(state) {
            return state.typeaheadBuffer.length > 0;
          }
          exports.isTypingInProgress = isTypingInProgress;
          /**
           * Clears the typeahaed buffer so that it resets item matching to the first
           * character.
           *
           * @param state The typeahead state instance. See `initState`.
           */
          function clearBuffer(state) {
            state.typeaheadBuffer = '';
          }
          exports.clearBuffer = clearBuffer;
          /**
           * Given a keydown event, it calculates whether or not to automatically focus a
           * list item depending on what was typed mimicing the typeahead functionality of
           * a standard <select> element that is open.
           *
           * @param opts Options and accessors
           *   - event - the KeyboardEvent to handle and parse
           *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
           *   - focusedItemIndex - the index of the currently focused item
           *   - focusItemAtIndex - function that focuses a list item at given index
           *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item
           *      is disabled
           *   - isTargetListItem - whether or not the event target is a list item
           * @param state The typeahead state instance. See `initState`.
           *
           * @returns index of the item matched by the keydown. -1 if not matched.
           */
          function handleKeydown(opts, state) {
            var event = opts.event,
                isTargetListItem = opts.isTargetListItem,
                focusedItemIndex = opts.focusedItemIndex,
                focusItemAtIndex = opts.focusItemAtIndex,
                sortedIndexByFirstChar = opts.sortedIndexByFirstChar,
                isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
            var isArrowLeft = keyboard_1.normalizeKey(event) === 'ArrowLeft';
            var isArrowUp = keyboard_1.normalizeKey(event) === 'ArrowUp';
            var isArrowRight = keyboard_1.normalizeKey(event) === 'ArrowRight';
            var isArrowDown = keyboard_1.normalizeKey(event) === 'ArrowDown';
            var isHome = keyboard_1.normalizeKey(event) === 'Home';
            var isEnd = keyboard_1.normalizeKey(event) === 'End';
            var isEnter = keyboard_1.normalizeKey(event) === 'Enter';
            var isSpace = keyboard_1.normalizeKey(event) === 'Spacebar';
            if (isArrowLeft || isArrowUp || isArrowRight || isArrowDown || isHome || isEnd || isEnter) {
              return -1;
            }
            var isCharacterKey = !isSpace && event.key.length === 1;
            if (isCharacterKey) {
              events_1.preventDefaultEvent(event);
              var matchItemOpts = {
                focusItemAtIndex: focusItemAtIndex,
                focusedItemIndex: focusedItemIndex,
                nextChar: event.key.toLowerCase(),
                sortedIndexByFirstChar: sortedIndexByFirstChar,
                skipFocus: false,
                isItemAtIndexDisabled: isItemAtIndexDisabled
              };
              return matchItem(matchItemOpts, state);
            }
            if (!isSpace) {
              return -1;
            }
            if (isTargetListItem) {
              events_1.preventDefaultEvent(event);
            }
            var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
            if (typeaheadOnListItem) {
              var matchItemOpts = {
                focusItemAtIndex: focusItemAtIndex,
                focusedItemIndex: focusedItemIndex,
                nextChar: ' ',
                sortedIndexByFirstChar: sortedIndexByFirstChar,
                skipFocus: false,
                isItemAtIndexDisabled: isItemAtIndexDisabled
              };
              // space participates in typeahead matching if in rapid typing mode
              return matchItem(matchItemOpts, state);
            }
            return -1;
          }
          exports.handleKeydown = handleKeydown;

          /***/ }),

        /***/ "./packages/mdc-menu-surface/component.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-menu-surface/component.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-menu-surface/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-menu-surface/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-menu-surface/util.ts"));
          var MDCMenuSurface = /** @class */function (_super) {
            __extends(MDCMenuSurface, _super);
            function MDCMenuSurface() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCMenuSurface.attachTo = function (root) {
              return new MDCMenuSurface(root);
            };
            MDCMenuSurface.prototype.initialSyncWithDOM = function () {
              var _this = this;
              var parentEl = this.root.parentElement;
              this.anchorElement = parentEl && parentEl.classList.contains(constants_1.cssClasses.ANCHOR) ? parentEl : null;
              if (this.root.classList.contains(constants_1.cssClasses.FIXED)) {
                this.setFixedPosition(true);
              }
              this.handleKeydown = function (event) {
                _this.foundation.handleKeydown(event);
              };
              this.handleBodyClick = function (event) {
                _this.foundation.handleBodyClick(event);
              };
              // capture so that no race between handleBodyClick and quickOpen when
              // menusurface opened on button click which registers this listener
              this.registerBodyClickListener = function () {
                document.body.addEventListener('click', _this.handleBodyClick, { capture: true });
              };
              this.deregisterBodyClickListener = function () {
                document.body.removeEventListener('click', _this.handleBodyClick, { capture: true });
              };
              this.listen('keydown', this.handleKeydown);
              this.listen(constants_1.strings.OPENED_EVENT, this.registerBodyClickListener);
              this.listen(constants_1.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
            };
            MDCMenuSurface.prototype.destroy = function () {
              this.unlisten('keydown', this.handleKeydown);
              this.unlisten(constants_1.strings.OPENED_EVENT, this.registerBodyClickListener);
              this.unlisten(constants_1.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
              _super.prototype.destroy.call(this);
            };
            MDCMenuSurface.prototype.isOpen = function () {
              return this.foundation.isOpen();
            };
            MDCMenuSurface.prototype.open = function () {
              this.foundation.open();
            };
            MDCMenuSurface.prototype.close = function (skipRestoreFocus) {
              if (skipRestoreFocus === void 0) {
                skipRestoreFocus = false;
              }
              this.foundation.close(skipRestoreFocus);
            };
            Object.defineProperty(MDCMenuSurface.prototype, "quickOpen", {
              set: function set(quickOpen) {
                this.foundation.setQuickOpen(quickOpen);
              },
              enumerable: true,
              configurable: true
            });
            /** Sets the foundation to use page offsets for an positioning when the menu is hoisted to the body. */
            MDCMenuSurface.prototype.setIsHoisted = function (isHoisted) {
              this.foundation.setIsHoisted(isHoisted);
            };
            /** Sets the element that the menu-surface is anchored to. */
            MDCMenuSurface.prototype.setMenuSurfaceAnchorElement = function (element) {
              this.anchorElement = element;
            };
            /** Sets the menu-surface to position: fixed. */
            MDCMenuSurface.prototype.setFixedPosition = function (isFixed) {
              if (isFixed) {
                this.root.classList.add(constants_1.cssClasses.FIXED);
              } else {
                this.root.classList.remove(constants_1.cssClasses.FIXED);
              }
              this.foundation.setFixedPosition(isFixed);
            };
            /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */
            MDCMenuSurface.prototype.setAbsolutePosition = function (x, y) {
              this.foundation.setAbsolutePosition(x, y);
              this.setIsHoisted(true);
            };
            /**
             * @param corner Default anchor corner alignment of top-left surface corner.
             */
            MDCMenuSurface.prototype.setAnchorCorner = function (corner) {
              this.foundation.setAnchorCorner(corner);
            };
            MDCMenuSurface.prototype.setAnchorMargin = function (margin) {
              this.foundation.setAnchorMargin(margin);
            };
            MDCMenuSurface.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                hasAnchor: function hasAnchor() {
                  return !!_this.anchorElement;
                },
                notifyClose: function notifyClose() {
                  return _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
                },
                notifyOpen: function notifyOpen() {
                  return _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
                },
                isElementInContainer: function isElementInContainer(el) {
                  return _this.root.contains(el);
                },
                isRtl: function isRtl() {
                  return getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
                },
                setTransformOrigin: function setTransformOrigin(origin) {
                  var propertyName = util.getTransformPropertyName(window) + "-origin";
                  _this.root.style.setProperty(propertyName, origin);
                },
                isFocused: function isFocused() {
                  return document.activeElement === _this.root;
                },
                saveFocus: function saveFocus() {
                  _this.previousFocus = document.activeElement;
                },
                restoreFocus: function restoreFocus() {
                  if (_this.root.contains(document.activeElement)) {
                    if (_this.previousFocus && _this.previousFocus.focus) {
                      _this.previousFocus.focus();
                    }
                  }
                },
                getInnerDimensions: function getInnerDimensions() {
                  return {
                    width: _this.root.offsetWidth,
                    height: _this.root.offsetHeight
                  };
                },
                getAnchorDimensions: function getAnchorDimensions() {
                  return _this.anchorElement ? _this.anchorElement.getBoundingClientRect() : null;
                },
                getWindowDimensions: function getWindowDimensions() {
                  return { width: window.innerWidth, height: window.innerHeight };
                },
                getBodyDimensions: function getBodyDimensions() {
                  return { width: document.body.clientWidth, height: document.body.clientHeight };
                },
                getWindowScroll: function getWindowScroll() {
                  return { x: window.pageXOffset, y: window.pageYOffset };
                },
                setPosition: function setPosition(position) {
                  var rootHTML = _this.root;
                  rootHTML.style.left = 'left' in position ? position.left + "px" : '';
                  rootHTML.style.right = 'right' in position ? position.right + "px" : '';
                  rootHTML.style.top = 'top' in position ? position.top + "px" : '';
                  rootHTML.style.bottom = 'bottom' in position ? position.bottom + "px" : '';
                },
                setMaxHeight: function setMaxHeight(height) {
                  _this.root.style.maxHeight = height;
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCMenuSurfaceFoundation(adapter);
            };
            return MDCMenuSurface;
          }(component_1.MDCComponent);
          exports.MDCMenuSurface = MDCMenuSurface;

          /***/ }),

        /***/ "./packages/mdc-menu-surface/constants.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-menu-surface/constants.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ANCHOR: 'mdc-menu-surface--anchor',
            ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
            ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
            FIXED: 'mdc-menu-surface--fixed',
            IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',
            OPEN: 'mdc-menu-surface--open',
            ROOT: 'mdc-menu-surface'
          };
          exports.cssClasses = cssClasses;
// tslint:disable:object-literal-sort-keys
          var strings = {
            CLOSED_EVENT: 'MDCMenuSurface:closed',
            OPENED_EVENT: 'MDCMenuSurface:opened',
            FOCUSABLE_ELEMENTS: ['button:not(:disabled)', '[href]:not([aria-disabled="true"])', 'input:not(:disabled)', 'select:not(:disabled)', 'textarea:not(:disabled)', '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(', ')
          };
          exports.strings = strings;
// tslint:enable:object-literal-sort-keys
          var numbers = {
            /** Total duration of menu-surface open animation. */
            TRANSITION_OPEN_DURATION: 120,
            /** Total duration of menu-surface close animation. */
            TRANSITION_CLOSE_DURATION: 75,
            /** Margin left to the edge of the viewport when menu-surface is at maximum possible height. Also used as a viewport margin. */
            MARGIN_TO_EDGE: 32,
            /** Ratio of anchor width to menu-surface width for switching from corner positioning to center positioning. */
            ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67
          };
          exports.numbers = numbers;
          /**
           * Enum for bits in the {@see Corner) bitmap.
 */
          var CornerBit;
          (function (CornerBit) {
            CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
            CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
            CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
            CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
          })(CornerBit || (CornerBit = {}));
          exports.CornerBit = CornerBit;
          /**
           * Enum for representing an element corner for positioning the menu-surface.
           *
           * The START constants map to LEFT if element directionality is left
           * to right and RIGHT if the directionality is right to left.
           * Likewise END maps to RIGHT or LEFT depending on the directionality.
           */
          var Corner;
          (function (Corner) {
            Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
            Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
            Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
            Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
            Corner[Corner["TOP_START"] = 8] = "TOP_START";
            Corner[Corner["TOP_END"] = 12] = "TOP_END";
            Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
            Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
          })(Corner || (Corner = {}));
          exports.Corner = Corner;

          /***/ }),

        /***/ "./packages/mdc-menu-surface/foundation.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-menu-surface/foundation.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-menu-surface/constants.ts");
          var MDCMenuSurfaceFoundation = /** @class */function (_super) {
            __extends(MDCMenuSurfaceFoundation, _super);
            function MDCMenuSurfaceFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;
              _this.isSurfaceOpen = false;
              _this.isQuickOpen = false;
              _this.isHoistedElement = false;
              _this.isFixedPosition = false;
              _this.openAnimationEndTimerId = 0;
              _this.closeAnimationEndTimerId = 0;
              _this.animationRequestId = 0;
              _this.anchorCorner = constants_1.Corner.TOP_START;
              /**
               * Corner of the menu surface to which menu surface is attached to anchor.
               *
               *  Anchor corner --->+----------+
               *                    |  ANCHOR  |
               *                    +----------+
               *  Origin corner --->+--------------+
               *                    |              |
               *                    |              |
               *                    | MENU SURFACE |
               *                    |              |
               *                    |              |
               *                    +--------------+
               */
              _this.originCorner = constants_1.Corner.TOP_START;
              _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
              _this.position = { x: 0, y: 0 };
              return _this;
            }
            Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
              get: function get() {
                return constants_1.Corner;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
              /**
               * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  hasAnchor: function hasAnchor() {
                    return false;
                  },
                  isElementInContainer: function isElementInContainer() {
                    return false;
                  },
                  isFocused: function isFocused() {
                    return false;
                  },
                  isRtl: function isRtl() {
                    return false;
                  },
                  getInnerDimensions: function getInnerDimensions() {
                    return { height: 0, width: 0 };
                  },
                  getAnchorDimensions: function getAnchorDimensions() {
                    return null;
                  },
                  getWindowDimensions: function getWindowDimensions() {
                    return { height: 0, width: 0 };
                  },
                  getBodyDimensions: function getBodyDimensions() {
                    return { height: 0, width: 0 };
                  },
                  getWindowScroll: function getWindowScroll() {
                    return { x: 0, y: 0 };
                  },
                  setPosition: function setPosition() {
                    return undefined;
                  },
                  setMaxHeight: function setMaxHeight() {
                    return undefined;
                  },
                  setTransformOrigin: function setTransformOrigin() {
                    return undefined;
                  },
                  saveFocus: function saveFocus() {
                    return undefined;
                  },
                  restoreFocus: function restoreFocus() {
                    return undefined;
                  },
                  notifyClose: function notifyClose() {
                    return undefined;
                  },
                  notifyOpen: function notifyOpen() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCMenuSurfaceFoundation.prototype.init = function () {
              var _a = MDCMenuSurfaceFoundation.cssClasses,
                  ROOT = _a.ROOT,
                  OPEN = _a.OPEN;
              if (!this.adapter.hasClass(ROOT)) {
                throw new Error(ROOT + " class required in root element.");
              }
              if (this.adapter.hasClass(OPEN)) {
                this.isSurfaceOpen = true;
              }
            };
            MDCMenuSurfaceFoundation.prototype.destroy = function () {
              clearTimeout(this.openAnimationEndTimerId);
              clearTimeout(this.closeAnimationEndTimerId);
              // Cancel any currently running animations.
              cancelAnimationFrame(this.animationRequestId);
            };
            /**
             * @param corner Default anchor corner alignment of top-left menu surface corner.
             */
            MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
              this.anchorCorner = corner;
            };
            /**
             * Flip menu corner horizontally.
             */
            MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function () {
              this.originCorner = this.originCorner ^ constants_1.CornerBit.RIGHT;
            };
            /**
             * @param margin Set of margin values from anchor.
             */
            MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
              this.anchorMargin.top = margin.top || 0;
              this.anchorMargin.right = margin.right || 0;
              this.anchorMargin.bottom = margin.bottom || 0;
              this.anchorMargin.left = margin.left || 0;
            };
            /** Used to indicate if the menu-surface is hoisted to the body. */
            MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
              this.isHoistedElement = isHoisted;
            };
            /** Used to set the menu-surface calculations based on a fixed position menu. */
            MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
              this.isFixedPosition = isFixedPosition;
            };
            /** Sets the menu-surface position on the page. */
            MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
              this.position.x = this.isFinite(x) ? x : 0;
              this.position.y = this.isFinite(y) ? y : 0;
            };
            MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
              this.isQuickOpen = quickOpen;
            };
            MDCMenuSurfaceFoundation.prototype.isOpen = function () {
              return this.isSurfaceOpen;
            };
            /**
             * Open the menu surface.
             */
            MDCMenuSurfaceFoundation.prototype.open = function () {
              var _this = this;
              if (this.isSurfaceOpen) {
                return;
              }
              this.adapter.saveFocus();
              if (this.isQuickOpen) {
                this.isSurfaceOpen = true;
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                this.dimensions = this.adapter.getInnerDimensions();
                this.autoposition();
                this.adapter.notifyOpen();
              } else {
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                this.animationRequestId = requestAnimationFrame(function () {
                  _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                  _this.dimensions = _this.adapter.getInnerDimensions();
                  _this.autoposition();
                  _this.openAnimationEndTimerId = setTimeout(function () {
                    _this.openAnimationEndTimerId = 0;
                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                    _this.adapter.notifyOpen();
                  }, constants_1.numbers.TRANSITION_OPEN_DURATION);
                });
                this.isSurfaceOpen = true;
              }
            };
            /**
             * Closes the menu surface.
             */
            MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {
              var _this = this;
              if (skipRestoreFocus === void 0) {
                skipRestoreFocus = false;
              }
              if (!this.isSurfaceOpen) {
                return;
              }
              if (this.isQuickOpen) {
                this.isSurfaceOpen = false;
                if (!skipRestoreFocus) {
                  this.maybeRestoreFocus();
                }
                this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
                this.adapter.notifyClose();
              } else {
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
                requestAnimationFrame(function () {
                  _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                  _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
                  _this.closeAnimationEndTimerId = setTimeout(function () {
                    _this.closeAnimationEndTimerId = 0;
                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
                    _this.adapter.notifyClose();
                  }, constants_1.numbers.TRANSITION_CLOSE_DURATION);
                });
                this.isSurfaceOpen = false;
                if (!skipRestoreFocus) {
                  this.maybeRestoreFocus();
                }
              }
            };
            /** Handle clicks and close if not within menu-surface element. */
            MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
              var el = evt.target;
              if (this.adapter.isElementInContainer(el)) {
                return;
              }
              this.close();
            };
            /** Handle keys that close the surface. */
            MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
              var keyCode = evt.keyCode,
                  key = evt.key;
              var isEscape = key === 'Escape' || keyCode === 27;
              if (isEscape) {
                this.close();
              }
            };
            MDCMenuSurfaceFoundation.prototype.autoposition = function () {
              var _a;
              // Compute measurements for autoposition methods reuse.
              this.measurements = this.getAutoLayoutmeasurements();
              var corner = this.getoriginCorner();
              var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
              var verticalAlignment = this.hasBit(corner, constants_1.CornerBit.BOTTOM) ? 'bottom' : 'top';
              var horizontalAlignment = this.hasBit(corner, constants_1.CornerBit.RIGHT) ? 'right' : 'left';
              var horizontalOffset = this.getHorizontalOriginOffset(corner);
              var verticalOffset = this.getVerticalOriginOffset(corner);
              var _b = this.measurements,
                  anchorSize = _b.anchorSize,
                  surfaceSize = _b.surfaceSize;
              var position = (_a = {}, _a[horizontalAlignment] = horizontalOffset, _a[verticalAlignment] = verticalOffset, _a);
              // Center align when anchor width is comparable or greater than menu surface, otherwise keep corner.
              if (anchorSize.width / surfaceSize.width > constants_1.numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
                horizontalAlignment = 'center';
              }
              // If the menu-surface has been hoisted to the body, it's no longer relative to the anchor element
              if (this.isHoistedElement || this.isFixedPosition) {
                this.adjustPositionForHoistedElement(position);
              }
              this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
              this.adapter.setPosition(position);
              this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
              // If it is opened from the top then add is-open-below class
              if (!this.hasBit(corner, constants_1.CornerBit.BOTTOM)) {
                this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
              }
            };
            /**
             * @return Measurements used to position menu surface popup.
             */
            MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function () {
              var anchorRect = this.adapter.getAnchorDimensions();
              var bodySize = this.adapter.getBodyDimensions();
              var viewportSize = this.adapter.getWindowDimensions();
              var windowScroll = this.adapter.getWindowScroll();
              if (!anchorRect) {
                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                anchorRect = {
                  top: this.position.y,
                  right: this.position.x,
                  bottom: this.position.y,
                  left: this.position.x,
                  width: 0,
                  height: 0
                };
                // tslint:enable:object-literal-sort-keys
              }
              return {
                anchorSize: anchorRect,
                bodySize: bodySize,
                surfaceSize: this.dimensions,
                viewportDistance: {
                  // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                  top: anchorRect.top,
                  right: viewportSize.width - anchorRect.right,
                  bottom: viewportSize.height - anchorRect.bottom,
                  left: anchorRect.left
                },
                viewportSize: viewportSize,
                windowScroll: windowScroll
              };
            };
            /**
             * Computes the corner of the anchor from which to animate and position the
             * menu surface.
             *
             * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL
             * context. E.g., menu surface will be positioned from right side on TOP_END.
             */
            MDCMenuSurfaceFoundation.prototype.getoriginCorner = function () {
              var corner = this.originCorner;
              var _a = this.measurements,
                  viewportDistance = _a.viewportDistance,
                  anchorSize = _a.anchorSize,
                  surfaceSize = _a.surfaceSize;
              var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
              var isAnchoredToBottom = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
              var availableTop;
              var availableBottom;
              if (isAnchoredToBottom) {
                availableTop = viewportDistance.top - MARGIN_TO_EDGE + anchorSize.height + this.anchorMargin.bottom;
                availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
              } else {
                availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
                availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE + anchorSize.height - this.anchorMargin.top;
              }
              var isAvailableBottom = availableBottom - surfaceSize.height > 0;
              if (!isAvailableBottom && availableTop >= availableBottom) {
                // Attach bottom side of surface to the anchor.
                corner = this.setBit(corner, constants_1.CornerBit.BOTTOM);
              }
              var isRtl = this.adapter.isRtl();
              var isFlipRtl = this.hasBit(this.anchorCorner, constants_1.CornerBit.FLIP_RTL);
              var hasRightBit = this.hasBit(this.anchorCorner, constants_1.CornerBit.RIGHT) || this.hasBit(corner, constants_1.CornerBit.RIGHT);
              // Whether surface attached to right side of anchor element.
              var isAnchoredToRight = false;
              // Anchored to start
              if (isRtl && isFlipRtl) {
                isAnchoredToRight = !hasRightBit;
              } else {
                // Anchored to right
                isAnchoredToRight = hasRightBit;
              }
              var availableLeft;
              var availableRight;
              if (isAnchoredToRight) {
                availableLeft = viewportDistance.left + anchorSize.width + this.anchorMargin.right;
                availableRight = viewportDistance.right - this.anchorMargin.right;
              } else {
                availableLeft = viewportDistance.left + this.anchorMargin.left;
                availableRight = viewportDistance.right + anchorSize.width - this.anchorMargin.left;
              }
              var isAvailableLeft = availableLeft - surfaceSize.width > 0;
              var isAvailableRight = availableRight - surfaceSize.width > 0;
              var isOriginCornerAlignedToEnd = this.hasBit(corner, constants_1.CornerBit.FLIP_RTL) && this.hasBit(corner, constants_1.CornerBit.RIGHT);
              if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl || !isAvailableLeft && isOriginCornerAlignedToEnd) {
                // Attach left side of surface to the anchor.
                corner = this.unsetBit(corner, constants_1.CornerBit.RIGHT);
              } else if (isAvailableLeft && isAnchoredToRight && isRtl || isAvailableLeft && !isAnchoredToRight && hasRightBit || !isAvailableRight && availableLeft >= availableRight) {
                // Attach right side of surface to the anchor.
                corner = this.setBit(corner, constants_1.CornerBit.RIGHT);
              }
              return corner;
            };
            /**
             * @param corner Origin corner of the menu surface.
             * @return Maximum height of the menu surface, based on available space. 0 indicates should not be set.
             */
            MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function (corner) {
              var viewportDistance = this.measurements.viewportDistance;
              var maxHeight = 0;
              var isBottomAligned = this.hasBit(corner, constants_1.CornerBit.BOTTOM);
              var isBottomAnchored = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
              var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
              // When maximum height is not specified, it is handled from CSS.
              if (isBottomAligned) {
                maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
                if (!isBottomAnchored) {
                  maxHeight += this.measurements.anchorSize.height;
                }
              } else {
                maxHeight = viewportDistance.bottom - this.anchorMargin.bottom + this.measurements.anchorSize.height - MARGIN_TO_EDGE;
                if (isBottomAnchored) {
                  maxHeight -= this.measurements.anchorSize.height;
                }
              }
              return maxHeight;
            };
            /**
             * @param corner Origin corner of the menu surface.
             * @return Horizontal offset of menu surface origin corner from corresponding anchor corner.
             */
            MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function (corner) {
              var anchorSize = this.measurements.anchorSize;
              // isRightAligned corresponds to using the 'right' property on the surface.
              var isRightAligned = this.hasBit(corner, constants_1.CornerBit.RIGHT);
              var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, constants_1.CornerBit.RIGHT);
              if (isRightAligned) {
                var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.left : this.anchorMargin.right;
                // For hoisted or fixed elements, adjust the offset by the difference
                // between viewport width and body width so when we calculate the right
                // value (`adjustPositionForHoistedElement`) based on the element
                // position, the right property is correct.
                if (this.isHoistedElement || this.isFixedPosition) {
                  return rightOffset - (this.measurements.viewportSize.width - this.measurements.bodySize.width);
                }
                return rightOffset;
              }
              return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right : this.anchorMargin.left;
            };
            /**
             * @param corner Origin corner of the menu surface.
             * @return Vertical offset of menu surface origin corner from corresponding anchor corner.
             */
            MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function (corner) {
              var anchorSize = this.measurements.anchorSize;
              var isBottomAligned = this.hasBit(corner, constants_1.CornerBit.BOTTOM);
              var avoidVerticalOverlap = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
              var y = 0;
              if (isBottomAligned) {
                y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top : -this.anchorMargin.bottom;
              } else {
                y = avoidVerticalOverlap ? anchorSize.height + this.anchorMargin.bottom : this.anchorMargin.top;
              }
              return y;
            };
            /** Calculates the offsets for positioning the menu-surface when the menu-surface has been hoisted to the body. */
            MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function (position) {
              var e_1, _a;
              var _b = this.measurements,
                  windowScroll = _b.windowScroll,
                  viewportDistance = _b.viewportDistance;
              var props = Object.keys(position);
              try {
                for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                  var prop = props_1_1.value;
                  var value = position[prop] || 0;
                  // Hoisted surfaces need to have the anchor elements location on the page added to the
                  // position properties for proper alignment on the body.
                  value += viewportDistance[prop];
                  // Surfaces that are absolutely positioned need to have additional calculations for scroll
                  // and bottom positioning.
                  if (!this.isFixedPosition) {
                    if (prop === 'top') {
                      value += windowScroll.y;
                    } else if (prop === 'bottom') {
                      value -= windowScroll.y;
                    } else if (prop === 'left') {
                      value += windowScroll.x;
                    } else {
                      // prop === 'right'
                      value -= windowScroll.x;
                    }
                  }
                  position[prop] = value;
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            };
            /**
             * The last focused element when the menu surface was opened should regain focus, if the user is
             * focused on or within the menu surface when it is closed.
             */
            MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function () {
              var isRootFocused = this.adapter.isFocused();
              var childHasFocus = document.activeElement && this.adapter.isElementInContainer(document.activeElement);
              if (isRootFocused || childHasFocus) {
                this.adapter.restoreFocus();
              }
            };
            MDCMenuSurfaceFoundation.prototype.hasBit = function (corner, bit) {
              return Boolean(corner & bit); // tslint:disable-line:no-bitwise
            };
            MDCMenuSurfaceFoundation.prototype.setBit = function (corner, bit) {
              return corner | bit; // tslint:disable-line:no-bitwise
            };
            MDCMenuSurfaceFoundation.prototype.unsetBit = function (corner, bit) {
              return corner ^ bit;
            };
            /**
             * isFinite that doesn't force conversion to number type.
             * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
             */
            MDCMenuSurfaceFoundation.prototype.isFinite = function (num) {
              return typeof num === 'number' && isFinite(num);
            };
            return MDCMenuSurfaceFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCMenuSurfaceFoundation = MDCMenuSurfaceFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCMenuSurfaceFoundation;

          /***/ }),

        /***/ "./packages/mdc-menu-surface/index.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-menu-surface/index.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-menu-surface/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-menu-surface/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-menu-surface/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-menu-surface/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-menu-surface/util.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-menu-surface/util.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cachedCssTransformPropertyName_;
          /**
           * Returns the name of the correct transform property to use on the current browser.
           */
          function getTransformPropertyName(globalObj, forceRefresh) {
            if (forceRefresh === void 0) {
              forceRefresh = false;
            }
            if (cachedCssTransformPropertyName_ === undefined || forceRefresh) {
              var el = globalObj.document.createElement('div');
              cachedCssTransformPropertyName_ = 'transform' in el.style ? 'transform' : 'webkitTransform';
            }
            return cachedCssTransformPropertyName_;
          }
          exports.getTransformPropertyName = getTransformPropertyName;

          /***/ }),

        /***/ "./packages/mdc-menu/component.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-menu/component.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
// TODO(b/152410470): Remove trailing underscores from private properties
// tslint:disable:strip-private-property-underscore
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_2 = __webpack_require__(/*! @material/list/component */ "./packages/mdc-list/component.ts");
          var constants_1 = __webpack_require__(/*! @material/list/constants */ "./packages/mdc-list/constants.ts");
          var foundation_1 = __webpack_require__(/*! @material/list/foundation */ "./packages/mdc-list/foundation.ts");
          var component_3 = __webpack_require__(/*! @material/menu-surface/component */ "./packages/mdc-menu-surface/component.ts");
          var foundation_2 = __webpack_require__(/*! @material/menu-surface/foundation */ "./packages/mdc-menu-surface/foundation.ts");
          var constants_2 = __webpack_require__(/*! ./constants */ "./packages/mdc-menu/constants.ts");
          var foundation_3 = __webpack_require__(/*! ./foundation */ "./packages/mdc-menu/foundation.ts");
          var MDCMenu = /** @class */function (_super) {
            __extends(MDCMenu, _super);
            function MDCMenu() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCMenu.attachTo = function (root) {
              return new MDCMenu(root);
            };
            MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {
              if (menuSurfaceFactory === void 0) {
                menuSurfaceFactory = function menuSurfaceFactory(el) {
                  return new component_3.MDCMenuSurface(el);
                };
              }
              if (listFactory === void 0) {
                listFactory = function listFactory(el) {
                  return new component_2.MDCList(el);
                };
              }
              this.menuSurfaceFactory_ = menuSurfaceFactory;
              this.listFactory_ = listFactory;
            };
            MDCMenu.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.menuSurface_ = this.menuSurfaceFactory_(this.root);
              var list = this.root.querySelector(constants_2.strings.LIST_SELECTOR);
              if (list) {
                this.list_ = this.listFactory_(list);
                this.list_.wrapFocus = true;
              } else {
                this.list_ = null;
              }
              this.handleKeydown_ = function (evt) {
                return _this.foundation.handleKeydown(evt);
              };
              this.handleItemAction_ = function (evt) {
                return _this.foundation.handleItemAction(_this.items[evt.detail.index]);
              };
              this.handleMenuSurfaceOpened_ = function () {
                return _this.foundation.handleMenuSurfaceOpened();
              };
              this.menuSurface_.listen(foundation_2.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);
              this.listen('keydown', this.handleKeydown_);
              this.listen(foundation_1.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);
            };
            MDCMenu.prototype.destroy = function () {
              if (this.list_) {
                this.list_.destroy();
              }
              this.menuSurface_.destroy();
              this.menuSurface_.unlisten(foundation_2.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);
              this.unlisten('keydown', this.handleKeydown_);
              this.unlisten(foundation_1.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);
              _super.prototype.destroy.call(this);
            };
            Object.defineProperty(MDCMenu.prototype, "open", {
              get: function get() {
                return this.menuSurface_.isOpen();
              },
              set: function set(value) {
                if (value) {
                  this.menuSurface_.open();
                } else {
                  this.menuSurface_.close();
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "wrapFocus", {
              get: function get() {
                return this.list_ ? this.list_.wrapFocus : false;
              },
              set: function set(value) {
                if (this.list_) {
                  this.list_.wrapFocus = value;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "hasTypeahead", {
              /**
               * Sets whether the menu has typeahead functionality.
               * @param value Whether typeahead is enabled.
               */
              set: function set(value) {
                if (this.list_) {
                  this.list_.hasTypeahead = value;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "typeaheadInProgress", {
              /**
               * @return Whether typeahead logic is currently matching some user prefix.
               */
              get: function get() {
                return this.list_ ? this.list_.typeaheadInProgress : false;
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Given the next desired character from the user, adds it to the typeahead
             * buffer. Then, attempts to find the next option matching the buffer. Wraps
             * around if at the end of options.
             *
             * @param nextChar The next character to add to the prefix buffer.
             * @param startingIndex The index from which to start matching. Only relevant
             *     when starting a new match sequence. To start a new match sequence,
             *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
             *     to clear after a set interval defined in list foundation. Defaults to
             *     the currently focused index.
             * @return The index of the matched item, or -1 if no match.
             */
            MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {
              if (this.list_) {
                return this.list_.typeaheadMatchItem(nextChar, startingIndex);
              }
              return -1;
            };
            /**
             * Layout the underlying list element in the case of any dynamic updates
             * to its structure.
             */
            MDCMenu.prototype.layout = function () {
              if (this.list_) {
                this.list_.layout();
              }
            };
            Object.defineProperty(MDCMenu.prototype, "items", {
              /**
               * Return the items within the menu. Note that this only contains the set of elements within
               * the items container that are proper list items, and not supplemental / presentational DOM
               * elements.
               */
              get: function get() {
                return this.list_ ? this.list_.listElements : [];
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "singleSelection", {
              /**
               * Turns on/off the underlying list's single selection mode. Used mainly
               * by select menu.
               *
               * @param singleSelection Whether to enable single selection mode.
               */
              set: function set(singleSelection) {
                if (this.list_) {
                  this.list_.singleSelection = singleSelection;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "selectedIndex", {
              /**
               * Retrieves the selected index. Only applicable to select menus.
               * @return The selected index, which is a number for single selection and
               *     radio lists, and an array of numbers for checkbox lists.
               */
              get: function get() {
                return this.list_ ? this.list_.selectedIndex : constants_1.numbers.UNSET_INDEX;
              },
              /**
               * Sets the selected index of the list. Only applicable to select menus.
               * @param index The selected index, which is a number for single selection and
               *     radio lists, and an array of numbers for checkbox lists.
               */
              set: function set(index) {
                if (this.list_) {
                  this.list_.selectedIndex = index;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenu.prototype, "quickOpen", {
              set: function set(quickOpen) {
                this.menuSurface_.quickOpen = quickOpen;
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Sets default focus state where the menu should focus every time when menu
             * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
             * default.
             * @param focusState Default focus state.
             */
            MDCMenu.prototype.setDefaultFocusState = function (focusState) {
              this.foundation.setDefaultFocusState(focusState);
            };
            /**
             * @param corner Default anchor corner alignment of top-left menu corner.
             */
            MDCMenu.prototype.setAnchorCorner = function (corner) {
              this.menuSurface_.setAnchorCorner(corner);
            };
            MDCMenu.prototype.setAnchorMargin = function (margin) {
              this.menuSurface_.setAnchorMargin(margin);
            };
            /**
             * Sets the list item as the selected row at the specified index.
             * @param index Index of list item within menu.
             */
            MDCMenu.prototype.setSelectedIndex = function (index) {
              this.foundation.setSelectedIndex(index);
            };
            /**
             * Sets the enabled state to isEnabled for the menu item at the given index.
             * @param index Index of the menu item
             * @param isEnabled The desired enabled state of the menu item.
             */
            MDCMenu.prototype.setEnabled = function (index, isEnabled) {
              this.foundation.setEnabled(index, isEnabled);
            };
            /**
             * @return The item within the menu at the index specified.
             */
            MDCMenu.prototype.getOptionByIndex = function (index) {
              var items = this.items;
              if (index < items.length) {
                return this.items[index];
              } else {
                return null;
              }
            };
            /**
             * @param index A menu item's index.
             * @return The primary text within the menu at the index specified.
             */
            MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {
              var item = this.getOptionByIndex(index);
              if (item && this.list_) {
                return this.list_.getPrimaryText(item) || '';
              }
              return '';
            };
            MDCMenu.prototype.setFixedPosition = function (isFixed) {
              this.menuSurface_.setFixedPosition(isFixed);
            };
            MDCMenu.prototype.setIsHoisted = function (isHoisted) {
              this.menuSurface_.setIsHoisted(isHoisted);
            };
            MDCMenu.prototype.setAbsolutePosition = function (x, y) {
              this.menuSurface_.setAbsolutePosition(x, y);
            };
            /**
             * Sets the element that the menu-surface is anchored to.
             */
            MDCMenu.prototype.setAnchorElement = function (element) {
              this.menuSurface_.anchorElement = element;
            };
            MDCMenu.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClassToElementAtIndex: function addClassToElementAtIndex(index, className) {
                  var list = _this.items;
                  list[index].classList.add(className);
                },
                removeClassFromElementAtIndex: function removeClassFromElementAtIndex(index, className) {
                  var list = _this.items;
                  list[index].classList.remove(className);
                },
                addAttributeToElementAtIndex: function addAttributeToElementAtIndex(index, attr, value) {
                  var list = _this.items;
                  list[index].setAttribute(attr, value);
                },
                removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex(index, attr) {
                  var list = _this.items;
                  list[index].removeAttribute(attr);
                },
                elementContainsClass: function elementContainsClass(element, className) {
                  return element.classList.contains(className);
                },
                closeSurface: function closeSurface(skipRestoreFocus) {
                  return _this.menuSurface_.close(skipRestoreFocus);
                },
                getElementIndex: function getElementIndex(element) {
                  return _this.items.indexOf(element);
                },
                notifySelected: function notifySelected(evtData) {
                  return _this.emit(constants_2.strings.SELECTED_EVENT, {
                    index: evtData.index,
                    item: _this.items[evtData.index]
                  });
                },
                getMenuItemCount: function getMenuItemCount() {
                  return _this.items.length;
                },
                focusItemAtIndex: function focusItemAtIndex(index) {
                  return _this.items[index].focus();
                },
                focusListRoot: function focusListRoot() {
                  return _this.root.querySelector(constants_2.strings.LIST_SELECTOR).focus();
                },
                isSelectableItemAtIndex: function isSelectableItemAtIndex(index) {
                  return !!ponyfill_1.closest(_this.items[index], "." + constants_2.cssClasses.MENU_SELECTION_GROUP);
                },
                getSelectedSiblingOfItemAtIndex: function getSelectedSiblingOfItemAtIndex(index) {
                  var selectionGroupEl = ponyfill_1.closest(_this.items[index], "." + constants_2.cssClasses.MENU_SELECTION_GROUP);
                  var selectedItemEl = selectionGroupEl.querySelector("." + constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
                  return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_3.MDCMenuFoundation(adapter);
            };
            return MDCMenu;
          }(component_1.MDCComponent);
          exports.MDCMenu = MDCMenu;

          /***/ }),

        /***/ "./packages/mdc-menu/constants.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-menu/constants.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
            MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
            ROOT: 'mdc-menu'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ARIA_CHECKED_ATTR: 'aria-checked',
            ARIA_DISABLED_ATTR: 'aria-disabled',
            CHECKBOX_SELECTOR: 'input[type="checkbox"]',
            LIST_SELECTOR: '.mdc-list',
            SELECTED_EVENT: 'MDCMenu:selected'
          };
          exports.strings = strings;
          var numbers = {
            FOCUS_ROOT_INDEX: -1
          };
          exports.numbers = numbers;
          var DefaultFocusState;
          (function (DefaultFocusState) {
            DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
            DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
            DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
            DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
          })(DefaultFocusState || (DefaultFocusState = {}));
          exports.DefaultFocusState = DefaultFocusState;

          /***/ }),

        /***/ "./packages/mdc-menu/foundation.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-menu/foundation.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! @material/list/constants */ "./packages/mdc-list/constants.ts");
          var foundation_2 = __webpack_require__(/*! @material/menu-surface/foundation */ "./packages/mdc-menu-surface/foundation.ts");
          var constants_2 = __webpack_require__(/*! ./constants */ "./packages/mdc-menu/constants.ts");
          var MDCMenuFoundation = /** @class */function (_super) {
            __extends(MDCMenuFoundation, _super);
            function MDCMenuFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;
              _this.closeAnimationEndTimerId_ = 0;
              _this.defaultFocusState_ = constants_2.DefaultFocusState.LIST_ROOT;
              return _this;
            }
            Object.defineProperty(MDCMenuFoundation, "cssClasses", {
              get: function get() {
                return constants_2.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuFoundation, "strings", {
              get: function get() {
                return constants_2.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuFoundation, "numbers", {
              get: function get() {
                return constants_2.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
              /**
               * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClassToElementAtIndex: function addClassToElementAtIndex() {
                    return undefined;
                  },
                  removeClassFromElementAtIndex: function removeClassFromElementAtIndex() {
                    return undefined;
                  },
                  addAttributeToElementAtIndex: function addAttributeToElementAtIndex() {
                    return undefined;
                  },
                  removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex() {
                    return undefined;
                  },
                  elementContainsClass: function elementContainsClass() {
                    return false;
                  },
                  closeSurface: function closeSurface() {
                    return undefined;
                  },
                  getElementIndex: function getElementIndex() {
                    return -1;
                  },
                  notifySelected: function notifySelected() {
                    return undefined;
                  },
                  getMenuItemCount: function getMenuItemCount() {
                    return 0;
                  },
                  focusItemAtIndex: function focusItemAtIndex() {
                    return undefined;
                  },
                  focusListRoot: function focusListRoot() {
                    return undefined;
                  },
                  getSelectedSiblingOfItemAtIndex: function getSelectedSiblingOfItemAtIndex() {
                    return -1;
                  },
                  isSelectableItemAtIndex: function isSelectableItemAtIndex() {
                    return false;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCMenuFoundation.prototype.destroy = function () {
              if (this.closeAnimationEndTimerId_) {
                clearTimeout(this.closeAnimationEndTimerId_);
              }
              this.adapter.closeSurface();
            };
            MDCMenuFoundation.prototype.handleKeydown = function (evt) {
              var key = evt.key,
                  keyCode = evt.keyCode;
              var isTab = key === 'Tab' || keyCode === 9;
              if (isTab) {
                this.adapter.closeSurface( /** skipRestoreFocus */true);
              }
            };
            MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
              var _this = this;
              var index = this.adapter.getElementIndex(listItem);
              if (index < 0) {
                return;
              }
              this.adapter.notifySelected({ index: index });
              this.adapter.closeSurface();
              // Wait for the menu to close before adding/removing classes that affect styles.
              this.closeAnimationEndTimerId_ = setTimeout(function () {
                // Recompute the index in case the menu contents have changed.
                var recomputedIndex = _this.adapter.getElementIndex(listItem);
                if (recomputedIndex >= 0 && _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
                  _this.setSelectedIndex(recomputedIndex);
                }
              }, foundation_2.MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
            };
            MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {
              switch (this.defaultFocusState_) {
                case constants_2.DefaultFocusState.FIRST_ITEM:
                  this.adapter.focusItemAtIndex(0);
                  break;
                case constants_2.DefaultFocusState.LAST_ITEM:
                  this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
                  break;
                case constants_2.DefaultFocusState.NONE:
                  // Do nothing.
                  break;
                default:
                  this.adapter.focusListRoot();
                  break;
              }
            };
            /**
             * Sets default focus state where the menu should focus every time when menu
             * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
             * default.
             */
            MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {
              this.defaultFocusState_ = focusState;
            };
            /**
             * Selects the list item at `index` within the menu.
             * @param index Index of list item within the menu.
             */
            MDCMenuFoundation.prototype.setSelectedIndex = function (index) {
              this.validatedIndex_(index);
              if (!this.adapter.isSelectableItemAtIndex(index)) {
                throw new Error('MDCMenuFoundation: No selection group at specified index.');
              }
              var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
              if (prevSelectedIndex >= 0) {
                this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, constants_2.strings.ARIA_CHECKED_ATTR);
                this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
              }
              this.adapter.addClassToElementAtIndex(index, constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
              this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_CHECKED_ATTR, 'true');
            };
            /**
             * Sets the enabled state to isEnabled for the menu item at the given index.
             * @param index Index of the menu item
             * @param isEnabled The desired enabled state of the menu item.
             */
            MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {
              this.validatedIndex_(index);
              if (isEnabled) {
                this.adapter.removeClassFromElementAtIndex(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_DISABLED_ATTR, 'false');
              } else {
                this.adapter.addClassToElementAtIndex(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_DISABLED_ATTR, 'true');
              }
            };
            MDCMenuFoundation.prototype.validatedIndex_ = function (index) {
              var menuSize = this.adapter.getMenuItemCount();
              var isIndexInRange = index >= 0 && index < menuSize;
              if (!isIndexInRange) {
                throw new Error('MDCMenuFoundation: No list item at specified index.');
              }
            };
            return MDCMenuFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCMenuFoundation = MDCMenuFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCMenuFoundation;

          /***/ }),

        /***/ "./packages/mdc-menu/index.ts":
        /*!************************************!*\
  !*** ./packages/mdc-menu/index.ts ***!
  \************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! @material/menu-surface/constants */ "./packages/mdc-menu-surface/constants.ts"); // for backward compatibility
          exports.Corner = constants_1.Corner;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-menu/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-menu/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-menu/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-notched-outline/component.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-notched-outline/component.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/floating-label/foundation */ "./packages/mdc-floating-label/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-notched-outline/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-notched-outline/foundation.ts");
          var MDCNotchedOutline = /** @class */function (_super) {
            __extends(MDCNotchedOutline, _super);
            function MDCNotchedOutline() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCNotchedOutline.attachTo = function (root) {
              return new MDCNotchedOutline(root);
            };
            MDCNotchedOutline.prototype.initialSyncWithDOM = function () {
              this.notchElement_ = this.root.querySelector(constants_1.strings.NOTCH_ELEMENT_SELECTOR);
              var label = this.root.querySelector('.' + foundation_1.MDCFloatingLabelFoundation.cssClasses.ROOT);
              if (label) {
                label.style.transitionDuration = '0s';
                this.root.classList.add(constants_1.cssClasses.OUTLINE_UPGRADED);
                requestAnimationFrame(function () {
                  label.style.transitionDuration = '';
                });
              } else {
                this.root.classList.add(constants_1.cssClasses.NO_LABEL);
              }
            };
            /**
             * Updates classes and styles to open the notch to the specified width.
             * @param notchWidth The notch width in the outline.
             */
            MDCNotchedOutline.prototype.notch = function (notchWidth) {
              this.foundation.notch(notchWidth);
            };
            /**
             * Updates classes and styles to close the notch.
             */
            MDCNotchedOutline.prototype.closeNotch = function () {
              this.foundation.closeNotch();
            };
            MDCNotchedOutline.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                setNotchWidthProperty: function setNotchWidthProperty(width) {
                  return _this.notchElement_.style.setProperty('width', width + 'px');
                },
                removeNotchWidthProperty: function removeNotchWidthProperty() {
                  return _this.notchElement_.style.removeProperty('width');
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_2.MDCNotchedOutlineFoundation(adapter);
            };
            return MDCNotchedOutline;
          }(component_1.MDCComponent);
          exports.MDCNotchedOutline = MDCNotchedOutline;

          /***/ }),

        /***/ "./packages/mdc-notched-outline/constants.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-notched-outline/constants.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch'
          };
          exports.strings = strings;
          var numbers = {
            // This should stay in sync with $mdc-notched-outline-padding * 2.
            NOTCH_ELEMENT_PADDING: 8
          };
          exports.numbers = numbers;
          var cssClasses = {
            NO_LABEL: 'mdc-notched-outline--no-label',
            OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
            OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded'
          };
          exports.cssClasses = cssClasses;

          /***/ }),

        /***/ "./packages/mdc-notched-outline/foundation.ts":
        /*!****************************************************!*\
  !*** ./packages/mdc-notched-outline/foundation.ts ***!
  \****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-notched-outline/constants.ts");
          var MDCNotchedOutlineFoundation = /** @class */function (_super) {
            __extends(MDCNotchedOutlineFoundation, _super);
            function MDCNotchedOutlineFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
              /**
               * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setNotchWidthProperty: function setNotchWidthProperty() {
                    return undefined;
                  },
                  removeNotchWidthProperty: function removeNotchWidthProperty() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
             */
            MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
              var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
              if (notchWidth > 0) {
                notchWidth += constants_1.numbers.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
              }
              this.adapter.setNotchWidthProperty(notchWidth);
              this.adapter.addClass(OUTLINE_NOTCHED);
            };
            /**
             * Removes notched outline selector to close the notch in the outline.
             */
            MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
              var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
              this.adapter.removeClass(OUTLINE_NOTCHED);
              this.adapter.removeNotchWidthProperty();
            };
            return MDCNotchedOutlineFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCNotchedOutlineFoundation = MDCNotchedOutlineFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCNotchedOutlineFoundation;

          /***/ }),

        /***/ "./packages/mdc-notched-outline/index.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-notched-outline/index.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-notched-outline/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-notched-outline/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-notched-outline/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-radio/component.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-radio/component.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-radio/foundation.ts");
          var MDCRadio = /** @class */function (_super) {
            __extends(MDCRadio, _super);
            function MDCRadio() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.ripple_ = _this.createRipple_();
              return _this;
            }
            MDCRadio.attachTo = function (root) {
              return new MDCRadio(root);
            };
            Object.defineProperty(MDCRadio.prototype, "checked", {
              get: function get() {
                return this.nativeControl_.checked;
              },
              set: function set(checked) {
                this.nativeControl_.checked = checked;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRadio.prototype, "disabled", {
              get: function get() {
                return this.nativeControl_.disabled;
              },
              set: function set(disabled) {
                this.foundation.setDisabled(disabled);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRadio.prototype, "value", {
              get: function get() {
                return this.nativeControl_.value;
              },
              set: function set(value) {
                this.nativeControl_.value = value;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRadio.prototype, "ripple", {
              get: function get() {
                return this.ripple_;
              },
              enumerable: true,
              configurable: true
            });
            MDCRadio.prototype.destroy = function () {
              this.ripple_.destroy();
              _super.prototype.destroy.call(this);
            };
            MDCRadio.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                  return _this.nativeControl_.disabled = disabled;
                }
              };
              return new foundation_2.MDCRadioFoundation(adapter);
            };
            MDCRadio.prototype.createRipple_ = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.nativeControl_.addEventListener(evtType, handler, events_1.applyPassive());
                }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.nativeControl_.removeEventListener(evtType, handler, events_1.applyPassive());
                },
                // Radio buttons technically go "active" whenever there is *any* keyboard interaction.
                // This is not the UI we desire.
                isSurfaceActive: function isSurfaceActive() {
                  return false;
                }, isUnbounded: function isUnbounded() {
                  return true;
                } });
              // tslint:enable:object-literal-sort-keys
              return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
            };
            Object.defineProperty(MDCRadio.prototype, "nativeControl_", {
              get: function get() {
                var NATIVE_CONTROL_SELECTOR = foundation_2.MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;
                var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
                if (!el) {
                  throw new Error("Radio component requires a " + NATIVE_CONTROL_SELECTOR + " element");
                }
                return el;
              },
              enumerable: true,
              configurable: true
            });
            return MDCRadio;
          }(component_1.MDCComponent);
          exports.MDCRadio = MDCRadio;

          /***/ }),

        /***/ "./packages/mdc-radio/constants.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-radio/constants.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control'
          };
          exports.strings = strings;
          var cssClasses = {
            DISABLED: 'mdc-radio--disabled',
            ROOT: 'mdc-radio'
          };
          exports.cssClasses = cssClasses;

          /***/ }),

        /***/ "./packages/mdc-radio/foundation.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-radio/foundation.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-radio/constants.ts");
          var MDCRadioFoundation = /** @class */function (_super) {
            __extends(MDCRadioFoundation, _super);
            function MDCRadioFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCRadioFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCRadioFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRadioFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setNativeControlDisabled: function setNativeControlDisabled() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCRadioFoundation.prototype.setDisabled = function (disabled) {
              var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
              this.adapter.setNativeControlDisabled(disabled);
              if (disabled) {
                this.adapter.addClass(DISABLED);
              } else {
                this.adapter.removeClass(DISABLED);
              }
            };
            return MDCRadioFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCRadioFoundation = MDCRadioFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCRadioFoundation;

          /***/ }),

        /***/ "./packages/mdc-radio/index.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-radio/index.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-radio/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-radio/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-radio/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-ripple/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-ripple/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-ripple/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts"));
          var MDCRipple = /** @class */function (_super) {
            __extends(MDCRipple, _super);
            function MDCRipple() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.disabled = false;
              return _this;
            }
            MDCRipple.attachTo = function (root, opts) {
              if (opts === void 0) {
                opts = { isUnbounded: undefined };
              }
              var ripple = new MDCRipple(root);
              // Only override unbounded behavior if option is explicitly specified
              if (opts.isUnbounded !== undefined) {
                ripple.unbounded = opts.isUnbounded;
              }
              return ripple;
            };
            MDCRipple.createAdapter = function (instance) {
              return {
                addClass: function addClass(className) {
                  return instance.root.classList.add(className);
                },
                browserSupportsCssVars: function browserSupportsCssVars() {
                  return util.supportsCssVariables(window);
                },
                computeBoundingRect: function computeBoundingRect() {
                  return instance.root.getBoundingClientRect();
                },
                containsEventTarget: function containsEventTarget(target) {
                  return instance.root.contains(target);
                },
                deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
                  return document.documentElement.removeEventListener(evtType, handler, events_1.applyPassive());
                },
                deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return instance.root.removeEventListener(evtType, handler, events_1.applyPassive());
                },
                deregisterResizeHandler: function deregisterResizeHandler(handler) {
                  return window.removeEventListener('resize', handler);
                },
                getWindowPageOffset: function getWindowPageOffset() {
                  return { x: window.pageXOffset, y: window.pageYOffset };
                },
                isSurfaceActive: function isSurfaceActive() {
                  return ponyfill_1.matches(instance.root, ':active');
                },
                isSurfaceDisabled: function isSurfaceDisabled() {
                  return Boolean(instance.disabled);
                },
                isUnbounded: function isUnbounded() {
                  return Boolean(instance.unbounded);
                },
                registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
                  return document.documentElement.addEventListener(evtType, handler, events_1.applyPassive());
                },
                registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return instance.root.addEventListener(evtType, handler, events_1.applyPassive());
                },
                registerResizeHandler: function registerResizeHandler(handler) {
                  return window.addEventListener('resize', handler);
                },
                removeClass: function removeClass(className) {
                  return instance.root.classList.remove(className);
                },
                updateCssVariable: function updateCssVariable(varName, value) {
                  return instance.root.style.setProperty(varName, value);
                }
              };
            };
            Object.defineProperty(MDCRipple.prototype, "unbounded", {
              get: function get() {
                return Boolean(this.unbounded_);
              },
              set: function set(unbounded) {
                this.unbounded_ = Boolean(unbounded);
                this.setUnbounded_();
              },
              enumerable: true,
              configurable: true
            });
            MDCRipple.prototype.activate = function () {
              this.foundation.activate();
            };
            MDCRipple.prototype.deactivate = function () {
              this.foundation.deactivate();
            };
            MDCRipple.prototype.layout = function () {
              this.foundation.layout();
            };
            MDCRipple.prototype.getDefaultFoundation = function () {
              return new foundation_1.MDCRippleFoundation(MDCRipple.createAdapter(this));
            };
            MDCRipple.prototype.initialSyncWithDOM = function () {
              var root = this.root;
              this.unbounded = 'mdcRippleIsUnbounded' in root.dataset;
            };
            /**
             * Closure Compiler throws an access control error when directly accessing a
             * protected or private property inside a getter/setter, like unbounded above.
             * By accessing the protected property inside a method, we solve that problem.
             * That's why this function exists.
             */
            MDCRipple.prototype.setUnbounded_ = function () {
              this.foundation.setUnbounded(Boolean(this.unbounded_));
            };
            return MDCRipple;
          }(component_1.MDCComponent);
          exports.MDCRipple = MDCRipple;

          /***/ }),

        /***/ "./packages/mdc-ripple/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-ripple/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.cssClasses = {
            // Ripple is a special case where the "root" component is really a "mixin" of sorts,
            // given that it's an 'upgrade' to an existing component. That being said it is the root
            // CSS class that all other CSS classes derive from.
            BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
            FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
            FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
            ROOT: 'mdc-ripple-upgraded',
            UNBOUNDED: 'mdc-ripple-upgraded--unbounded'
          };
          exports.strings = {
            VAR_FG_SCALE: '--mdc-ripple-fg-scale',
            VAR_FG_SIZE: '--mdc-ripple-fg-size',
            VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
            VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
            VAR_LEFT: '--mdc-ripple-left',
            VAR_TOP: '--mdc-ripple-top'
          };
          exports.numbers = {
            DEACTIVATION_TIMEOUT_MS: 225,
            FG_DEACTIVATION_MS: 150,
            INITIAL_ORIGIN_SCALE: 0.6,
            PADDING: 10,
            TAP_DELAY_MS: 300
          };

          /***/ }),

        /***/ "./packages/mdc-ripple/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-ripple/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-ripple/constants.ts");
          var util_1 = __webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts");
// Activation events registered on the root element of each instance for activation
          var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];
// Deactivation events registered on documentElement when a pointer-related down event occurs
          var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];
// simultaneous nested activations
          var activatedTargets = [];
          var MDCRippleFoundation = /** @class */function (_super) {
            __extends(MDCRippleFoundation, _super);
            function MDCRippleFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
              _this.activationAnimationHasEnded_ = false;
              _this.activationTimer_ = 0;
              _this.fgDeactivationRemovalTimer_ = 0;
              _this.fgScale_ = '0';
              _this.frame_ = { width: 0, height: 0 };
              _this.initialSize_ = 0;
              _this.layoutFrame_ = 0;
              _this.maxRadius_ = 0;
              _this.unboundedCoords_ = { left: 0, top: 0 };
              _this.activationState_ = _this.defaultActivationState_();
              _this.activationTimerCallback_ = function () {
                _this.activationAnimationHasEnded_ = true;
                _this.runDeactivationUXLogicIfReady_();
              };
              _this.activateHandler_ = function (e) {
                return _this.activate_(e);
              };
              _this.deactivateHandler_ = function () {
                return _this.deactivate_();
              };
              _this.focusHandler_ = function () {
                return _this.handleFocus();
              };
              _this.blurHandler_ = function () {
                return _this.handleBlur();
              };
              _this.resizeHandler_ = function () {
                return _this.layout();
              };
              return _this;
            }
            Object.defineProperty(MDCRippleFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRippleFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRippleFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  browserSupportsCssVars: function browserSupportsCssVars() {
                    return true;
                  },
                  computeBoundingRect: function computeBoundingRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  containsEventTarget: function containsEventTarget() {
                    return true;
                  },
                  deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() {
                    return undefined;
                  },
                  deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                  },
                  deregisterResizeHandler: function deregisterResizeHandler() {
                    return undefined;
                  },
                  getWindowPageOffset: function getWindowPageOffset() {
                    return { x: 0, y: 0 };
                  },
                  isSurfaceActive: function isSurfaceActive() {
                    return true;
                  },
                  isSurfaceDisabled: function isSurfaceDisabled() {
                    return true;
                  },
                  isUnbounded: function isUnbounded() {
                    return true;
                  },
                  registerDocumentInteractionHandler: function registerDocumentInteractionHandler() {
                    return undefined;
                  },
                  registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                  },
                  registerResizeHandler: function registerResizeHandler() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  updateCssVariable: function updateCssVariable() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCRippleFoundation.prototype.init = function () {
              var _this = this;
              var supportsPressRipple = this.supportsPressRipple_();
              this.registerRootHandlers_(supportsPressRipple);
              if (supportsPressRipple) {
                var _a = MDCRippleFoundation.cssClasses,
                    ROOT_1 = _a.ROOT,
                    UNBOUNDED_1 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                  _this.adapter.addClass(ROOT_1);
                  if (_this.adapter.isUnbounded()) {
                    _this.adapter.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal_();
                  }
                });
              }
            };
            MDCRippleFoundation.prototype.destroy = function () {
              var _this = this;
              if (this.supportsPressRipple_()) {
                if (this.activationTimer_) {
                  clearTimeout(this.activationTimer_);
                  this.activationTimer_ = 0;
                  this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
                }
                if (this.fgDeactivationRemovalTimer_) {
                  clearTimeout(this.fgDeactivationRemovalTimer_);
                  this.fgDeactivationRemovalTimer_ = 0;
                  this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
                }
                var _a = MDCRippleFoundation.cssClasses,
                    ROOT_2 = _a.ROOT,
                    UNBOUNDED_2 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                  _this.adapter.removeClass(ROOT_2);
                  _this.adapter.removeClass(UNBOUNDED_2);
                  _this.removeCssVars_();
                });
              }
              this.deregisterRootHandlers_();
              this.deregisterDeactivationHandlers_();
            };
            /**
             * @param evt Optional event containing position information.
             */
            MDCRippleFoundation.prototype.activate = function (evt) {
              this.activate_(evt);
            };
            MDCRippleFoundation.prototype.deactivate = function () {
              this.deactivate_();
            };
            MDCRippleFoundation.prototype.layout = function () {
              var _this = this;
              if (this.layoutFrame_) {
                cancelAnimationFrame(this.layoutFrame_);
              }
              this.layoutFrame_ = requestAnimationFrame(function () {
                _this.layoutInternal_();
                _this.layoutFrame_ = 0;
              });
            };
            MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
              var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
              if (unbounded) {
                this.adapter.addClass(UNBOUNDED);
              } else {
                this.adapter.removeClass(UNBOUNDED);
              }
            };
            MDCRippleFoundation.prototype.handleFocus = function () {
              var _this = this;
              requestAnimationFrame(function () {
                return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
              });
            };
            MDCRippleFoundation.prototype.handleBlur = function () {
              var _this = this;
              requestAnimationFrame(function () {
                return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
              });
            };
            /**
             * We compute this property so that we are not querying information about the client
             * until the point in time where the foundation requests it. This prevents scenarios where
             * client-side feature-detection may happen too early, such as when components are rendered on the server
             * and then initialized at mount time on the client.
             */
            MDCRippleFoundation.prototype.supportsPressRipple_ = function () {
              return this.adapter.browserSupportsCssVars();
            };
            MDCRippleFoundation.prototype.defaultActivationState_ = function () {
              return {
                activationEvent: undefined,
                hasDeactivationUXRun: false,
                isActivated: false,
                isProgrammatic: false,
                wasActivatedByPointer: false,
                wasElementMadeActive: false
              };
            };
            /**
             * supportsPressRipple Passed from init to save a redundant function call
             */
            MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {
              var _this = this;
              if (supportsPressRipple) {
                ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                  _this.adapter.registerInteractionHandler(evtType, _this.activateHandler_);
                });
                if (this.adapter.isUnbounded()) {
                  this.adapter.registerResizeHandler(this.resizeHandler_);
                }
              }
              this.adapter.registerInteractionHandler('focus', this.focusHandler_);
              this.adapter.registerInteractionHandler('blur', this.blurHandler_);
            };
            MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {
              var _this = this;
              if (evt.type === 'keydown') {
                this.adapter.registerInteractionHandler('keyup', this.deactivateHandler_);
              } else {
                POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                  _this.adapter.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);
                });
              }
            };
            MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {
              var _this = this;
              ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter.deregisterInteractionHandler(evtType, _this.activateHandler_);
              });
              this.adapter.deregisterInteractionHandler('focus', this.focusHandler_);
              this.adapter.deregisterInteractionHandler('blur', this.blurHandler_);
              if (this.adapter.isUnbounded()) {
                this.adapter.deregisterResizeHandler(this.resizeHandler_);
              }
            };
            MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {
              var _this = this;
              this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler_);
              POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);
              });
            };
            MDCRippleFoundation.prototype.removeCssVars_ = function () {
              var _this = this;
              var rippleStrings = MDCRippleFoundation.strings;
              var keys = Object.keys(rippleStrings);
              keys.forEach(function (key) {
                if (key.indexOf('VAR_') === 0) {
                  _this.adapter.updateCssVariable(rippleStrings[key], null);
                }
              });
            };
            MDCRippleFoundation.prototype.activate_ = function (evt) {
              var _this = this;
              if (this.adapter.isSurfaceDisabled()) {
                return;
              }
              var activationState = this.activationState_;
              if (activationState.isActivated) {
                return;
              }
              // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
              var previousActivationEvent = this.previousActivationEvent_;
              var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
              if (isSameInteraction) {
                return;
              }
              activationState.isActivated = true;
              activationState.isProgrammatic = evt === undefined;
              activationState.activationEvent = evt;
              activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
              var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {
                return _this.adapter.containsEventTarget(target);
              });
              if (hasActivatedChild) {
                // Immediately reset activation state, while preserving logic that prevents touch follow-on events
                this.resetActivationState_();
                return;
              }
              if (evt !== undefined) {
                activatedTargets.push(evt.target);
                this.registerDeactivationHandlers_(evt);
              }
              activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);
              if (activationState.wasElementMadeActive) {
                this.animateActivation_();
              }
              requestAnimationFrame(function () {
                // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
                activatedTargets = [];
                if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {
                  // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                  // active states inconsistently when they're called within event handling code:
                  // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                  // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                  // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                  // variable is set within a rAF callback for a submit button interaction (#2241).
                  activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);
                  if (activationState.wasElementMadeActive) {
                    _this.animateActivation_();
                  }
                }
                if (!activationState.wasElementMadeActive) {
                  // Reset activation state immediately if element was not made active.
                  _this.activationState_ = _this.defaultActivationState_();
                }
              });
            };
            MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {
              return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;
            };
            MDCRippleFoundation.prototype.animateActivation_ = function () {
              var _this = this;
              var _a = MDCRippleFoundation.strings,
                  VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,
                  VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
              var _b = MDCRippleFoundation.cssClasses,
                  FG_DEACTIVATION = _b.FG_DEACTIVATION,
                  FG_ACTIVATION = _b.FG_ACTIVATION;
              var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
              this.layoutInternal_();
              var translateStart = '';
              var translateEnd = '';
              if (!this.adapter.isUnbounded()) {
                var _c = this.getFgTranslationCoordinates_(),
                    startPoint = _c.startPoint,
                    endPoint = _c.endPoint;
                translateStart = startPoint.x + "px, " + startPoint.y + "px";
                translateEnd = endPoint.x + "px, " + endPoint.y + "px";
              }
              this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
              this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
              // Cancel any ongoing activation/deactivation animations
              clearTimeout(this.activationTimer_);
              clearTimeout(this.fgDeactivationRemovalTimer_);
              this.rmBoundedActivationClasses_();
              this.adapter.removeClass(FG_DEACTIVATION);
              // Force layout in order to re-trigger the animation.
              this.adapter.computeBoundingRect();
              this.adapter.addClass(FG_ACTIVATION);
              this.activationTimer_ = setTimeout(function () {
                return _this.activationTimerCallback_();
              }, DEACTIVATION_TIMEOUT_MS);
            };
            MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {
              var _a = this.activationState_,
                  activationEvent = _a.activationEvent,
                  wasActivatedByPointer = _a.wasActivatedByPointer;
              var startPoint;
              if (wasActivatedByPointer) {
                startPoint = util_1.getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
              } else {
                startPoint = {
                  x: this.frame_.width / 2,
                  y: this.frame_.height / 2
                };
              }
              // Center the element around the start point.
              startPoint = {
                x: startPoint.x - this.initialSize_ / 2,
                y: startPoint.y - this.initialSize_ / 2
              };
              var endPoint = {
                x: this.frame_.width / 2 - this.initialSize_ / 2,
                y: this.frame_.height / 2 - this.initialSize_ / 2
              };
              return { startPoint: startPoint, endPoint: endPoint };
            };
            MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {
              var _this = this;
              // This method is called both when a pointing device is released, and when the activation animation ends.
              // The deactivation animation should only run after both of those occur.
              var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
              var _a = this.activationState_,
                  hasDeactivationUXRun = _a.hasDeactivationUXRun,
                  isActivated = _a.isActivated;
              var activationHasEnded = hasDeactivationUXRun || !isActivated;
              if (activationHasEnded && this.activationAnimationHasEnded_) {
                this.rmBoundedActivationClasses_();
                this.adapter.addClass(FG_DEACTIVATION);
                this.fgDeactivationRemovalTimer_ = setTimeout(function () {
                  _this.adapter.removeClass(FG_DEACTIVATION);
                }, constants_1.numbers.FG_DEACTIVATION_MS);
              }
            };
            MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {
              var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
              this.adapter.removeClass(FG_ACTIVATION);
              this.activationAnimationHasEnded_ = false;
              this.adapter.computeBoundingRect();
            };
            MDCRippleFoundation.prototype.resetActivationState_ = function () {
              var _this = this;
              this.previousActivationEvent_ = this.activationState_.activationEvent;
              this.activationState_ = this.defaultActivationState_();
              // Touch devices may fire additional events for the same interaction within a short time.
              // Store the previous event until it's safe to assume that subsequent events are for new interactions.
              setTimeout(function () {
                return _this.previousActivationEvent_ = undefined;
              }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
            };
            MDCRippleFoundation.prototype.deactivate_ = function () {
              var _this = this;
              var activationState = this.activationState_;
              // This can happen in scenarios such as when you have a keyup event that blurs the element.
              if (!activationState.isActivated) {
                return;
              }
              var state = __assign({}, activationState);
              if (activationState.isProgrammatic) {
                requestAnimationFrame(function () {
                  return _this.animateDeactivation_(state);
                });
                this.resetActivationState_();
              } else {
                this.deregisterDeactivationHandlers_();
                requestAnimationFrame(function () {
                  _this.activationState_.hasDeactivationUXRun = true;
                  _this.animateDeactivation_(state);
                  _this.resetActivationState_();
                });
              }
            };
            MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {
              var wasActivatedByPointer = _a.wasActivatedByPointer,
                  wasElementMadeActive = _a.wasElementMadeActive;
              if (wasActivatedByPointer || wasElementMadeActive) {
                this.runDeactivationUXLogicIfReady_();
              }
            };
            MDCRippleFoundation.prototype.layoutInternal_ = function () {
              var _this = this;
              this.frame_ = this.adapter.computeBoundingRect();
              var maxDim = Math.max(this.frame_.height, this.frame_.width);
              // Surface diameter is treated differently for unbounded vs. bounded ripples.
              // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
              // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
              // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
              // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
              // `overflow: hidden`.
              var getBoundedRadius = function getBoundedRadius() {
                var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));
                return hypotenuse + MDCRippleFoundation.numbers.PADDING;
              };
              this.maxRadius_ = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
              // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
              var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
              // Unbounded ripple size should always be even number to equally center align.
              if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
                this.initialSize_ = initialSize - 1;
              } else {
                this.initialSize_ = initialSize;
              }
              this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;
              this.updateLayoutCssVars_();
            };
            MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {
              var _a = MDCRippleFoundation.strings,
                  VAR_FG_SIZE = _a.VAR_FG_SIZE,
                  VAR_LEFT = _a.VAR_LEFT,
                  VAR_TOP = _a.VAR_TOP,
                  VAR_FG_SCALE = _a.VAR_FG_SCALE;
              this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");
              this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale_);
              if (this.adapter.isUnbounded()) {
                this.unboundedCoords_ = {
                  left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),
                  top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)
                };
                this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");
                this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");
              }
            };
            return MDCRippleFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCRippleFoundation = MDCRippleFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCRippleFoundation;

          /***/ }),

        /***/ "./packages/mdc-ripple/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-ripple/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-ripple/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-ripple/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-ripple/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-ripple/util.ts":
        /*!*************************************!*\
  !*** ./packages/mdc-ripple/util.ts ***!
  \*************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";


          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * Stores result from supportsCssVariables to avoid redundant processing to
           * detect CSS custom variable support.
           */
          var supportsCssVariables_;
          function supportsCssVariables(windowObj, forceRefresh) {
            if (forceRefresh === void 0) {
              forceRefresh = false;
            }
            var CSS = windowObj.CSS;
            var supportsCssVars = supportsCssVariables_;
            if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
              return supportsCssVariables_;
            }
            var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
            if (!supportsFunctionPresent) {
              return false;
            }
            var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
            // See: https://bugs.webkit.org/show_bug.cgi?id=154669
            // See: README section on Safari
            var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');
            supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
            if (!forceRefresh) {
              supportsCssVariables_ = supportsCssVars;
            }
            return supportsCssVars;
          }
          exports.supportsCssVariables = supportsCssVariables;
          function getNormalizedEventCoords(evt, pageOffset, clientRect) {
            if (!evt) {
              return { x: 0, y: 0 };
            }
            var x = pageOffset.x,
                y = pageOffset.y;
            var documentX = x + clientRect.left;
            var documentY = y + clientRect.top;
            var normalizedX;
            var normalizedY;
            // Determine touch point relative to the ripple container.
            if (evt.type === 'touchstart') {
              var touchEvent = evt;
              normalizedX = touchEvent.changedTouches[0].pageX - documentX;
              normalizedY = touchEvent.changedTouches[0].pageY - documentY;
            } else {
              var mouseEvent = evt;
              normalizedX = mouseEvent.pageX - documentX;
              normalizedY = mouseEvent.pageY - documentY;
            }
            return { x: normalizedX, y: normalizedY };
          }
          exports.getNormalizedEventCoords = getNormalizedEventCoords;

          /***/ }),

        /***/ "./packages/mdc-segmented-button/index.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-segmented-button/index.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./segmented-button/index */ "./packages/mdc-segmented-button/segmented-button/index.ts"));
          __export(__webpack_require__(/*! ./segment/index */ "./packages/mdc-segmented-button/segment/index.ts"));

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segment/component.ts":
        /*!************************************************************!*\
  !*** ./packages/mdc-segmented-button/segment/component.ts ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-segmented-button/segment/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-segmented-button/segment/foundation.ts");
          /**
           * Implementation of MDCSegmentedButtonSegmentFoundation
           */
          var MDCSegmentedButtonSegment = /** @class */function (_super) {
            __extends(MDCSegmentedButtonSegment, _super);
            function MDCSegmentedButtonSegment() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(MDCSegmentedButtonSegment.prototype, "ripple", {
              get: function get() {
                return this.rippleComponent;
              },
              enumerable: true,
              configurable: true
            });
            MDCSegmentedButtonSegment.attachTo = function (root) {
              return new MDCSegmentedButtonSegment(root);
            };
            MDCSegmentedButtonSegment.prototype.initialize = function (rippleFactory) {
              var _this = this;
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el, foundation) {
                  return new component_2.MDCRipple(el, foundation);
                };
              }
              var rippleAdapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                  return _this.foundation.getDimensions();
                } });
              this.rippleComponent = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
            };
            MDCSegmentedButtonSegment.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleClick = function () {
                _this.foundation.handleClick();
              };
              this.listen(constants_1.events.CLICK, this.handleClick);
            };
            MDCSegmentedButtonSegment.prototype.destroy = function () {
              this.ripple.destroy();
              this.unlisten(constants_1.events.CLICK, this.handleClick);
              _super.prototype.destroy.call(this);
            };
            MDCSegmentedButtonSegment.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take
              // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
              // methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                isSingleSelect: function isSingleSelect() {
                  return _this.isSingleSelect;
                },
                getAttr: function getAttr(attrName) {
                  return _this.root.getAttribute(attrName);
                },
                setAttr: function setAttr(attrName, value) {
                  _this.root.setAttribute(attrName, value);
                },
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                notifySelectedChange: function notifySelectedChange(selected) {
                  _this.emit(constants_1.events.SELECTED, {
                    index: _this.index,
                    selected: selected,
                    segmentId: _this.getSegmentId()
                  }, true /* shouldBubble */);
                },
                getRootBoundingClientRect: function getRootBoundingClientRect() {
                  return _this.root.getBoundingClientRect();
                }
              };
              return new foundation_2.MDCSegmentedButtonSegmentFoundation(adapter);
            };
            /**
             * Sets segment's index value
             *
             * @param index Segment's index within wrapping segmented button
             */
            MDCSegmentedButtonSegment.prototype.setIndex = function (index) {
              this.index = index;
            };
            /**
             * Sets segment's isSingleSelect value
             *
             * @param isSingleSelect True if wrapping segmented button is single select
             */
            MDCSegmentedButtonSegment.prototype.setIsSingleSelect = function (isSingleSelect) {
              this.isSingleSelect = isSingleSelect;
            };
            /**
             * @return Returns true if segment is currently selected, otherwise returns
             * false
             */
            MDCSegmentedButtonSegment.prototype.isSelected = function () {
              return this.foundation.isSelected();
            };
            /**
             * Sets segment to be selected
             */
            MDCSegmentedButtonSegment.prototype.setSelected = function () {
              this.foundation.setSelected();
            };
            /**
             * Sets segment to be not selected
             */
            MDCSegmentedButtonSegment.prototype.setUnselected = function () {
              this.foundation.setUnselected();
            };
            /**
             * @return Returns segment's segmentId if it was set by client
             */
            MDCSegmentedButtonSegment.prototype.getSegmentId = function () {
              return this.foundation.getSegmentId();
            };
            return MDCSegmentedButtonSegment;
          }(component_1.MDCComponent);
          exports.MDCSegmentedButtonSegment = MDCSegmentedButtonSegment;

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segment/constants.ts":
        /*!************************************************************!*\
  !*** ./packages/mdc-segmented-button/segment/constants.ts ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * Boolean strings for segment
           */
          exports.booleans = {
            TRUE: 'true',
            FALSE: 'false'
          };
          /**
           * Attributes referenced by segment
           */
          exports.attributes = {
            ARIA_CHECKED: 'aria-checked',
            ARIA_PRESSED: 'aria-pressed',
            DATA_SEGMENT_ID: 'data-segment-id'
          };
          /**
           * Events received or emitted by segment
           */
          exports.events = {
            CLICK: 'click',
            SELECTED: 'selected'
          };
          /**
           * Style classes for segment
           */
          exports.cssClasses = {
            SELECTED: 'mdc-segmented-button__segment--selected'
          };

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segment/foundation.ts":
        /*!*************************************************************!*\
  !*** ./packages/mdc-segmented-button/segment/foundation.ts ***!
  \*************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-segmented-button/segment/constants.ts");
          var emptyClientRect = {
            bottom: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0,
            width: 0
          };
          var MDCSegmentedButtonSegmentFoundation = /** @class */function (_super) {
            __extends(MDCSegmentedButtonSegmentFoundation, _super);
            function MDCSegmentedButtonSegmentFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCSegmentedButtonSegmentFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCSegmentedButtonSegmentFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  isSingleSelect: function isSingleSelect() {
                    return false;
                  }, getAttr: function getAttr() {
                    return '';
                  }, setAttr: function setAttr() {
                    return undefined;
                  },
                  addClass: function addClass() {
                    return undefined;
                  }, removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  notifySelectedChange: function notifySelectedChange() {
                    return undefined;
                  },
                  getRootBoundingClientRect: function getRootBoundingClientRect() {
                    return emptyClientRect;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            /**
             * @return Returns true if segment is currently selected, otherwise returns
             * false
             */
            MDCSegmentedButtonSegmentFoundation.prototype.isSelected = function () {
              return this.adapter.hasClass(constants_1.cssClasses.SELECTED);
            };
            /**
             * Sets segment to be selected
             */
            MDCSegmentedButtonSegmentFoundation.prototype.setSelected = function () {
              this.adapter.addClass(constants_1.cssClasses.SELECTED);
              this.setAriaAttr(constants_1.booleans.TRUE);
            };
            /**
             * Sets segment to be not selected
             */
            MDCSegmentedButtonSegmentFoundation.prototype.setUnselected = function () {
              this.adapter.removeClass(constants_1.cssClasses.SELECTED);
              this.setAriaAttr(constants_1.booleans.FALSE);
            };
            /**
             * @return Returns segment's segmentId if it was set by client
             */
            MDCSegmentedButtonSegmentFoundation.prototype.getSegmentId = function () {
              var _a;
              return (_a = this.adapter.getAttr(constants_1.attributes.DATA_SEGMENT_ID)) !== null && _a !== void 0 ? _a : undefined;
            };
            /**
             * Called when segment is clicked. If the wrapping segmented button is single
             * select, doesn't allow segment to be set to not selected. Otherwise, toggles
             * segment's selected status. Finally, emits event to wrapping segmented
             * button.
             *
             * @event selected With detail - SegmentDetail
             */
            MDCSegmentedButtonSegmentFoundation.prototype.handleClick = function () {
              if (this.adapter.isSingleSelect()) {
                this.setSelected();
              } else {
                this.toggleSelection();
              }
              this.adapter.notifySelectedChange(this.isSelected());
            };
            /**
             * @return Returns bounding rectangle for ripple effect
             */
            MDCSegmentedButtonSegmentFoundation.prototype.getDimensions = function () {
              return this.adapter.getRootBoundingClientRect();
            };
            /**
             * Sets segment from not selected to selected, or selected to not selected
             */
            MDCSegmentedButtonSegmentFoundation.prototype.toggleSelection = function () {
              if (this.isSelected()) {
                this.setUnselected();
              } else {
                this.setSelected();
              }
            };
            /**
             * Sets appropriate aria attribute, based on wrapping segmented button's
             * single selected value, to new value
             *
             * @param value Value that represents selected status
             */
            MDCSegmentedButtonSegmentFoundation.prototype.setAriaAttr = function (value) {
              if (this.adapter.isSingleSelect()) {
                this.adapter.setAttr(constants_1.attributes.ARIA_CHECKED, value);
              } else {
                this.adapter.setAttr(constants_1.attributes.ARIA_PRESSED, value);
              }
            };
            return MDCSegmentedButtonSegmentFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSegmentedButtonSegmentFoundation = MDCSegmentedButtonSegmentFoundation;

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segment/index.ts":
        /*!********************************************************!*\
  !*** ./packages/mdc-segmented-button/segment/index.ts ***!
  \********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-segmented-button/segment/foundation.ts"));
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-segmented-button/segment/component.ts"));

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segmented-button/component.ts":
        /*!*********************************************************************!*\
  !*** ./packages/mdc-segmented-button/segmented-button/component.ts ***!
  \*********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! ../segment/component */ "./packages/mdc-segmented-button/segment/component.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-segmented-button/segmented-button/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-segmented-button/segmented-button/foundation.ts");
// TODO(b/152410470): Remove trailing underscores from private properties
// tslint:disable:strip-private-property-underscore
          var MDCSegmentedButton = /** @class */function (_super) {
            __extends(MDCSegmentedButton, _super);
            function MDCSegmentedButton() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSegmentedButton.attachTo = function (root) {
              return new MDCSegmentedButton(root);
            };
            Object.defineProperty(MDCSegmentedButton.prototype, "segments", {
              get: function get() {
                return this.segments_.slice();
              },
              enumerable: true,
              configurable: true
            });
            // initialSyncWithDOM
            MDCSegmentedButton.prototype.initialize = function (segmentFactory) {
              if (segmentFactory === void 0) {
                segmentFactory = function segmentFactory(el) {
                  return new component_2.MDCSegmentedButtonSegment(el);
                };
              }
              this.segmentFactory = segmentFactory;
              this.segments_ = this.instantiateSegments(this.segmentFactory);
            };
            /**
             * @param segmentFactory Factory to create new child segments
             * @return Returns list of child segments found in DOM
             */
            MDCSegmentedButton.prototype.instantiateSegments = function (segmentFactory) {
              var segmentElements = [].slice.call(this.root.querySelectorAll(constants_1.selectors.SEGMENT));
              return segmentElements.map(function (el) {
                return segmentFactory(el);
              });
            };
            MDCSegmentedButton.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleSelected = function (event) {
                _this.foundation.handleSelected(event.detail);
              };
              this.listen(constants_1.events.SELECTED, this.handleSelected);
              var isSingleSelect = this.foundation.isSingleSelect();
              this.segments_.forEach(function (segment, index) {
                segment.setIndex(index);
                segment.setIsSingleSelect(isSingleSelect);
              });
              var selectedSegments = this.segments_.filter(function (segment) {
                return segment.isSelected();
              });
              if (isSingleSelect && selectedSegments.length == 0 && this.segments_.length > 0) {
                throw new Error('No segment selected in singleSelect mdc-segmented-button');
              } else if (isSingleSelect && selectedSegments.length > 1) {
                throw new Error('Multiple segments selected in singleSelect mdc-segmented-button');
              }
            };
            MDCSegmentedButton.prototype.destroy = function () {
              this.segments_.forEach(function (segment) {
                segment.destroy();
              });
              this.unlisten(constants_1.events.SELECTED, this.handleSelected);
              _super.prototype.destroy.call(this);
            };
            MDCSegmentedButton.prototype.getDefaultFoundation = function () {
              var _this = this;
              var adapter = {
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                getSegments: function getSegments() {
                  return _this.mappedSegments();
                },
                selectSegment: function selectSegment(indexOrSegmentId) {
                  var segmentDetail = _this.mappedSegments().find(function (_segmentDetail) {
                    return _segmentDetail.index === indexOrSegmentId || _segmentDetail.segmentId === indexOrSegmentId;
                  });
                  if (segmentDetail) {
                    _this.segments_[segmentDetail.index].setSelected();
                  }
                },
                unselectSegment: function unselectSegment(indexOrSegmentId) {
                  var segmentDetail = _this.mappedSegments().find(function (_segmentDetail) {
                    return _segmentDetail.index === indexOrSegmentId || _segmentDetail.segmentId === indexOrSegmentId;
                  });
                  if (segmentDetail) {
                    _this.segments_[segmentDetail.index].setUnselected();
                  }
                },
                notifySelectedChange: function notifySelectedChange(detail) {
                  _this.emit(constants_1.events.CHANGE, detail, true /* shouldBubble */);
                }
              };
              return new foundation_1.MDCSegmentedButtonFoundation(adapter);
            };
            /**
             * @return Returns readonly list of selected child segments as SegmentDetails
             */
            MDCSegmentedButton.prototype.getSelectedSegments = function () {
              return this.foundation.getSelectedSegments();
            };
            /**
             * Sets identified segment to be selected
             *
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             */
            MDCSegmentedButton.prototype.selectSegment = function (indexOrSegmentId) {
              this.foundation.selectSegment(indexOrSegmentId);
            };
            /**
             * Sets identified segment to be not selected
             *
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             */
            MDCSegmentedButton.prototype.unselectSegment = function (indexOrSegmentId) {
              this.foundation.unselectSegment(indexOrSegmentId);
            };
            /**
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             * @return Returns true if identified child segment is currently selected,
             * otherwise returns false
             */
            MDCSegmentedButton.prototype.isSegmentSelected = function (indexOrSegmentId) {
              return this.foundation.isSegmentSelected(indexOrSegmentId);
            };
            /**
             * @return Returns child segments mapped to readonly SegmentDetail list
             */
            MDCSegmentedButton.prototype.mappedSegments = function () {
              return this.segments_.map(function (segment, index) {
                return {
                  index: index,
                  selected: segment.isSelected(),
                  segmentId: segment.getSegmentId()
                };
              });
            };
            return MDCSegmentedButton;
          }(component_1.MDCComponent);
          exports.MDCSegmentedButton = MDCSegmentedButton;

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segmented-button/constants.ts":
        /*!*********************************************************************!*\
  !*** ./packages/mdc-segmented-button/segmented-button/constants.ts ***!
  \*********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /**
           * Selectors used by segmented-button
           */
          exports.selectors = {
            SEGMENT: '.mdc-segmented-button__segment'
          };
          /**
           * Events received or emitted by segmented-button
           */
          exports.events = {
            SELECTED: 'selected',
            CHANGE: 'change'
          };
          /**
           * Style classes for segmented-button
           */
          exports.cssClasses = {
            SINGLE_SELECT: 'mdc-segmented-button--single-select'
          };

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segmented-button/foundation.ts":
        /*!**********************************************************************!*\
  !*** ./packages/mdc-segmented-button/segmented-button/foundation.ts ***!
  \**********************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-segmented-button/segmented-button/constants.ts");
          var MDCSegmentedButtonFoundation = /** @class */function (_super) {
            __extends(MDCSegmentedButtonFoundation, _super);
            function MDCSegmentedButtonFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCSegmentedButtonFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCSegmentedButtonFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  hasClass: function hasClass() {
                    return false;
                  }, getSegments: function getSegments() {
                    return [];
                  },
                  selectSegment: function selectSegment() {
                    return undefined;
                  },
                  unselectSegment: function unselectSegment() {
                    return undefined;
                  },
                  notifySelectedChange: function notifySelectedChange() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Sets identified child segment to be selected
             *
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             */
            MDCSegmentedButtonFoundation.prototype.selectSegment = function (indexOrSegmentId) {
              this.adapter.selectSegment(indexOrSegmentId);
            };
            /**
             * Sets identified child segment to be not selected
             *
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             */
            MDCSegmentedButtonFoundation.prototype.unselectSegment = function (indexOrSegmentId) {
              this.adapter.unselectSegment(indexOrSegmentId);
            };
            /**
             * @return Returns currently selected child segments as readonly list of
             * SegmentDetails
             */
            MDCSegmentedButtonFoundation.prototype.getSelectedSegments = function () {
              return this.adapter.getSegments().filter(function (segmentDetail) {
                return segmentDetail.selected;
              });
            };
            /**
             * @param indexOrSegmentId Number index or string segmentId that identifies
             * child segment
             * @return Returns true if identified child segment is currently selected,
             * otherwise returns false
             */
            MDCSegmentedButtonFoundation.prototype.isSegmentSelected = function (indexOrSegmentId) {
              return this.adapter.getSegments().some(function (segmentDetail) {
                return (segmentDetail.index === indexOrSegmentId || segmentDetail.segmentId === indexOrSegmentId) && segmentDetail.selected;
              });
            };
            /**
             * @return Returns true if segmented button is single select, otherwise
             * returns false
             */
            MDCSegmentedButtonFoundation.prototype.isSingleSelect = function () {
              return this.adapter.hasClass(constants_1.cssClasses.SINGLE_SELECT);
            };
            /**
             * Called when child segment's selected status may have changed. If segmented
             * button is single select, unselects all child segments other than identified
             * child segment. Finally, emits event to client.
             *
             * @param detail Child segment affected represented as SegmentDetail
             * @event change With detail - SegmentDetail
             */
            MDCSegmentedButtonFoundation.prototype.handleSelected = function (detail) {
              if (this.isSingleSelect()) {
                this.unselectPrevSelected(detail.index);
              }
              this.adapter.notifySelectedChange(detail);
            };
            /**
             * Sets all child segments to be not selected except for child segment
             * identified by index
             *
             * @param index Index of child segment to not unselect
             */
            MDCSegmentedButtonFoundation.prototype.unselectPrevSelected = function (index) {
              var e_1, _a;
              try {
                for (var _b = __values(this.getSelectedSegments()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var selectedSegment = _c.value;
                  if (selectedSegment.index !== index) {
                    this.unselectSegment(selectedSegment.index);
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            };
            return MDCSegmentedButtonFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSegmentedButtonFoundation = MDCSegmentedButtonFoundation;

          /***/ }),

        /***/ "./packages/mdc-segmented-button/segmented-button/index.ts":
        /*!*****************************************************************!*\
  !*** ./packages/mdc-segmented-button/segmented-button/index.ts ***!
  \*****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-segmented-button/segmented-button/foundation.ts"));
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-segmented-button/segmented-button/component.ts"));

          /***/ }),

        /***/ "./packages/mdc-select/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-select/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/floating-label/component */ "./packages/mdc-floating-label/component.ts");
          var component_3 = __webpack_require__(/*! @material/line-ripple/component */ "./packages/mdc-line-ripple/component.ts");
          var menuSurfaceConstants = __importStar(__webpack_require__(/*! @material/menu-surface/constants */ "./packages/mdc-menu-surface/constants.ts"));
          var component_4 = __webpack_require__(/*! @material/menu/component */ "./packages/mdc-menu/component.ts");
          var menuConstants = __importStar(__webpack_require__(/*! @material/menu/constants */ "./packages/mdc-menu/constants.ts"));
          var component_5 = __webpack_require__(/*! @material/notched-outline/component */ "./packages/mdc-notched-outline/component.ts");
          var component_6 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-select/foundation.ts");
          var component_7 = __webpack_require__(/*! ./helper-text/component */ "./packages/mdc-select/helper-text/component.ts");
          var component_8 = __webpack_require__(/*! ./icon/component */ "./packages/mdc-select/icon/component.ts");
          var MDCSelect = /** @class */function (_super) {
            __extends(MDCSelect, _super);
            function MDCSelect() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSelect.attachTo = function (root) {
              return new MDCSelect(root);
            };
            MDCSelect.prototype.initialize = function (labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
              if (labelFactory === void 0) {
                labelFactory = function labelFactory(el) {
                  return new component_2.MDCFloatingLabel(el);
                };
              }
              if (lineRippleFactory === void 0) {
                lineRippleFactory = function lineRippleFactory(el) {
                  return new component_3.MDCLineRipple(el);
                };
              }
              if (outlineFactory === void 0) {
                outlineFactory = function outlineFactory(el) {
                  return new component_5.MDCNotchedOutline(el);
                };
              }
              if (menuFactory === void 0) {
                menuFactory = function menuFactory(el) {
                  return new component_4.MDCMenu(el);
                };
              }
              if (iconFactory === void 0) {
                iconFactory = function iconFactory(el) {
                  return new component_8.MDCSelectIcon(el);
                };
              }
              if (helperTextFactory === void 0) {
                helperTextFactory = function helperTextFactory(el) {
                  return new component_7.MDCSelectHelperText(el);
                };
              }
              this.selectAnchor = this.root.querySelector(constants_1.strings.SELECT_ANCHOR_SELECTOR);
              this.selectedText = this.root.querySelector(constants_1.strings.SELECTED_TEXT_SELECTOR);
              this.hiddenInput = this.root.querySelector(constants_1.strings.HIDDEN_INPUT_SELECTOR);
              if (!this.selectedText) {
                throw new Error('MDCSelect: Missing required element: The following selector must be present: ' + ("'" + constants_1.strings.SELECTED_TEXT_SELECTOR + "'"));
              }
              if (this.selectAnchor.hasAttribute(constants_1.strings.ARIA_CONTROLS)) {
                var helperTextElement = document.getElementById(this.selectAnchor.getAttribute(constants_1.strings.ARIA_CONTROLS));
                if (helperTextElement) {
                  this.helperText = helperTextFactory(helperTextElement);
                }
              }
              this.menuSetup(menuFactory);
              var labelElement = this.root.querySelector(constants_1.strings.LABEL_SELECTOR);
              this.label = labelElement ? labelFactory(labelElement) : null;
              var lineRippleElement = this.root.querySelector(constants_1.strings.LINE_RIPPLE_SELECTOR);
              this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
              var outlineElement = this.root.querySelector(constants_1.strings.OUTLINE_SELECTOR);
              this.outline = outlineElement ? outlineFactory(outlineElement) : null;
              var leadingIcon = this.root.querySelector(constants_1.strings.LEADING_ICON_SELECTOR);
              if (leadingIcon) {
                this.leadingIcon = iconFactory(leadingIcon);
              }
              if (!this.root.classList.contains(constants_1.cssClasses.OUTLINED)) {
                this.ripple = this.createRipple();
              }
            };
            /**
             * Initializes the select's event listeners and internal state based
             * on the environment's state.
             */
            MDCSelect.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleFocus = function () {
                _this.foundation.handleFocus();
              };
              this.handleBlur = function () {
                _this.foundation.handleBlur();
              };
              this.handleClick = function (evt) {
                _this.selectAnchor.focus();
                _this.foundation.handleClick(_this.getNormalizedXCoordinate(evt));
              };
              this.handleKeydown = function (evt) {
                _this.foundation.handleKeydown(evt);
              };
              this.handleMenuItemAction = function (evt) {
                _this.foundation.handleMenuItemAction(evt.detail.index);
              };
              this.handleMenuOpened = function () {
                _this.foundation.handleMenuOpened();
              };
              this.handleMenuClosed = function () {
                _this.foundation.handleMenuClosed();
              };
              this.selectAnchor.addEventListener('focus', this.handleFocus);
              this.selectAnchor.addEventListener('blur', this.handleBlur);
              this.selectAnchor.addEventListener('click', this.handleClick);
              this.selectAnchor.addEventListener('keydown', this.handleKeydown);
              this.menu.listen(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed);
              this.menu.listen(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened);
              this.menu.listen(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction);
              if (this.hiddenInput) {
                if (this.hiddenInput.value) {
                  // If the hidden input already has a value, use it to restore the
                  // select's value. This can happen e.g. if the user goes back or (in
                  // some browsers) refreshes the page.
                  this.foundation.setValue(this.hiddenInput.value, /** skipNotify */true);
                  this.foundation.layout();
                  return;
                }
                this.hiddenInput.value = this.value;
              }
            };
            MDCSelect.prototype.destroy = function () {
              this.selectAnchor.removeEventListener('focus', this.handleFocus);
              this.selectAnchor.removeEventListener('blur', this.handleBlur);
              this.selectAnchor.removeEventListener('keydown', this.handleKeydown);
              this.selectAnchor.removeEventListener('click', this.handleClick);
              this.menu.unlisten(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed);
              this.menu.unlisten(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened);
              this.menu.unlisten(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction);
              this.menu.destroy();
              if (this.ripple) {
                this.ripple.destroy();
              }
              if (this.outline) {
                this.outline.destroy();
              }
              if (this.leadingIcon) {
                this.leadingIcon.destroy();
              }
              if (this.helperText) {
                this.helperText.destroy();
              }
              _super.prototype.destroy.call(this);
            };
            Object.defineProperty(MDCSelect.prototype, "value", {
              get: function get() {
                return this.foundation.getValue();
              },
              set: function set(value) {
                this.foundation.setValue(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "selectedIndex", {
              get: function get() {
                return this.foundation.getSelectedIndex();
              },
              set: function set(selectedIndex) {
                this.foundation.setSelectedIndex(selectedIndex, /** closeMenu */true);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "disabled", {
              get: function get() {
                return this.foundation.getDisabled();
              },
              set: function set(disabled) {
                this.foundation.setDisabled(disabled);
                if (this.hiddenInput) {
                  this.hiddenInput.disabled = disabled;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "leadingIconAriaLabel", {
              set: function set(label) {
                this.foundation.setLeadingIconAriaLabel(label);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "leadingIconContent", {
              /**
               * Sets the text content of the leading icon.
               */
              set: function set(content) {
                this.foundation.setLeadingIconContent(content);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "helperTextContent", {
              /**
               * Sets the text content of the helper text.
               */
              set: function set(content) {
                this.foundation.setHelperTextContent(content);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "useDefaultValidation", {
              /**
               * Enables or disables the default validation scheme where a required select
               * must be non-empty. Set to false for custom validation.
               * @param useDefaultValidation Set this to false to ignore default
               *     validation scheme.
               */
              set: function set(useDefaultValidation) {
                this.foundation.setUseDefaultValidation(useDefaultValidation);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "valid", {
              /**
               * Checks if the select is in a valid state.
               */
              get: function get() {
                return this.foundation.isValid();
              },
              /**
               * Sets the current invalid state of the select.
               */
              set: function set(isValid) {
                this.foundation.setValid(isValid);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelect.prototype, "required", {
              /**
               * Returns whether the select is required.
               */
              get: function get() {
                return this.foundation.getRequired();
              },
              /**
               * Sets the control to the required state.
               */
              set: function set(isRequired) {
                this.foundation.setRequired(isRequired);
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Re-calculates if the notched outline should be notched and if the label
             * should float.
             */
            MDCSelect.prototype.layout = function () {
              this.foundation.layout();
            };
            /**
             * Synchronizes the list of options with the state of the foundation. Call
             * this whenever menu options are dynamically updated.
             */
            MDCSelect.prototype.layoutOptions = function () {
              this.foundation.layoutOptions();
              this.menu.layout();
              // Update cached menuItemValues for adapter.
              this.menuItemValues = this.menu.items.map(function (el) {
                return el.getAttribute(constants_1.strings.VALUE_ATTR) || '';
              });
              if (this.hiddenInput) {
                this.hiddenInput.value = this.value;
              }
            };
            MDCSelect.prototype.getDefaultFoundation = function () {
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = __assign(__assign(__assign(__assign({}, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());
              return new foundation_2.MDCSelectFoundation(adapter, this.getFoundationMap());
            };
            /**
             * Handles setup for the menu.
             */
            MDCSelect.prototype.menuSetup = function (menuFactory) {
              this.menuElement = this.root.querySelector(constants_1.strings.MENU_SELECTOR);
              this.menu = menuFactory(this.menuElement);
              this.menu.hasTypeahead = true;
              this.menu.singleSelection = true;
              this.menuItemValues = this.menu.items.map(function (el) {
                return el.getAttribute(constants_1.strings.VALUE_ATTR) || '';
              });
            };
            MDCSelect.prototype.createRipple = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = __assign(__assign({}, component_6.MDCRipple.createAdapter({ root: this.selectAnchor })), { registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  _this.selectAnchor.addEventListener(evtType, handler);
                }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  _this.selectAnchor.removeEventListener(evtType, handler);
                } });
              // tslint:enable:object-literal-sort-keys
              return new component_6.MDCRipple(this.selectAnchor, new foundation_1.MDCRippleFoundation(adapter));
            };
            MDCSelect.prototype.getSelectAdapterMethods = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                getMenuItemAttr: function getMenuItemAttr(menuItem, attr) {
                  return menuItem.getAttribute(attr);
                },
                setSelectedText: function setSelectedText(text) {
                  _this.selectedText.textContent = text;
                },
                isSelectAnchorFocused: function isSelectAnchorFocused() {
                  return document.activeElement === _this.selectAnchor;
                },
                getSelectAnchorAttr: function getSelectAnchorAttr(attr) {
                  return _this.selectAnchor.getAttribute(attr);
                },
                setSelectAnchorAttr: function setSelectAnchorAttr(attr, value) {
                  _this.selectAnchor.setAttribute(attr, value);
                },
                removeSelectAnchorAttr: function removeSelectAnchorAttr(attr) {
                  _this.selectAnchor.removeAttribute(attr);
                },
                addMenuClass: function addMenuClass(className) {
                  _this.menuElement.classList.add(className);
                },
                removeMenuClass: function removeMenuClass(className) {
                  _this.menuElement.classList.remove(className);
                },
                openMenu: function openMenu() {
                  _this.menu.open = true;
                },
                closeMenu: function closeMenu() {
                  _this.menu.open = false;
                },
                getAnchorElement: function getAnchorElement() {
                  return _this.root.querySelector(constants_1.strings.SELECT_ANCHOR_SELECTOR);
                },
                setMenuAnchorElement: function setMenuAnchorElement(anchorEl) {
                  _this.menu.setAnchorElement(anchorEl);
                },
                setMenuAnchorCorner: function setMenuAnchorCorner(anchorCorner) {
                  _this.menu.setAnchorCorner(anchorCorner);
                },
                setMenuWrapFocus: function setMenuWrapFocus(wrapFocus) {
                  _this.menu.wrapFocus = wrapFocus;
                },
                getSelectedIndex: function getSelectedIndex() {
                  var index = _this.menu.selectedIndex;
                  return index instanceof Array ? index[0] : index;
                },
                setSelectedIndex: function setSelectedIndex(index) {
                  _this.menu.selectedIndex = index;
                },
                focusMenuItemAtIndex: function focusMenuItemAtIndex(index) {
                  _this.menu.items[index].focus();
                },
                getMenuItemCount: function getMenuItemCount() {
                  return _this.menu.items.length;
                },
                // Cache menu item values. layoutOptions() updates this cache.
                getMenuItemValues: function getMenuItemValues() {
                  return _this.menuItemValues;
                },
                getMenuItemTextAtIndex: function getMenuItemTextAtIndex(index) {
                  return _this.menu.getPrimaryTextAtIndex(index);
                },
                isTypeaheadInProgress: function isTypeaheadInProgress() {
                  return _this.menu.typeaheadInProgress;
                },
                typeaheadMatchItem: function typeaheadMatchItem(nextChar, startingIndex) {
                  return _this.menu.typeaheadMatchItem(nextChar, startingIndex);
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            MDCSelect.prototype.getCommonAdapterMethods = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                setRippleCenter: function setRippleCenter(normalizedX) {
                  _this.lineRipple && _this.lineRipple.setRippleCenter(normalizedX);
                },
                activateBottomLine: function activateBottomLine() {
                  _this.lineRipple && _this.lineRipple.activate();
                },
                deactivateBottomLine: function deactivateBottomLine() {
                  _this.lineRipple && _this.lineRipple.deactivate();
                },
                notifyChange: function notifyChange(value) {
                  var index = _this.selectedIndex;
                  _this.emit(constants_1.strings.CHANGE_EVENT, { value: value, index: index }, true /* shouldBubble  */);
                  if (_this.hiddenInput) {
                    _this.hiddenInput.value = value;
                  }
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            MDCSelect.prototype.getOutlineAdapterMethods = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                hasOutline: function hasOutline() {
                  return Boolean(_this.outline);
                },
                notchOutline: function notchOutline(labelWidth) {
                  _this.outline && _this.outline.notch(labelWidth);
                },
                closeOutline: function closeOutline() {
                  _this.outline && _this.outline.closeNotch();
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            MDCSelect.prototype.getLabelAdapterMethods = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                hasLabel: function hasLabel() {
                  return !!_this.label;
                },
                floatLabel: function floatLabel(shouldFloat) {
                  _this.label && _this.label.float(shouldFloat);
                },
                getLabelWidth: function getLabelWidth() {
                  return _this.label ? _this.label.getWidth() : 0;
                },
                setLabelRequired: function setLabelRequired(isRequired) {
                  _this.label && _this.label.setRequired(isRequired);
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            /**
             * Calculates where the line ripple should start based on the x coordinate within the component.
             */
            MDCSelect.prototype.getNormalizedXCoordinate = function (evt) {
              var targetClientRect = evt.target.getBoundingClientRect();
              var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
              return xCoordinate - targetClientRect.left;
            };
            MDCSelect.prototype.isTouchEvent = function (evt) {
              return Boolean(evt.touches);
            };
            /**
             * Returns a map of all subcomponents to subfoundations.
             */
            MDCSelect.prototype.getFoundationMap = function () {
              return {
                helperText: this.helperText ? this.helperText.foundationForSelect : undefined,
                leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForSelect : undefined
              };
            };
            return MDCSelect;
          }(component_1.MDCComponent);
          exports.MDCSelect = MDCSelect;

          /***/ }),

        /***/ "./packages/mdc-select/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-select/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ACTIVATED: 'mdc-select--activated',
            DISABLED: 'mdc-select--disabled',
            FOCUSED: 'mdc-select--focused',
            INVALID: 'mdc-select--invalid',
            MENU_INVALID: 'mdc-select__menu--invalid',
            OUTLINED: 'mdc-select--outlined',
            REQUIRED: 'mdc-select--required',
            ROOT: 'mdc-select',
            WITH_LEADING_ICON: 'mdc-select--with-leading-icon'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ARIA_CONTROLS: 'aria-controls',
            ARIA_DESCRIBEDBY: 'aria-describedby',
            ARIA_SELECTED_ATTR: 'aria-selected',
            CHANGE_EVENT: 'MDCSelect:change',
            HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
            LABEL_SELECTOR: '.mdc-floating-label',
            LEADING_ICON_SELECTOR: '.mdc-select__icon',
            LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
            MENU_SELECTOR: '.mdc-select__menu',
            OUTLINE_SELECTOR: '.mdc-notched-outline',
            SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
            SELECT_ANCHOR_SELECTOR: '.mdc-select__anchor',
            VALUE_ATTR: 'data-value'
          };
          exports.strings = strings;
          var numbers = {
            LABEL_SCALE: 0.75,
            UNSET_INDEX: -1,
            CLICK_DEBOUNCE_TIMEOUT_MS: 330
          };
          exports.numbers = numbers;

          /***/ }),

        /***/ "./packages/mdc-select/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-select/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var keyboard_1 = __webpack_require__(/*! @material/dom/keyboard */ "./packages/mdc-dom/keyboard.ts");
          var constants_1 = __webpack_require__(/*! @material/menu-surface/constants */ "./packages/mdc-menu-surface/constants.ts");
          var constants_2 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/constants.ts");
          var MDCSelectFoundation = /** @class */function (_super) {
            __extends(MDCSelectFoundation, _super);
            /* istanbul ignore next: optional argument is not a branch statement */
            /**
             * @param adapter
             * @param foundationMap Map from subcomponent names to their subfoundations.
             */
            function MDCSelectFoundation(adapter, foundationMap) {
              if (foundationMap === void 0) {
                foundationMap = {};
              }
              var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this;
              // Disabled state
              _this.disabled = false;
              // isMenuOpen is used to track the state of the menu by listening to the
              // MDCMenuSurface:closed event For reference, menu.open will return false if
              // the menu is still closing, but isMenuOpen returns false only after the menu
              // has closed
              _this.isMenuOpen = false;
              // By default, select is invalid if it is required but no value is selected.
              _this.useDefaultValidation = true;
              _this.customValidity = true;
              _this.lastSelectedIndex = constants_2.numbers.UNSET_INDEX;
              _this.clickDebounceTimeout = 0;
              _this.recentlyClicked = false;
              _this.leadingIcon = foundationMap.leadingIcon;
              _this.helperText = foundationMap.helperText;
              return _this;
            }
            Object.defineProperty(MDCSelectFoundation, "cssClasses", {
              get: function get() {
                return constants_2.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectFoundation, "numbers", {
              get: function get() {
                return constants_2.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectFoundation, "strings", {
              get: function get() {
                return constants_2.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
              /**
               * See {@link MDCSelectAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  activateBottomLine: function activateBottomLine() {
                    return undefined;
                  },
                  deactivateBottomLine: function deactivateBottomLine() {
                    return undefined;
                  },
                  getSelectedIndex: function getSelectedIndex() {
                    return -1;
                  },
                  setSelectedIndex: function setSelectedIndex() {
                    return undefined;
                  },
                  hasLabel: function hasLabel() {
                    return false;
                  },
                  floatLabel: function floatLabel() {
                    return undefined;
                  },
                  getLabelWidth: function getLabelWidth() {
                    return 0;
                  },
                  setLabelRequired: function setLabelRequired() {
                    return undefined;
                  },
                  hasOutline: function hasOutline() {
                    return false;
                  },
                  notchOutline: function notchOutline() {
                    return undefined;
                  },
                  closeOutline: function closeOutline() {
                    return undefined;
                  },
                  setRippleCenter: function setRippleCenter() {
                    return undefined;
                  },
                  notifyChange: function notifyChange() {
                    return undefined;
                  },
                  setSelectedText: function setSelectedText() {
                    return undefined;
                  },
                  isSelectAnchorFocused: function isSelectAnchorFocused() {
                    return false;
                  },
                  getSelectAnchorAttr: function getSelectAnchorAttr() {
                    return '';
                  },
                  setSelectAnchorAttr: function setSelectAnchorAttr() {
                    return undefined;
                  },
                  removeSelectAnchorAttr: function removeSelectAnchorAttr() {
                    return undefined;
                  },
                  addMenuClass: function addMenuClass() {
                    return undefined;
                  },
                  removeMenuClass: function removeMenuClass() {
                    return undefined;
                  },
                  openMenu: function openMenu() {
                    return undefined;
                  },
                  closeMenu: function closeMenu() {
                    return undefined;
                  },
                  getAnchorElement: function getAnchorElement() {
                    return null;
                  },
                  setMenuAnchorElement: function setMenuAnchorElement() {
                    return undefined;
                  },
                  setMenuAnchorCorner: function setMenuAnchorCorner() {
                    return undefined;
                  },
                  setMenuWrapFocus: function setMenuWrapFocus() {
                    return undefined;
                  },
                  focusMenuItemAtIndex: function focusMenuItemAtIndex() {
                    return undefined;
                  },
                  getMenuItemCount: function getMenuItemCount() {
                    return 0;
                  },
                  getMenuItemValues: function getMenuItemValues() {
                    return [];
                  },
                  getMenuItemTextAtIndex: function getMenuItemTextAtIndex() {
                    return '';
                  },
                  isTypeaheadInProgress: function isTypeaheadInProgress() {
                    return false;
                  },
                  typeaheadMatchItem: function typeaheadMatchItem() {
                    return -1;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            /** Returns the index of the currently selected menu item, or -1 if none. */
            MDCSelectFoundation.prototype.getSelectedIndex = function () {
              return this.adapter.getSelectedIndex();
            };
            MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu, skipNotify) {
              if (closeMenu === void 0) {
                closeMenu = false;
              }
              if (skipNotify === void 0) {
                skipNotify = false;
              }
              if (index >= this.adapter.getMenuItemCount()) {
                return;
              }
              if (index === constants_2.numbers.UNSET_INDEX) {
                this.adapter.setSelectedText('');
              } else {
                this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
              }
              this.adapter.setSelectedIndex(index);
              if (closeMenu) {
                this.adapter.closeMenu();
              }
              if (!skipNotify && this.lastSelectedIndex !== index) {
                this.handleChange();
              }
              this.lastSelectedIndex = index;
            };
            MDCSelectFoundation.prototype.setValue = function (value, skipNotify) {
              if (skipNotify === void 0) {
                skipNotify = false;
              }
              var index = this.adapter.getMenuItemValues().indexOf(value);
              this.setSelectedIndex(index, /** closeMenu */false, skipNotify);
            };
            MDCSelectFoundation.prototype.getValue = function () {
              var index = this.adapter.getSelectedIndex();
              var menuItemValues = this.adapter.getMenuItemValues();
              return index !== constants_2.numbers.UNSET_INDEX ? menuItemValues[index] : '';
            };
            MDCSelectFoundation.prototype.getDisabled = function () {
              return this.disabled;
            };
            MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
              this.disabled = isDisabled;
              if (this.disabled) {
                this.adapter.addClass(constants_2.cssClasses.DISABLED);
                this.adapter.closeMenu();
              } else {
                this.adapter.removeClass(constants_2.cssClasses.DISABLED);
              }
              if (this.leadingIcon) {
                this.leadingIcon.setDisabled(this.disabled);
              }
              if (this.disabled) {
                // Prevent click events from focusing select. Simply pointer-events: none
                // is not enough since screenreader clicks may bypass this.
                this.adapter.removeSelectAnchorAttr('tabindex');
              } else {
                this.adapter.setSelectAnchorAttr('tabindex', '0');
              }
              this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());
            };
            /** Opens the menu. */
            MDCSelectFoundation.prototype.openMenu = function () {
              this.adapter.addClass(constants_2.cssClasses.ACTIVATED);
              this.adapter.openMenu();
              this.isMenuOpen = true;
              this.adapter.setSelectAnchorAttr('aria-expanded', 'true');
            };
            /**
             * @param content Sets the content of the helper text.
             */
            MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
              if (this.helperText) {
                this.helperText.setContent(content);
              }
            };
            /**
             * Re-calculates if the notched outline should be notched and if the label
             * should float.
             */
            MDCSelectFoundation.prototype.layout = function () {
              if (this.adapter.hasLabel()) {
                var optionHasValue = this.getValue().length > 0;
                var isFocused = this.adapter.hasClass(constants_2.cssClasses.FOCUSED);
                var shouldFloatAndNotch = optionHasValue || isFocused;
                var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
                this.notchOutline(shouldFloatAndNotch);
                this.adapter.floatLabel(shouldFloatAndNotch);
                this.adapter.setLabelRequired(isRequired);
              }
            };
            /**
             * Synchronizes the list of options with the state of the foundation. Call
             * this whenever menu options are dynamically updated.
             */
            MDCSelectFoundation.prototype.layoutOptions = function () {
              var menuItemValues = this.adapter.getMenuItemValues();
              var selectedIndex = menuItemValues.indexOf(this.getValue());
              this.setSelectedIndex(selectedIndex, /** closeMenu */false, /** skipNotify */true);
            };
            MDCSelectFoundation.prototype.handleMenuOpened = function () {
              if (this.adapter.getMenuItemValues().length === 0) {
                return;
              }
              // Menu should open to the last selected element, should open to first menu item otherwise.
              var selectedIndex = this.getSelectedIndex();
              var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
              this.adapter.focusMenuItemAtIndex(focusItemIndex);
            };
            MDCSelectFoundation.prototype.handleMenuClosed = function () {
              this.adapter.removeClass(constants_2.cssClasses.ACTIVATED);
              this.isMenuOpen = false;
              this.adapter.setSelectAnchorAttr('aria-expanded', 'false');
              // Unfocus the select if menu is closed without a selection
              if (!this.adapter.isSelectAnchorFocused()) {
                this.blur();
              }
            };
            /**
             * Handles value changes, via change event or programmatic updates.
             */
            MDCSelectFoundation.prototype.handleChange = function () {
              this.layout();
              this.adapter.notifyChange(this.getValue());
              var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
              if (isRequired && this.useDefaultValidation) {
                this.setValid(this.isValid());
              }
            };
            MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {
              this.setSelectedIndex(index, /** closeMenu */true);
            };
            /**
             * Handles focus events from select element.
             */
            MDCSelectFoundation.prototype.handleFocus = function () {
              this.adapter.addClass(constants_2.cssClasses.FOCUSED);
              this.layout();
              this.adapter.activateBottomLine();
            };
            /**
             * Handles blur events from select element.
             */
            MDCSelectFoundation.prototype.handleBlur = function () {
              if (this.isMenuOpen) {
                return;
              }
              this.blur();
            };
            MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
              if (this.disabled || this.recentlyClicked) {
                return;
              }
              this.setClickDebounceTimeout();
              if (this.isMenuOpen) {
                this.adapter.closeMenu();
                return;
              }
              this.adapter.setRippleCenter(normalizedX);
              this.openMenu();
            };
            /**
             * Handles keydown events on select element. Depending on the type of
             * character typed, does typeahead matching or opens menu.
             */
            MDCSelectFoundation.prototype.handleKeydown = function (event) {
              if (this.isMenuOpen || !this.adapter.hasClass(constants_2.cssClasses.FOCUSED)) {
                return;
              }
              var isEnter = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ENTER;
              var isSpace = keyboard_1.normalizeKey(event) === keyboard_1.KEY.SPACEBAR;
              var arrowUp = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ARROW_UP;
              var arrowDown = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ARROW_DOWN;
              // Typeahead
              if (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress()) {
                var key = isSpace ? ' ' : event.key;
                var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
                if (typeaheadNextIndex >= 0) {
                  this.setSelectedIndex(typeaheadNextIndex);
                }
                event.preventDefault();
                return;
              }
              if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
                return;
              }
              // Increment/decrement index as necessary and open menu.
              if (arrowUp && this.getSelectedIndex() > 0) {
                this.setSelectedIndex(this.getSelectedIndex() - 1);
              } else if (arrowDown && this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) {
                this.setSelectedIndex(this.getSelectedIndex() + 1);
              }
              this.openMenu();
              event.preventDefault();
            };
            /**
             * Opens/closes the notched outline.
             */
            MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
              if (!this.adapter.hasOutline()) {
                return;
              }
              var isFocused = this.adapter.hasClass(constants_2.cssClasses.FOCUSED);
              if (openNotch) {
                var labelScale = constants_2.numbers.LABEL_SCALE;
                var labelWidth = this.adapter.getLabelWidth() * labelScale;
                this.adapter.notchOutline(labelWidth);
              } else if (!isFocused) {
                this.adapter.closeOutline();
              }
            };
            /**
             * Sets the aria label of the leading icon.
             */
            MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
              if (this.leadingIcon) {
                this.leadingIcon.setAriaLabel(label);
              }
            };
            /**
             * Sets the text content of the leading icon.
             */
            MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
              if (this.leadingIcon) {
                this.leadingIcon.setContent(content);
              }
            };
            MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {
              this.useDefaultValidation = useDefaultValidation;
            };
            MDCSelectFoundation.prototype.setValid = function (isValid) {
              if (!this.useDefaultValidation) {
                this.customValidity = isValid;
              }
              this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());
              if (isValid) {
                this.adapter.removeClass(constants_2.cssClasses.INVALID);
                this.adapter.removeMenuClass(constants_2.cssClasses.MENU_INVALID);
              } else {
                this.adapter.addClass(constants_2.cssClasses.INVALID);
                this.adapter.addMenuClass(constants_2.cssClasses.MENU_INVALID);
              }
              this.syncHelperTextValidity(isValid);
            };
            MDCSelectFoundation.prototype.isValid = function () {
              if (this.useDefaultValidation && this.adapter.hasClass(constants_2.cssClasses.REQUIRED) && !this.adapter.hasClass(constants_2.cssClasses.DISABLED)) {
                // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
                // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
                return this.getSelectedIndex() !== constants_2.numbers.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
              }
              return this.customValidity;
            };
            MDCSelectFoundation.prototype.setRequired = function (isRequired) {
              if (isRequired) {
                this.adapter.addClass(constants_2.cssClasses.REQUIRED);
              } else {
                this.adapter.removeClass(constants_2.cssClasses.REQUIRED);
              }
              this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());
              this.adapter.setLabelRequired(isRequired);
            };
            MDCSelectFoundation.prototype.getRequired = function () {
              return this.adapter.getSelectAnchorAttr('aria-required') === 'true';
            };
            MDCSelectFoundation.prototype.init = function () {
              var anchorEl = this.adapter.getAnchorElement();
              if (anchorEl) {
                this.adapter.setMenuAnchorElement(anchorEl);
                this.adapter.setMenuAnchorCorner(constants_1.Corner.BOTTOM_START);
              }
              this.adapter.setMenuWrapFocus(false);
              this.setDisabled(this.adapter.hasClass(constants_2.cssClasses.DISABLED));
              this.syncHelperTextValidity(!this.adapter.hasClass(constants_2.cssClasses.INVALID));
              this.layout();
              this.layoutOptions();
            };
            /**
             * Unfocuses the select component.
             */
            MDCSelectFoundation.prototype.blur = function () {
              this.adapter.removeClass(constants_2.cssClasses.FOCUSED);
              this.layout();
              this.adapter.deactivateBottomLine();
              var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
              if (isRequired && this.useDefaultValidation) {
                this.setValid(this.isValid());
              }
            };
            MDCSelectFoundation.prototype.syncHelperTextValidity = function (isValid) {
              if (!this.helperText) {
                return;
              }
              this.helperText.setValidity(isValid);
              var helperTextVisible = this.helperText.isVisible();
              var helperTextId = this.helperText.getId();
              if (helperTextVisible && helperTextId) {
                this.adapter.setSelectAnchorAttr(constants_2.strings.ARIA_DESCRIBEDBY, helperTextId);
              } else {
                // Needed because screenreaders will read labels pointed to by
                // `aria-describedby` even if they are `aria-hidden`.
                this.adapter.removeSelectAnchorAttr(constants_2.strings.ARIA_DESCRIBEDBY);
              }
            };
            MDCSelectFoundation.prototype.setClickDebounceTimeout = function () {
              var _this = this;
              clearTimeout(this.clickDebounceTimeout);
              this.clickDebounceTimeout = setTimeout(function () {
                _this.recentlyClicked = false;
              }, constants_2.numbers.CLICK_DEBOUNCE_TIMEOUT_MS);
              this.recentlyClicked = true;
            };
            return MDCSelectFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSelectFoundation = MDCSelectFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSelectFoundation;

          /***/ }),

        /***/ "./packages/mdc-select/helper-text/component.ts":
        /*!******************************************************!*\
  !*** ./packages/mdc-select/helper-text/component.ts ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-select/helper-text/foundation.ts");
          var MDCSelectHelperText = /** @class */function (_super) {
            __extends(MDCSelectHelperText, _super);
            function MDCSelectHelperText() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSelectHelperText.attachTo = function (root) {
              return new MDCSelectHelperText(root);
            };
            Object.defineProperty(MDCSelectHelperText.prototype, "foundationForSelect", {
              // Provided for access by MDCSelect component
              get: function get() {
                return this.foundation;
              },
              enumerable: true,
              configurable: true
            });
            MDCSelectHelperText.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                getAttr: function getAttr(attr) {
                  return _this.root.getAttribute(attr);
                },
                setAttr: function setAttr(attr, value) {
                  return _this.root.setAttribute(attr, value);
                },
                removeAttr: function removeAttr(attr) {
                  return _this.root.removeAttribute(attr);
                },
                setContent: function setContent(content) {
                  _this.root.textContent = content;
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCSelectHelperTextFoundation(adapter);
            };
            return MDCSelectHelperText;
          }(component_1.MDCComponent);
          exports.MDCSelectHelperText = MDCSelectHelperText;

          /***/ }),

        /***/ "./packages/mdc-select/helper-text/constants.ts":
        /*!******************************************************!*\
  !*** ./packages/mdc-select/helper-text/constants.ts ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            ARIA_HIDDEN: 'aria-hidden',
            ROLE: 'role'
          };
          exports.strings = strings;
          var cssClasses = {
            HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
            HELPER_TEXT_VALIDATION_MSG_PERSISTENT: 'mdc-select-helper-text--validation-msg-persistent'
          };
          exports.cssClasses = cssClasses;

          /***/ }),

        /***/ "./packages/mdc-select/helper-text/foundation.ts":
        /*!*******************************************************!*\
  !*** ./packages/mdc-select/helper-text/foundation.ts ***!
  \*******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/helper-text/constants.ts");
          var MDCSelectHelperTextFoundation = /** @class */function (_super) {
            __extends(MDCSelectHelperTextFoundation, _super);
            function MDCSelectHelperTextFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
              /**
               * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  },
                  getAttr: function getAttr() {
                    return null;
                  },
                  removeAttr: function removeAttr() {
                    return undefined;
                  },
                  setContent: function setContent() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            /**
             * @return The ID of the helper text, or null if none is set.
             */
            MDCSelectHelperTextFoundation.prototype.getId = function () {
              return this.adapter.getAttr('id');
            };
            /**
             * @return Whether the helper text is currently visible.
             */
            MDCSelectHelperTextFoundation.prototype.isVisible = function () {
              return this.adapter.getAttr(constants_1.strings.ARIA_HIDDEN) !== 'true';
            };
            /**
             * Sets the content of the helper text field.
             */
            MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
              this.adapter.setContent(content);
            };
            /**
             * Sets the helper text to act as a validation message.
             * By default, validation messages are hidden when the select is valid and
             * visible when the select is invalid.
             *
             * @param isValidation True to make the helper text act as an error validation
             *     message.
             */
            MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
              if (isValidation) {
                this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              }
            };
            /**
             * Sets the persistency of the validation helper text.
             * This keeps the validation message visible even if the select is valid,
             * though it will be displayed in the normal (grey) color.
             */
            MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {
              if (isPersistent) {
                this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
              }
            };
            /**
             * When acting as a validation message, shows/hides the helper text and
             * triggers alerts as necessary based on the select's validity.
             */
            MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
              var isValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              if (!isValidationMsg) {
                // Non-validating helper-text is always displayed and does not participate
                // in validation logic.
                return;
              }
              var isPersistentValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
              // Validating helper text is displayed if select is invalid, unless it is
              // set as persistent, in which case it always displays.
              var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
              if (msgShouldDisplay) {
                this.showToScreenReader();
                // In addition to displaying, also trigger an alert if the select
                // has become invalid.
                if (!selectIsValid) {
                  this.adapter.setAttr(constants_1.strings.ROLE, 'alert');
                } else {
                  this.adapter.removeAttr(constants_1.strings.ROLE);
                }
                return;
              }
              // Hide everything.
              this.adapter.removeAttr(constants_1.strings.ROLE);
              this.hide();
            };
            /**
             * Makes the helper text visible to screen readers.
             */
            MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
              this.adapter.removeAttr(constants_1.strings.ARIA_HIDDEN);
            };
            /**
             * Hides the help text from screen readers.
             */
            MDCSelectHelperTextFoundation.prototype.hide = function () {
              this.adapter.setAttr(constants_1.strings.ARIA_HIDDEN, 'true');
            };
            return MDCSelectHelperTextFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSelectHelperTextFoundation = MDCSelectHelperTextFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSelectHelperTextFoundation;

          /***/ }),

        /***/ "./packages/mdc-select/helper-text/index.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-select/helper-text/index.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-select/helper-text/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-select/helper-text/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/helper-text/constants.ts");
          exports.helperTextCssClasses = constants_1.cssClasses;
          exports.helperTextStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-select/icon/component.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-select/icon/component.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-select/icon/foundation.ts");
          var MDCSelectIcon = /** @class */function (_super) {
            __extends(MDCSelectIcon, _super);
            function MDCSelectIcon() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSelectIcon.attachTo = function (root) {
              return new MDCSelectIcon(root);
            };
            Object.defineProperty(MDCSelectIcon.prototype, "foundationForSelect", {
              // Provided for access by MDCSelect component
              get: function get() {
                return this.foundation;
              },
              enumerable: true,
              configurable: true
            });
            MDCSelectIcon.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                getAttr: function getAttr(attr) {
                  return _this.root.getAttribute(attr);
                },
                setAttr: function setAttr(attr, value) {
                  return _this.root.setAttribute(attr, value);
                },
                removeAttr: function removeAttr(attr) {
                  return _this.root.removeAttribute(attr);
                },
                setContent: function setContent(content) {
                  _this.root.textContent = content;
                },
                registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.listen(evtType, handler);
                },
                deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.unlisten(evtType, handler);
                },
                notifyIconAction: function notifyIconAction() {
                  return _this.emit(foundation_1.MDCSelectIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCSelectIconFoundation(adapter);
            };
            return MDCSelectIcon;
          }(component_1.MDCComponent);
          exports.MDCSelectIcon = MDCSelectIcon;

          /***/ }),

        /***/ "./packages/mdc-select/icon/constants.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-select/icon/constants.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            ICON_EVENT: 'MDCSelect:icon',
            ICON_ROLE: 'button'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-select/icon/foundation.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-select/icon/foundation.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/icon/constants.ts");
          var INTERACTION_EVENTS = ['click', 'keydown'];
          var MDCSelectIconFoundation = /** @class */function (_super) {
            __extends(MDCSelectIconFoundation, _super);
            function MDCSelectIconFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCSelectIconFoundation.defaultAdapter), adapter)) || this;
              _this.savedTabIndex_ = null;
              _this.interactionHandler_ = function (evt) {
                return _this.handleInteraction(evt);
              };
              return _this;
            }
            Object.defineProperty(MDCSelectIconFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSelectIconFoundation, "defaultAdapter", {
              /**
               * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  getAttr: function getAttr() {
                    return null;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  },
                  removeAttr: function removeAttr() {
                    return undefined;
                  },
                  setContent: function setContent() {
                    return undefined;
                  },
                  registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                  },
                  deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                  },
                  notifyIconAction: function notifyIconAction() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCSelectIconFoundation.prototype.init = function () {
              var _this = this;
              this.savedTabIndex_ = this.adapter.getAttr('tabindex');
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.registerInteractionHandler(evtType, _this.interactionHandler_);
              });
            };
            MDCSelectIconFoundation.prototype.destroy = function () {
              var _this = this;
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.deregisterInteractionHandler(evtType, _this.interactionHandler_);
              });
            };
            MDCSelectIconFoundation.prototype.setDisabled = function (disabled) {
              if (!this.savedTabIndex_) {
                return;
              }
              if (disabled) {
                this.adapter.setAttr('tabindex', '-1');
                this.adapter.removeAttr('role');
              } else {
                this.adapter.setAttr('tabindex', this.savedTabIndex_);
                this.adapter.setAttr('role', constants_1.strings.ICON_ROLE);
              }
            };
            MDCSelectIconFoundation.prototype.setAriaLabel = function (label) {
              this.adapter.setAttr('aria-label', label);
            };
            MDCSelectIconFoundation.prototype.setContent = function (content) {
              this.adapter.setContent(content);
            };
            MDCSelectIconFoundation.prototype.handleInteraction = function (evt) {
              var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
              if (evt.type === 'click' || isEnterKey) {
                this.adapter.notifyIconAction();
              }
            };
            return MDCSelectIconFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSelectIconFoundation = MDCSelectIconFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSelectIconFoundation;

          /***/ }),

        /***/ "./packages/mdc-select/icon/index.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-select/icon/index.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-select/icon/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-select/icon/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-select/icon/constants.ts");
          exports.iconStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-select/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-select/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-select/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-select/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-select/foundation.ts"));
          __export(__webpack_require__(/*! ./helper-text/index */ "./packages/mdc-select/helper-text/index.ts"));
          __export(__webpack_require__(/*! ./icon/index */ "./packages/mdc-select/icon/index.ts"));

          /***/ }),

        /***/ "./packages/mdc-slider/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-slider/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-slider/constants.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-slider/foundation.ts");
          var types_1 = __webpack_require__(/*! ./types */ "./packages/mdc-slider/types.ts");
          /** Vanilla JS implementation of slider component. */
          var MDCSlider = /** @class */function (_super) {
            __extends(MDCSlider, _super);
            function MDCSlider() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.skipInitialUIUpdate = false;
              // Function that maps a slider value to the value of the `aria-valuetext`
              // attribute on the thumb element.
              _this.valueToAriaValueTextFn = null;
              return _this;
            }
            MDCSlider.attachTo = function (root, options) {
              if (options === void 0) {
                options = {};
              }
              return new MDCSlider(root, undefined, options);
            };
            MDCSlider.prototype.getDefaultFoundation = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same
              // order as the adapter interface.
              var adapter = {
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                addThumbClass: function addThumbClass(className, thumb) {
                  _this.getThumbEl(thumb).classList.add(className);
                },
                removeThumbClass: function removeThumbClass(className, thumb) {
                  _this.getThumbEl(thumb).classList.remove(className);
                },
                getAttribute: function getAttribute(attribute) {
                  return _this.root.getAttribute(attribute);
                },
                getInputValue: function getInputValue(thumb) {
                  return _this.getInput(thumb).value;
                },
                setInputValue: function setInputValue(value, thumb) {
                  _this.getInput(thumb).value = value;
                },
                getInputAttribute: function getInputAttribute(attribute, thumb) {
                  return _this.getInput(thumb).getAttribute(attribute);
                },
                setInputAttribute: function setInputAttribute(attribute, value, thumb) {
                  _this.getInput(thumb).setAttribute(attribute, value);
                },
                removeInputAttribute: function removeInputAttribute(attribute, thumb) {
                  _this.getInput(thumb).removeAttribute(attribute);
                },
                focusInput: function focusInput(thumb) {
                  _this.getInput(thumb).focus();
                },
                isInputFocused: function isInputFocused(thumb) {
                  return _this.getInput(thumb) === document.activeElement;
                },
                getThumbKnobWidth: function getThumbKnobWidth(thumb) {
                  return _this.getThumbEl(thumb).querySelector("." + constants_1.cssClasses.THUMB_KNOB).getBoundingClientRect().width;
                },
                getThumbBoundingClientRect: function getThumbBoundingClientRect(thumb) {
                  return _this.getThumbEl(thumb).getBoundingClientRect();
                },
                getBoundingClientRect: function getBoundingClientRect() {
                  return _this.root.getBoundingClientRect();
                },
                isRTL: function isRTL() {
                  return getComputedStyle(_this.root).direction === 'rtl';
                },
                setThumbStyleProperty: function setThumbStyleProperty(propertyName, value, thumb) {
                  _this.getThumbEl(thumb).style.setProperty(propertyName, value);
                },
                removeThumbStyleProperty: function removeThumbStyleProperty(propertyName, thumb) {
                  _this.getThumbEl(thumb).style.removeProperty(propertyName);
                },
                setTrackActiveStyleProperty: function setTrackActiveStyleProperty(propertyName, value) {
                  _this.trackActive.style.setProperty(propertyName, value);
                },
                removeTrackActiveStyleProperty: function removeTrackActiveStyleProperty(propertyName) {
                  _this.trackActive.style.removeProperty(propertyName);
                },
                setValueIndicatorText: function setValueIndicatorText(value, thumb) {
                  var valueIndicatorEl = _this.getThumbEl(thumb).querySelector("." + constants_1.cssClasses.VALUE_INDICATOR_TEXT);
                  valueIndicatorEl.textContent = String(value);
                },
                getValueToAriaValueTextFn: function getValueToAriaValueTextFn() {
                  return _this.valueToAriaValueTextFn;
                },
                updateTickMarks: function updateTickMarks(tickMarks) {
                  var tickMarksContainer = _this.root.querySelector("." + constants_1.cssClasses.TICK_MARKS_CONTAINER);
                  if (!tickMarksContainer) {
                    tickMarksContainer = document.createElement('div');
                    tickMarksContainer.classList.add(constants_1.cssClasses.TICK_MARKS_CONTAINER);
                    var track = _this.root.querySelector("." + constants_1.cssClasses.TRACK);
                    track.appendChild(tickMarksContainer);
                  }
                  if (tickMarks.length !== tickMarksContainer.children.length) {
                    tickMarksContainer.innerHTML = '';
                    _this.addTickMarks(tickMarksContainer, tickMarks);
                  } else {
                    _this.updateTickMarks(tickMarksContainer, tickMarks);
                  }
                },
                setPointerCapture: function setPointerCapture(pointerId) {
                  _this.root.setPointerCapture(pointerId);
                },
                emitChangeEvent: function emitChangeEvent(value, thumb) {
                  _this.emit(constants_1.events.CHANGE, { value: value, thumb: thumb });
                },
                emitInputEvent: function emitInputEvent(value, thumb) {
                  _this.emit(constants_1.events.INPUT, { value: value, thumb: thumb });
                },
                emitDragStartEvent: function emitDragStartEvent(_, thumb) {
                  // Emitting event is not yet implemented. See issue:
                  // https://github.com/material-components/material-components-web/issues/6448
                  _this.getRipple(thumb).activate();
                },
                emitDragEndEvent: function emitDragEndEvent(_, thumb) {
                  // Emitting event is not yet implemented. See issue:
                  // https://github.com/material-components/material-components-web/issues/6448
                  _this.getRipple(thumb).deactivate();
                },
                registerEventHandler: function registerEventHandler(evtType, handler) {
                  _this.listen(evtType, handler);
                },
                deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
                  _this.unlisten(evtType, handler);
                },
                registerThumbEventHandler: function registerThumbEventHandler(thumb, evtType, handler) {
                  _this.getThumbEl(thumb).addEventListener(evtType, handler);
                },
                deregisterThumbEventHandler: function deregisterThumbEventHandler(thumb, evtType, handler) {
                  _this.getThumbEl(thumb).removeEventListener(evtType, handler);
                },
                registerInputEventHandler: function registerInputEventHandler(thumb, evtType, handler) {
                  _this.getInput(thumb).addEventListener(evtType, handler);
                },
                deregisterInputEventHandler: function deregisterInputEventHandler(thumb, evtType, handler) {
                  _this.getInput(thumb).removeEventListener(evtType, handler);
                },
                registerBodyEventHandler: function registerBodyEventHandler(evtType, handler) {
                  document.body.addEventListener(evtType, handler);
                },
                deregisterBodyEventHandler: function deregisterBodyEventHandler(evtType, handler) {
                  document.body.removeEventListener(evtType, handler);
                },
                registerWindowEventHandler: function registerWindowEventHandler(evtType, handler) {
                  window.addEventListener(evtType, handler);
                },
                deregisterWindowEventHandler: function deregisterWindowEventHandler(evtType, handler) {
                  window.removeEventListener(evtType, handler);
                }
              };
              return new foundation_2.MDCSliderFoundation(adapter);
            };
            /**
             * Initializes component, with the following options:
             * - `skipInitialUIUpdate`: Whether to skip updating the UI when initially
             *   syncing with the DOM. This should be enabled when the slider position
             *   is set before component initialization.
             */
            MDCSlider.prototype.initialize = function (_a) {
              var skipInitialUIUpdate = (_a === void 0 ? {} : _a).skipInitialUIUpdate;
              this.inputs = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.INPUT));
              this.thumbs = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.THUMB));
              this.trackActive = this.root.querySelector("." + constants_1.cssClasses.TRACK_ACTIVE);
              this.ripples = this.createRipples();
              if (skipInitialUIUpdate) {
                this.skipInitialUIUpdate = true;
              }
            };
            MDCSlider.prototype.initialSyncWithDOM = function () {
              this.foundation.layout({ skipUpdateUI: this.skipInitialUIUpdate });
            };
            /** Redraws UI based on DOM (e.g. element dimensions, RTL). */
            MDCSlider.prototype.layout = function () {
              this.foundation.layout();
            };
            MDCSlider.prototype.getValueStart = function () {
              return this.foundation.getValueStart();
            };
            MDCSlider.prototype.setValueStart = function (valueStart) {
              this.foundation.setValueStart(valueStart);
            };
            MDCSlider.prototype.getValue = function () {
              return this.foundation.getValue();
            };
            MDCSlider.prototype.setValue = function (value) {
              this.foundation.setValue(value);
            };
            /** @return Slider disabled state. */
            MDCSlider.prototype.getDisabled = function () {
              return this.foundation.getDisabled();
            };
            /** Sets slider disabled state. */
            MDCSlider.prototype.setDisabled = function (disabled) {
              this.foundation.setDisabled(disabled);
            };
            /**
             * Sets a function that maps the slider value to the value of the
             * `aria-valuetext` attribute on the thumb element.
             */
            MDCSlider.prototype.setValueToAriaValueTextFn = function (mapFn) {
              this.valueToAriaValueTextFn = mapFn;
            };
            MDCSlider.prototype.getThumbEl = function (thumb) {
              return thumb === types_1.Thumb.END ? this.thumbs[this.thumbs.length - 1] : this.thumbs[0];
            };
            MDCSlider.prototype.getInput = function (thumb) {
              return thumb === types_1.Thumb.END ? this.inputs[this.inputs.length - 1] : this.inputs[0];
            };
            MDCSlider.prototype.getRipple = function (thumb) {
              return thumb === types_1.Thumb.END ? this.ripples[this.ripples.length - 1] : this.ripples[0];
            };
            /** Adds tick mark elements to the given container. */
            MDCSlider.prototype.addTickMarks = function (tickMarkContainer, tickMarks) {
              var fragment = document.createDocumentFragment();
              for (var i = 0; i < tickMarks.length; i++) {
                var div = document.createElement('div');
                var tickMarkClass = tickMarks[i] === types_1.TickMark.ACTIVE ? constants_1.cssClasses.TICK_MARK_ACTIVE : constants_1.cssClasses.TICK_MARK_INACTIVE;
                div.classList.add(tickMarkClass);
                fragment.appendChild(div);
              }
              tickMarkContainer.appendChild(fragment);
            };
            /** Updates tick mark elements' classes in the given container. */
            MDCSlider.prototype.updateTickMarks = function (tickMarkContainer, tickMarks) {
              var tickMarkEls = Array.from(tickMarkContainer.children);
              for (var i = 0; i < tickMarkEls.length; i++) {
                if (tickMarks[i] === types_1.TickMark.ACTIVE) {
                  tickMarkEls[i].classList.add(constants_1.cssClasses.TICK_MARK_ACTIVE);
                  tickMarkEls[i].classList.remove(constants_1.cssClasses.TICK_MARK_INACTIVE);
                } else {
                  tickMarkEls[i].classList.add(constants_1.cssClasses.TICK_MARK_INACTIVE);
                  tickMarkEls[i].classList.remove(constants_1.cssClasses.TICK_MARK_ACTIVE);
                }
              }
            };
            /** Initializes thumb ripples. */
            MDCSlider.prototype.createRipples = function () {
              var ripples = [];
              var rippleSurfaces = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.THUMB));
              var _loop_1 = function _loop_1(i) {
                var rippleSurface = rippleSurfaces[i];
                // Use the corresponding input as the focus source for the ripple (i.e.
                // when the input is focused, the ripple is in the focused state).
                var input = this_1.inputs[i];
                var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this_1)), { addClass: function addClass(className) {
                    rippleSurface.classList.add(className);
                  }, computeBoundingRect: function computeBoundingRect() {
                    return rippleSurface.getBoundingClientRect();
                  }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                    input.removeEventListener(evtType, handler);
                  }, isSurfaceActive: function isSurfaceActive() {
                    return ponyfill_1.matches(input, ':active');
                  }, isUnbounded: function isUnbounded() {
                    return true;
                  }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                    input.addEventListener(evtType, handler);
                  }, removeClass: function removeClass(className) {
                    rippleSurface.classList.remove(className);
                  }, updateCssVariable: function updateCssVariable(varName, value) {
                    rippleSurface.style.setProperty(varName, value);
                  } });
                var ripple = new component_2.MDCRipple(rippleSurface, new foundation_1.MDCRippleFoundation(adapter));
                ripple.unbounded = true;
                ripples.push(ripple);
              };
              var this_1 = this;
              for (var i = 0; i < rippleSurfaces.length; i++) {
                _loop_1(i);
              }
              return ripples;
            };
            return MDCSlider;
          }(component_1.MDCComponent);
          exports.MDCSlider = MDCSlider;

          /***/ }),

        /***/ "./packages/mdc-slider/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-slider/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /** Slider element classes. */
          exports.cssClasses = {
            DISABLED: 'mdc-slider--disabled',
            DISCRETE: 'mdc-slider--discrete',
            INPUT: 'mdc-slider__input',
            RANGE: 'mdc-slider--range',
            THUMB: 'mdc-slider__thumb',
            THUMB_KNOB: 'mdc-slider__thumb-knob',
            // Class added to the top thumb (for overlapping thumbs in range slider).
            THUMB_TOP: 'mdc-slider__thumb--top',
            THUMB_WITH_INDICATOR: 'mdc-slider__thumb--with-indicator',
            TICK_MARKS: 'mdc-slider--tick-marks',
            TICK_MARKS_CONTAINER: 'mdc-slider__tick-marks',
            TICK_MARK_ACTIVE: 'mdc-slider__tick-mark--active',
            TICK_MARK_INACTIVE: 'mdc-slider__tick-mark--inactive',
            TRACK: 'mdc-slider__track',
            // The active track fill element that will be scaled as the value changes.
            TRACK_ACTIVE: 'mdc-slider__track--active_fill',
            VALUE_INDICATOR_TEXT: 'mdc-slider__value-indicator-text'
          };
          /** Slider numbers. */
          exports.numbers = {
            // Default step size.
            STEP_SIZE: 1,
            // Minimum absolute difference between clientX of move event / down event
            // for which to update thumb, in the case of overlapping thumbs.
            // This is needed to reduce chances of choosing the thumb based on
            // pointer jitter.
            THUMB_UPDATE_MIN_PX: 5
          };
          /** Slider attributes. */
          exports.attributes = {
            ARIA_DISABLED: 'aria-disabled',
            ARIA_VALUEMAX: 'aria-valuemax',
            ARIA_VALUEMIN: 'aria-valuemin',
            ARIA_VALUENOW: 'aria-valuenow',
            ARIA_VALUETEXT: 'aria-valuetext',
            INPUT_DISABLED: 'disabled',
            INPUT_MIN: 'min',
            INPUT_MAX: 'max',
            INPUT_VALUE: 'value',
            INPUT_STEP: 'step'
          };
          /** Slider events. */
          exports.events = {
            CHANGE: 'MDCSlider:change',
            INPUT: 'MDCSlider:input'
          };

          /***/ }),

        /***/ "./packages/mdc-slider/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-slider/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util_1 = __webpack_require__(/*! @material/animation/util */ "./packages/mdc-animation/util.ts");
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-slider/constants.ts");
          var types_1 = __webpack_require__(/*! ./types */ "./packages/mdc-slider/types.ts");
// Accessing `window` without a `typeof` check will throw on Node environments.
          var HAS_WINDOW = typeof window !== 'undefined';
          /**
           * Foundation class for slider. Responsibilities include:
           * - Updating slider values (internal state and DOM updates) based on client
           *   'x' position.
           * - Updating DOM after slider property updates (e.g. min, max).
           */
          var MDCSliderFoundation = /** @class */function (_super) {
            __extends(MDCSliderFoundation, _super);
            function MDCSliderFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation.defaultAdapter), adapter)) || this;
              // Whether the initial styles (to position the thumb, before component
              // initialization) have been removed.
              _this.initialStylesRemoved = false;
              _this.isDisabled = false;
              _this.isDiscrete = false;
              _this.step = constants_1.numbers.STEP_SIZE;
              _this.hasTickMarks = false;
              // The following properties are only set for range sliders.
              _this.isRange = false;
              // Tracks the thumb being moved across a slider pointer interaction (down,
              // move event).
              _this.thumb = null;
              // `clientX` from the most recent down event. Used in subsequent move
              // events to determine which thumb to move (in the case of
              // overlapping thumbs).
              _this.downEventClientX = null;
              // Width of the start thumb knob.
              _this.startThumbKnobWidth = 0;
              // Width of the end thumb knob.
              _this.endThumbKnobWidth = 0;
              return _this;
            }
            Object.defineProperty(MDCSliderFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same
                // order as the adapter interface.
                return {
                  hasClass: function hasClass() {
                    return false;
                  },
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  addThumbClass: function addThumbClass() {
                    return undefined;
                  },
                  removeThumbClass: function removeThumbClass() {
                    return undefined;
                  },
                  getAttribute: function getAttribute() {
                    return null;
                  },
                  getInputValue: function getInputValue() {
                    return '';
                  },
                  setInputValue: function setInputValue() {
                    return undefined;
                  },
                  getInputAttribute: function getInputAttribute() {
                    return null;
                  },
                  setInputAttribute: function setInputAttribute() {
                    return null;
                  },
                  removeInputAttribute: function removeInputAttribute() {
                    return null;
                  },
                  focusInput: function focusInput() {
                    return undefined;
                  },
                  isInputFocused: function isInputFocused() {
                    return false;
                  },
                  getThumbKnobWidth: function getThumbKnobWidth() {
                    return 0;
                  },
                  getThumbBoundingClientRect: function getThumbBoundingClientRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  getBoundingClientRect: function getBoundingClientRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  isRTL: function isRTL() {
                    return false;
                  },
                  setThumbStyleProperty: function setThumbStyleProperty() {
                    return undefined;
                  },
                  removeThumbStyleProperty: function removeThumbStyleProperty() {
                    return undefined;
                  },
                  setTrackActiveStyleProperty: function setTrackActiveStyleProperty() {
                    return undefined;
                  },
                  removeTrackActiveStyleProperty: function removeTrackActiveStyleProperty() {
                    return undefined;
                  },
                  setValueIndicatorText: function setValueIndicatorText() {
                    return undefined;
                  },
                  getValueToAriaValueTextFn: function getValueToAriaValueTextFn() {
                    return null;
                  },
                  updateTickMarks: function updateTickMarks() {
                    return undefined;
                  },
                  setPointerCapture: function setPointerCapture() {
                    return undefined;
                  },
                  emitChangeEvent: function emitChangeEvent() {
                    return undefined;
                  },
                  emitInputEvent: function emitInputEvent() {
                    return undefined;
                  },
                  emitDragStartEvent: function emitDragStartEvent() {
                    return undefined;
                  },
                  emitDragEndEvent: function emitDragEndEvent() {
                    return undefined;
                  },
                  registerEventHandler: function registerEventHandler() {
                    return undefined;
                  },
                  deregisterEventHandler: function deregisterEventHandler() {
                    return undefined;
                  },
                  registerThumbEventHandler: function registerThumbEventHandler() {
                    return undefined;
                  },
                  deregisterThumbEventHandler: function deregisterThumbEventHandler() {
                    return undefined;
                  },
                  registerInputEventHandler: function registerInputEventHandler() {
                    return undefined;
                  },
                  deregisterInputEventHandler: function deregisterInputEventHandler() {
                    return undefined;
                  },
                  registerBodyEventHandler: function registerBodyEventHandler() {
                    return undefined;
                  },
                  deregisterBodyEventHandler: function deregisterBodyEventHandler() {
                    return undefined;
                  },
                  registerWindowEventHandler: function registerWindowEventHandler() {
                    return undefined;
                  },
                  deregisterWindowEventHandler: function deregisterWindowEventHandler() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCSliderFoundation.prototype.init = function () {
              var _this = this;
              this.isDisabled = this.adapter.hasClass(constants_1.cssClasses.DISABLED);
              this.isDiscrete = this.adapter.hasClass(constants_1.cssClasses.DISCRETE);
              this.hasTickMarks = this.adapter.hasClass(constants_1.cssClasses.TICK_MARKS);
              this.isRange = this.adapter.hasClass(constants_1.cssClasses.RANGE);
              var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_MIN, this.isRange ? types_1.Thumb.START : types_1.Thumb.END), constants_1.attributes.INPUT_MIN);
              var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_MAX, types_1.Thumb.END), constants_1.attributes.INPUT_MAX);
              var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_VALUE, types_1.Thumb.END), constants_1.attributes.INPUT_VALUE);
              var valueStart = this.isRange ? this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_VALUE, types_1.Thumb.START), constants_1.attributes.INPUT_VALUE) : min;
              this.validateProperties({ min: min, max: max, value: value, valueStart: valueStart });
              this.min = min;
              this.max = max;
              this.value = value;
              this.valueStart = valueStart;
              this.valueBeforeDownEvent = value;
              this.valueStartBeforeDownEvent = valueStart;
              var stepAttr = this.adapter.getInputAttribute(constants_1.attributes.INPUT_STEP, types_1.Thumb.END);
              if (stepAttr) {
                this.step = this.convertAttributeValueToNumber(stepAttr, constants_1.attributes.INPUT_STEP);
              }
              if (this.step <= 0) {
                throw new Error("MDCSliderFoundation: step must be a positive number. " + ("Current step: " + this.step));
              }
              this.mousedownOrTouchstartListener = this.handleMousedownOrTouchstart.bind(this);
              this.moveListener = this.handleMove.bind(this);
              this.pointerdownListener = this.handlePointerdown.bind(this);
              this.pointerupListener = this.handlePointerup.bind(this);
              this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
              this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
              this.inputStartChangeListener = function () {
                _this.handleInputChange(types_1.Thumb.START);
              };
              this.inputEndChangeListener = function () {
                _this.handleInputChange(types_1.Thumb.END);
              };
              this.inputStartFocusListener = function () {
                _this.handleInputFocus(types_1.Thumb.START);
              };
              this.inputEndFocusListener = function () {
                _this.handleInputFocus(types_1.Thumb.END);
              };
              this.inputStartBlurListener = function () {
                _this.handleInputBlur(types_1.Thumb.START);
              };
              this.inputEndBlurListener = function () {
                _this.handleInputBlur(types_1.Thumb.END);
              };
              this.resizeListener = this.handleResize.bind(this);
              this.registerEventHandlers();
            };
            MDCSliderFoundation.prototype.destroy = function () {
              this.deregisterEventHandlers();
            };
            MDCSliderFoundation.prototype.getMin = function () {
              return this.min;
            };
            MDCSliderFoundation.prototype.getMax = function () {
              return this.max;
            };
            /**
             * - For single point sliders, returns the thumb value.
             * - For range (two-thumb) sliders, returns the end thumb's value.
             */
            MDCSliderFoundation.prototype.getValue = function () {
              return this.value;
            };
            /**
             * - For single point sliders, sets the thumb value.
             * - For range (two-thumb) sliders, sets the end thumb's value.
             */
            MDCSliderFoundation.prototype.setValue = function (value) {
              if (this.isRange && value < this.valueStart) {
                throw new Error("end thumb value (" + value + ") must be >= start thumb " + ("value (" + this.valueStart + ")"));
              }
              this.updateValue(value, types_1.Thumb.END);
            };
            /**
             * Only applicable for range sliders.
             * @return The start thumb's value.
             */
            MDCSliderFoundation.prototype.getValueStart = function () {
              if (!this.isRange) {
                throw new Error('`valueStart` is only applicable for range sliders.');
              }
              return this.valueStart;
            };
            /**
             * Only applicable for range sliders. Sets the start thumb's value.
             */
            MDCSliderFoundation.prototype.setValueStart = function (valueStart) {
              if (!this.isRange) {
                throw new Error('`valueStart` is only applicable for range sliders.');
              }
              if (this.isRange && valueStart > this.value) {
                throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " + ("value (" + this.value + ")"));
              }
              this.updateValue(valueStart, types_1.Thumb.START);
            };
            MDCSliderFoundation.prototype.getStep = function () {
              return this.step;
            };
            MDCSliderFoundation.prototype.getDisabled = function () {
              return this.isDisabled;
            };
            /**
             * Sets disabled state, including updating styles and thumb tabindex.
             */
            MDCSliderFoundation.prototype.setDisabled = function (disabled) {
              this.isDisabled = disabled;
              if (disabled) {
                this.adapter.addClass(constants_1.cssClasses.DISABLED);
                if (this.isRange) {
                  this.adapter.setInputAttribute(constants_1.attributes.INPUT_DISABLED, '', types_1.Thumb.START);
                }
                this.adapter.setInputAttribute(constants_1.attributes.INPUT_DISABLED, '', types_1.Thumb.END);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.DISABLED);
                if (this.isRange) {
                  this.adapter.removeInputAttribute(constants_1.attributes.INPUT_DISABLED, types_1.Thumb.START);
                }
                this.adapter.removeInputAttribute(constants_1.attributes.INPUT_DISABLED, types_1.Thumb.END);
              }
            };
            /** @return Whether the slider is a range slider. */
            MDCSliderFoundation.prototype.getIsRange = function () {
              return this.isRange;
            };
            /**
             * - Syncs slider boundingClientRect with the current DOM.
             * - Updates UI based on internal state.
             */
            MDCSliderFoundation.prototype.layout = function (_a) {
              var skipUpdateUI = (_a === void 0 ? {} : _a).skipUpdateUI;
              this.rect = this.adapter.getBoundingClientRect();
              if (this.isRange) {
                this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(types_1.Thumb.START);
                this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(types_1.Thumb.END);
              }
              if (!skipUpdateUI) {
                this.updateUI();
              }
            };
            /** Handles resize events on the window. */
            MDCSliderFoundation.prototype.handleResize = function () {
              this.layout();
            };
            /**
             * Handles pointer down events on the slider root element.
             */
            MDCSliderFoundation.prototype.handleDown = function (event) {
              if (this.isDisabled) return;
              this.valueStartBeforeDownEvent = this.valueStart;
              this.valueBeforeDownEvent = this.value;
              var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
              this.downEventClientX = clientX;
              var value = this.mapClientXOnSliderScale(clientX);
              this.thumb = this.getThumbFromDownEvent(clientX, value);
              if (this.thumb === null) return;
              this.handleDragStart(event, value, this.thumb);
              // Presses within the range do not invoke slider updates.
              var newValueInCurrentRange = this.isRange && value >= this.valueStart && value <= this.value;
              if (newValueInCurrentRange) return;
              this.updateValue(value, this.thumb, { emitInputEvent: true });
            };
            /**
             * Handles pointer move events on the slider root element.
             */
            MDCSliderFoundation.prototype.handleMove = function (event) {
              if (this.isDisabled) return;
              // Prevent scrolling.
              event.preventDefault();
              var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
              var dragAlreadyStarted = this.thumb != null;
              this.thumb = this.getThumbFromMoveEvent(clientX);
              if (this.thumb === null) return;
              var value = this.mapClientXOnSliderScale(clientX);
              if (!dragAlreadyStarted) {
                this.handleDragStart(event, value, this.thumb);
                this.adapter.emitDragStartEvent(value, this.thumb);
              }
              this.updateValue(value, this.thumb, { emitInputEvent: true });
            };
            /**
             * Handles pointer up events on the slider root element.
             */
            MDCSliderFoundation.prototype.handleUp = function () {
              if (this.isDisabled || this.thumb === null) return;
              var oldValue = this.thumb === types_1.Thumb.START ? this.valueStartBeforeDownEvent : this.valueBeforeDownEvent;
              var newValue = this.thumb === types_1.Thumb.START ? this.valueStart : this.value;
              if (oldValue !== newValue) {
                this.adapter.emitChangeEvent(newValue, this.thumb);
              }
              this.adapter.emitDragEndEvent(newValue, this.thumb);
              this.thumb = null;
            };
            /**
             * For range, discrete slider, shows the value indicator on both thumbs.
             */
            MDCSliderFoundation.prototype.handleThumbMouseenter = function () {
              if (!this.isDiscrete || !this.isRange) return;
              this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.START);
              this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.END);
            };
            /**
             * For range, discrete slider, hides the value indicator on both thumbs.
             */
            MDCSliderFoundation.prototype.handleThumbMouseleave = function () {
              if (!this.isDiscrete || !this.isRange) return;
              if (this.adapter.isInputFocused(types_1.Thumb.START) || this.adapter.isInputFocused(types_1.Thumb.END)) {
                // Leave value indicator shown if either input is focused.
                return;
              }
              this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.START);
              this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.END);
            };
            MDCSliderFoundation.prototype.handleMousedownOrTouchstart = function (event) {
              var _this = this;
              var moveEventType = event.type === 'mousedown' ? 'mousemove' : 'touchmove';
              // After a down event on the slider root, listen for move events on
              // body (so the slider value is updated for events outside of the
              // slider root).
              this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
              var upHandler = function upHandler() {
                _this.handleUp();
                // Once the drag is finished (up event on body), remove the move
                // handler.
                _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
                // Also stop listening for subsequent up events.
                _this.adapter.deregisterEventHandler('mouseup', upHandler);
                _this.adapter.deregisterEventHandler('touchend', upHandler);
              };
              this.adapter.registerBodyEventHandler('mouseup', upHandler);
              this.adapter.registerBodyEventHandler('touchend', upHandler);
              this.handleDown(event);
            };
            MDCSliderFoundation.prototype.handlePointerdown = function (event) {
              this.adapter.setPointerCapture(event.pointerId);
              this.adapter.registerEventHandler('pointermove', this.moveListener);
              this.handleDown(event);
            };
            /**
             * Handles input `change` event by setting internal slider value to match
             * input's new value.
             */
            MDCSliderFoundation.prototype.handleInputChange = function (thumb) {
              var value = Number(this.adapter.getInputValue(thumb));
              if (thumb === types_1.Thumb.START) {
                this.setValueStart(value);
              } else {
                this.setValue(value);
              }
            };
            /** Shows value indicator on thumb(s). */
            MDCSliderFoundation.prototype.handleInputFocus = function (thumb) {
              if (!this.isDiscrete) return;
              this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, thumb);
              if (this.isRange) {
                var otherThumb = thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START;
                this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, otherThumb);
              }
            };
            /** Removes value indicator from thumb(s). */
            MDCSliderFoundation.prototype.handleInputBlur = function (thumb) {
              if (!this.isDiscrete) return;
              this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, thumb);
              if (this.isRange) {
                var otherThumb = thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START;
                this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, otherThumb);
              }
            };
            /**
             * Emits custom dragStart event, along with focusing the underlying input.
             */
            MDCSliderFoundation.prototype.handleDragStart = function (event, value, thumb) {
              this.adapter.focusInput(thumb);
              // Prevent the input (that we just focused) from losing focus.
              event.preventDefault();
              this.adapter.emitDragStartEvent(value, thumb);
            };
            /**
             * @return The thumb to be moved based on initial down event.
             */
            MDCSliderFoundation.prototype.getThumbFromDownEvent = function (clientX, value) {
              // For single point slider, thumb to be moved is always the END (only)
              // thumb.
              if (!this.isRange) return types_1.Thumb.END;
              // Check if event press point is in the bounds of any thumb.
              var thumbStartRect = this.adapter.getThumbBoundingClientRect(types_1.Thumb.START);
              var thumbEndRect = this.adapter.getThumbBoundingClientRect(types_1.Thumb.END);
              var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
              var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
              if (inThumbStartBounds && inThumbEndBounds) {
                // Thumbs overlapping. Thumb to be moved cannot be determined yet.
                return null;
              }
              // If press is in bounds for either thumb on down event, that's the thumb
              // to be moved.
              if (inThumbStartBounds) {
                return types_1.Thumb.START;
              }
              if (inThumbEndBounds) {
                return types_1.Thumb.END;
              }
              // Otherwise, if press occurred outside of the range, return either start
              // or end thumb based on which the press is closer to.
              if (value < this.valueStart) {
                return types_1.Thumb.START;
              }
              if (value > this.value) {
                return types_1.Thumb.END;
              }
              return null;
            };
            /**
             * @return The thumb to be moved based on move event (based on drag
             *     direction from original down event). Only applicable if thumbs
             *     were overlapping in the down event.
             */
            MDCSliderFoundation.prototype.getThumbFromMoveEvent = function (clientX) {
              // Thumb has already been chosen.
              if (this.thumb !== null) return this.thumb;
              if (this.downEventClientX === null) {
                throw new Error('`downEventClientX` is null after move event.');
              }
              var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < constants_1.numbers.THUMB_UPDATE_MIN_PX;
              if (moveDistanceUnderThreshold) return this.thumb;
              var draggedThumbToLeft = clientX < this.downEventClientX;
              if (draggedThumbToLeft) {
                return this.adapter.isRTL() ? types_1.Thumb.END : types_1.Thumb.START;
              } else {
                return this.adapter.isRTL() ? types_1.Thumb.START : types_1.Thumb.END;
              }
            };
            /**
             * Updates UI based on internal state.
             * @param thumb Thumb whose value is being updated. If undefined, UI is
             *     updated for both thumbs based on current internal state.
             */
            MDCSliderFoundation.prototype.updateUI = function (thumb) {
              this.updateThumbAndInputAttributes(thumb);
              this.updateThumbAndTrackUI(thumb);
              this.updateValueIndicatorUI(thumb);
              this.updateTickMarksUI();
            };
            /**
             * Updates thumb and input attributes based on current value.
             * @param thumb Thumb whose aria attributes to update.
             */
            MDCSliderFoundation.prototype.updateThumbAndInputAttributes = function (thumb) {
              if (!thumb) return;
              var value = this.isRange && thumb === types_1.Thumb.START ? this.valueStart : this.value;
              var valueStr = String(value);
              this.adapter.setInputAttribute(constants_1.attributes.INPUT_VALUE, valueStr, thumb);
              if (this.isRange && thumb === types_1.Thumb.START) {
                this.adapter.setInputAttribute(constants_1.attributes.INPUT_MIN, valueStr, types_1.Thumb.END);
              } else if (this.isRange && thumb === types_1.Thumb.END) {
                this.adapter.setInputAttribute(constants_1.attributes.INPUT_MAX, valueStr, types_1.Thumb.START);
              }
              // Sync attribute with property.
              if (this.adapter.getInputValue(thumb) !== valueStr) {
                this.adapter.setInputValue(valueStr, thumb);
              }
              var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
              if (valueToAriaValueTextFn) {
                this.adapter.setInputAttribute(constants_1.attributes.ARIA_VALUETEXT, valueToAriaValueTextFn(value), thumb);
              }
            };
            /**
             * Updates value indicator UI based on current value.
             * @param thumb Thumb whose value indicator to update. If undefined, all
             *     thumbs' value indicators are updated.
             */
            MDCSliderFoundation.prototype.updateValueIndicatorUI = function (thumb) {
              if (!this.isDiscrete) return;
              var value = this.isRange && thumb === types_1.Thumb.START ? this.valueStart : this.value;
              this.adapter.setValueIndicatorText(value, thumb === types_1.Thumb.START ? types_1.Thumb.START : types_1.Thumb.END);
              if (!thumb && this.isRange) {
                this.adapter.setValueIndicatorText(this.valueStart, types_1.Thumb.START);
              }
            };
            /**
             * Updates tick marks UI within slider, based on current min, max, and step.
             */
            MDCSliderFoundation.prototype.updateTickMarksUI = function () {
              if (!this.isDiscrete || !this.hasTickMarks) return;
              var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
              var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
              var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
              var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart }).fill(types_1.TickMark.INACTIVE);
              var tickMarksActive = Array.from({ length: numTickMarksActive }).fill(types_1.TickMark.ACTIVE);
              var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd }).fill(types_1.TickMark.INACTIVE);
              this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive).concat(tickMarksInactiveEnd));
            };
            /** Maps clientX to a value on the slider scale. */
            MDCSliderFoundation.prototype.mapClientXOnSliderScale = function (clientX) {
              var xPos = clientX - this.rect.left;
              var pctComplete = xPos / this.rect.width;
              if (this.adapter.isRTL()) {
                pctComplete = 1 - pctComplete;
              }
              // Fit the percentage complete between the range [min,max]
              // by remapping from [0, 1] to [min, min+(max-min)].
              var value = this.min + pctComplete * (this.max - this.min);
              if (value === this.max || value === this.min) {
                return value;
              }
              return this.quantize(value);
            };
            /**
             * Updates slider value (internal state and UI) based on the given value.
             */
            MDCSliderFoundation.prototype.updateValue = function (value, thumb, _a) {
              var _b = _a === void 0 ? {} : _a,
                  emitInputEvent = _b.emitInputEvent,
                  emitChangeEvent = _b.emitChangeEvent;
              value = this.clampValue(value, thumb);
              if (this.isRange && thumb === types_1.Thumb.START) {
                // Exit early if current value is the same as the new value.
                if (this.valueStart === value) return;
                this.valueStart = value;
              } else {
                // Exit early if current value is the same as the new value.
                if (this.value === value) return;
                this.value = value;
              }
              this.updateUI(thumb);
              if (emitInputEvent) {
                this.adapter.emitInputEvent(thumb === types_1.Thumb.START ? this.valueStart : this.value, thumb);
              }
              if (emitChangeEvent) {
                this.adapter.emitChangeEvent(thumb === types_1.Thumb.START ? this.valueStart : this.value, thumb);
              }
            };
            /** Calculates the quantized value based on step value. */
            MDCSliderFoundation.prototype.quantize = function (value) {
              var numSteps = Math.round(value / this.step);
              return numSteps * this.step;
            };
            /**
             * Clamps the given value for the given thumb based on slider properties:
             * - Restricts value within [min, max].
             * - If range slider, clamp start value <= end value, and
             *   end value >= start value.
             */
            MDCSliderFoundation.prototype.clampValue = function (value, thumb) {
              // Clamp value to [min, max] range.
              value = Math.min(Math.max(value, this.min), this.max);
              var thumbStartMovedPastThumbEnd = this.isRange && thumb === types_1.Thumb.START && value > this.value;
              if (thumbStartMovedPastThumbEnd) {
                return this.value;
              }
              var thumbEndMovedPastThumbStart = this.isRange && thumb === types_1.Thumb.END && value < this.valueStart;
              if (thumbEndMovedPastThumbStart) {
                return this.valueStart;
              }
              return value;
            };
            /**
             * Updates the active track and thumb style properties to reflect current
             * value.
             */
            MDCSliderFoundation.prototype.updateThumbAndTrackUI = function (thumb) {
              var _this = this;
              var _a = this,
                  max = _a.max,
                  min = _a.min;
              var pctComplete = (this.value - this.valueStart) / (max - min);
              var rangePx = pctComplete * this.rect.width;
              var isRtl = this.adapter.isRTL();
              var transformProp = HAS_WINDOW ? util_1.getCorrectPropertyName(window, 'transform') : 'transform';
              if (this.isRange) {
                var thumbLeftPos_1 = this.adapter.isRTL() ? (max - this.value) / (max - min) * this.rect.width : (this.valueStart - min) / (max - min) * this.rect.width;
                var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
                requestAnimationFrame(function () {
                  // Set active track styles, accounting for animation direction by
                  // setting `transform-origin`.
                  var trackAnimatesFromRight = !isRtl && thumb === types_1.Thumb.START || isRtl && thumb !== types_1.Thumb.START;
                  if (trackAnimatesFromRight) {
                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'right');
                    _this.adapter.setTrackActiveStyleProperty('left', 'unset');
                    _this.adapter.setTrackActiveStyleProperty('right', _this.rect.width - thumbRightPos_1 + "px");
                  } else {
                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'left');
                    _this.adapter.setTrackActiveStyleProperty('right', 'unset');
                    _this.adapter.setTrackActiveStyleProperty('left', thumbLeftPos_1 + "px");
                  }
                  _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
                  // Set thumb styles.
                  var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
                  var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
                  if (thumb === types_1.Thumb.START || !thumb || !_this.initialStylesRemoved) {
                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", types_1.Thumb.START);
                  }
                  if (thumb === types_1.Thumb.END || !thumb || !_this.initialStylesRemoved) {
                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", types_1.Thumb.END);
                  }
                  _this.removeInitialStyles(isRtl);
                  _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
                });
              } else {
                requestAnimationFrame(function () {
                  var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
                  _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", types_1.Thumb.END);
                  _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
                  _this.removeInitialStyles(isRtl);
                });
              }
            };
            /**
             * Removes initial inline styles if not already removed. `left:<...>%`
             * inline styles can be added to position the thumb correctly before JS
             * initialization. However, they need to be removed before the JS starts
             * positioning the thumb. This is because the JS uses
             * `transform:translateX(<...>)px` (for performance reasons) to position
             * the thumb (which is not possible for initial styles since we need the
             * bounding rect measurements).
             */
            MDCSliderFoundation.prototype.removeInitialStyles = function (isRtl) {
              if (this.initialStylesRemoved) return;
              // Remove thumb position properties that were added for initial render.
              var position = isRtl ? 'right' : 'left';
              this.adapter.removeThumbStyleProperty(position, types_1.Thumb.END);
              if (this.isRange) {
                this.adapter.removeThumbStyleProperty(position, types_1.Thumb.START);
              }
              this.initialStylesRemoved = true;
              this.resetTrackAndThumbAnimation();
            };
            /**
             * Resets track/thumb animation to prevent animation when adding
             * `transform` styles to thumb initially.
             */
            MDCSliderFoundation.prototype.resetTrackAndThumbAnimation = function () {
              var _this = this;
              if (!this.isDiscrete) return;
              // Set transition properties to default (no animation), so that the
              // newly added `transform` styles do not animate thumb/track from
              // their default positions.
              var transitionProp = HAS_WINDOW ? util_1.getCorrectPropertyName(window, 'transition') : 'transition';
              var transitionDefault = 'all 0s ease 0s';
              this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, types_1.Thumb.END);
              if (this.isRange) {
                this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, types_1.Thumb.START);
              }
              this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
              // In the next frame, remove the transition inline styles we just
              // added, such that any animations added in the CSS can now take effect.
              requestAnimationFrame(function () {
                _this.adapter.removeThumbStyleProperty(transitionProp, types_1.Thumb.END);
                _this.adapter.removeTrackActiveStyleProperty(transitionProp);
                if (_this.isRange) {
                  _this.adapter.removeThumbStyleProperty(transitionProp, types_1.Thumb.START);
                }
              });
            };
            /**
             * Adds THUMB_TOP class to active thumb if thumb knobs overlap; otherwise
             * removes THUMB_TOP class from both thumbs.
             * @param thumb Thumb that is active (being moved).
             */
            MDCSliderFoundation.prototype.updateOverlappingThumbsUI = function (thumbStartPos, thumbEndPos, thumb) {
              var thumbsOverlap = false;
              if (this.adapter.isRTL()) {
                var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
                var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
                thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
              } else {
                var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
                var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
                thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
              }
              if (thumbsOverlap) {
                this.adapter.addThumbClass(constants_1.cssClasses.THUMB_TOP,
                    // If no thumb was dragged (in the case of initial layout), end
                    // thumb is on top by default.
                    thumb || types_1.Thumb.END);
                this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START);
              } else {
                this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, types_1.Thumb.START);
                this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, types_1.Thumb.END);
              }
            };
            /**
             * Converts attribute value to a number, e.g. '100' => 100. Throws errors
             * for invalid values.
             * @param attributeValue Attribute value, e.g. 100.
             * @param attributeName Attribute name, e.g. `aria-valuemax`.
             */
            MDCSliderFoundation.prototype.convertAttributeValueToNumber = function (attributeValue, attributeName) {
              if (attributeValue === null) {
                throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
              }
              var value = Number(attributeValue);
              if (isNaN(value)) {
                throw new Error("MDCSliderFoundation: `" + attributeName + "` value is " + ("`" + attributeValue + "`, but must be a number."));
              }
              return value;
            };
            /** Checks that the given properties are valid slider values. */
            MDCSliderFoundation.prototype.validateProperties = function (_a) {
              var min = _a.min,
                  max = _a.max,
                  value = _a.value,
                  valueStart = _a.valueStart;
              if (min >= max) {
                throw new Error("MDCSliderFoundation: min must be strictly less than max. " + ("Current: [min: " + min + ", max: " + max + "]"));
              }
              if (this.isRange) {
                if (value < min || value > max || valueStart < min || valueStart > max) {
                  throw new Error("MDCSliderFoundation: values must be in [min, max] range. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
                }
                if (valueStart > value) {
                  throw new Error("MDCSliderFoundation: start value must be <= end value. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
                }
              } else {
                // Single point slider.
                if (value < min || value > max) {
                  throw new Error("MDCSliderFoundation: value must be in [min, max] range. " + ("Current value: " + value));
                }
              }
            };
            MDCSliderFoundation.prototype.registerEventHandlers = function () {
              this.adapter.registerWindowEventHandler('resize', this.resizeListener);
              if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
                // If supported, use pointer events API with #setPointerCapture.
                this.adapter.registerEventHandler('pointerdown', this.pointerdownListener);
                this.adapter.registerEventHandler('pointerup', this.pointerupListener);
              } else {
                // Otherwise, fall back to mousedown/touchstart events.
                this.adapter.registerEventHandler('mousedown', this.mousedownOrTouchstartListener);
                this.adapter.registerEventHandler('touchstart', this.mousedownOrTouchstartListener);
              }
              if (this.isRange) {
                this.adapter.registerThumbEventHandler(types_1.Thumb.START, 'mouseenter', this.thumbMouseenterListener);
                this.adapter.registerThumbEventHandler(types_1.Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
                this.adapter.registerInputEventHandler(types_1.Thumb.START, 'change', this.inputStartChangeListener);
                this.adapter.registerInputEventHandler(types_1.Thumb.START, 'focus', this.inputStartFocusListener);
                this.adapter.registerInputEventHandler(types_1.Thumb.START, 'blur', this.inputStartBlurListener);
              }
              this.adapter.registerThumbEventHandler(types_1.Thumb.END, 'mouseenter', this.thumbMouseenterListener);
              this.adapter.registerThumbEventHandler(types_1.Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
              this.adapter.registerInputEventHandler(types_1.Thumb.END, 'change', this.inputEndChangeListener);
              this.adapter.registerInputEventHandler(types_1.Thumb.END, 'focus', this.inputEndFocusListener);
              this.adapter.registerInputEventHandler(types_1.Thumb.END, 'blur', this.inputEndBlurListener);
            };
            MDCSliderFoundation.prototype.deregisterEventHandlers = function () {
              this.adapter.deregisterWindowEventHandler('resize', this.resizeListener);
              if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
                this.adapter.deregisterEventHandler('pointerdown', this.pointerdownListener);
                this.adapter.deregisterEventHandler('pointerup', this.pointerupListener);
              } else {
                this.adapter.deregisterEventHandler('mousedown', this.mousedownOrTouchstartListener);
                this.adapter.deregisterEventHandler('touchstart', this.mousedownOrTouchstartListener);
              }
              if (this.isRange) {
                this.adapter.deregisterThumbEventHandler(types_1.Thumb.START, 'mouseenter', this.thumbMouseenterListener);
                this.adapter.deregisterThumbEventHandler(types_1.Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
                this.adapter.deregisterInputEventHandler(types_1.Thumb.START, 'change', this.inputStartChangeListener);
                this.adapter.deregisterInputEventHandler(types_1.Thumb.START, 'focus', this.inputStartFocusListener);
                this.adapter.deregisterInputEventHandler(types_1.Thumb.START, 'blur', this.inputStartBlurListener);
              }
              this.adapter.deregisterThumbEventHandler(types_1.Thumb.END, 'mouseenter', this.thumbMouseenterListener);
              this.adapter.deregisterThumbEventHandler(types_1.Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
              this.adapter.deregisterInputEventHandler(types_1.Thumb.END, 'change', this.inputEndChangeListener);
              this.adapter.deregisterInputEventHandler(types_1.Thumb.END, 'focus', this.inputEndFocusListener);
              this.adapter.deregisterInputEventHandler(types_1.Thumb.END, 'blur', this.inputEndBlurListener);
            };
            MDCSliderFoundation.prototype.handlePointerup = function () {
              this.handleUp();
              this.adapter.deregisterEventHandler('pointermove', this.moveListener);
            };
            MDCSliderFoundation.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent);
            return MDCSliderFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSliderFoundation = MDCSliderFoundation;

          /***/ }),

        /***/ "./packages/mdc-slider/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-slider/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-slider/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-slider/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-slider/foundation.ts"));
          __export(__webpack_require__(/*! ./types */ "./packages/mdc-slider/types.ts"));

          /***/ }),

        /***/ "./packages/mdc-slider/types.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-slider/types.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /** Tick mark enum, for discrete sliders. */
          var TickMark;
          (function (TickMark) {
            TickMark[TickMark["ACTIVE"] = 0] = "ACTIVE";
            TickMark[TickMark["INACTIVE"] = 1] = "INACTIVE";
          })(TickMark = exports.TickMark || (exports.TickMark = {}));
          /**
           * Thumb types: range slider has two thumbs (START, END) whereas single point
           * slider only has one thumb (END).
           */
          var Thumb;
          (function (Thumb) {
            // Thumb at start of slider (e.g. in LTR mode, left thumb on range slider).
            Thumb[Thumb["START"] = 1] = "START";
            // Thumb at end of slider (e.g. in LTR mode, right thumb on range slider,
            // or only thumb on single point slider).
            Thumb[Thumb["END"] = 2] = "END";
          })(Thumb = exports.Thumb || (exports.Thumb = {}));

          /***/ }),

        /***/ "./packages/mdc-snackbar/component.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-snackbar/component.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-snackbar/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-snackbar/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-snackbar/util.ts"));
          var SURFACE_SELECTOR = constants_1.strings.SURFACE_SELECTOR,
              LABEL_SELECTOR = constants_1.strings.LABEL_SELECTOR,
              ACTION_SELECTOR = constants_1.strings.ACTION_SELECTOR,
              DISMISS_SELECTOR = constants_1.strings.DISMISS_SELECTOR,
              OPENING_EVENT = constants_1.strings.OPENING_EVENT,
              OPENED_EVENT = constants_1.strings.OPENED_EVENT,
              CLOSING_EVENT = constants_1.strings.CLOSING_EVENT,
              CLOSED_EVENT = constants_1.strings.CLOSED_EVENT;
          var MDCSnackbar = /** @class */function (_super) {
            __extends(MDCSnackbar, _super);
            function MDCSnackbar() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSnackbar.attachTo = function (root) {
              return new MDCSnackbar(root);
            };
            MDCSnackbar.prototype.initialize = function (announcerFactory) {
              if (announcerFactory === void 0) {
                announcerFactory = function announcerFactory() {
                  return util.announce;
                };
              }
              this.announce_ = announcerFactory();
            };
            MDCSnackbar.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.surfaceEl_ = this.root.querySelector(SURFACE_SELECTOR);
              this.labelEl_ = this.root.querySelector(LABEL_SELECTOR);
              this.actionEl_ = this.root.querySelector(ACTION_SELECTOR);
              this.handleKeyDown_ = function (evt) {
                return _this.foundation.handleKeyDown(evt);
              };
              this.handleSurfaceClick_ = function (evt) {
                var target = evt.target;
                if (_this.isActionButton_(target)) {
                  _this.foundation.handleActionButtonClick(evt);
                } else if (_this.isActionIcon_(target)) {
                  _this.foundation.handleActionIconClick(evt);
                }
              };
              this.registerKeyDownHandler_(this.handleKeyDown_);
              this.registerSurfaceClickHandler_(this.handleSurfaceClick_);
            };
            MDCSnackbar.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.deregisterKeyDownHandler_(this.handleKeyDown_);
              this.deregisterSurfaceClickHandler_(this.handleSurfaceClick_);
            };
            MDCSnackbar.prototype.open = function () {
              this.foundation.open();
            };
            /**
             * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
             *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
             *     client-specific values may also be used if desired.
             */
            MDCSnackbar.prototype.close = function (reason) {
              if (reason === void 0) {
                reason = '';
              }
              this.foundation.close(reason);
            };
            MDCSnackbar.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                announce: function announce() {
                  return _this.announce_(_this.labelEl_);
                },
                notifyClosed: function notifyClosed(reason) {
                  return _this.emit(CLOSED_EVENT, reason ? { reason: reason } : {});
                },
                notifyClosing: function notifyClosing(reason) {
                  return _this.emit(CLOSING_EVENT, reason ? { reason: reason } : {});
                },
                notifyOpened: function notifyOpened() {
                  return _this.emit(OPENED_EVENT, {});
                },
                notifyOpening: function notifyOpening() {
                  return _this.emit(OPENING_EVENT, {});
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                }
              };
              return new foundation_1.MDCSnackbarFoundation(adapter);
            };
            Object.defineProperty(MDCSnackbar.prototype, "timeoutMs", {
              get: function get() {
                return this.foundation.getTimeoutMs();
              },
              set: function set(timeoutMs) {
                this.foundation.setTimeoutMs(timeoutMs);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbar.prototype, "closeOnEscape", {
              get: function get() {
                return this.foundation.getCloseOnEscape();
              },
              set: function set(closeOnEscape) {
                this.foundation.setCloseOnEscape(closeOnEscape);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbar.prototype, "isOpen", {
              get: function get() {
                return this.foundation.isOpen();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbar.prototype, "labelText", {
              get: function get() {
                // This property only returns null if the node is a document, DOCTYPE, or notation.
                // On Element nodes, it always returns a string.
                return this.labelEl_.textContent;
              },
              set: function set(labelText) {
                this.labelEl_.textContent = labelText;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbar.prototype, "actionButtonText", {
              get: function get() {
                return this.actionEl_.textContent;
              },
              set: function set(actionButtonText) {
                this.actionEl_.textContent = actionButtonText;
              },
              enumerable: true,
              configurable: true
            });
            MDCSnackbar.prototype.registerKeyDownHandler_ = function (handler) {
              this.listen('keydown', handler);
            };
            MDCSnackbar.prototype.deregisterKeyDownHandler_ = function (handler) {
              this.unlisten('keydown', handler);
            };
            MDCSnackbar.prototype.registerSurfaceClickHandler_ = function (handler) {
              this.surfaceEl_.addEventListener('click', handler);
            };
            MDCSnackbar.prototype.deregisterSurfaceClickHandler_ = function (handler) {
              this.surfaceEl_.removeEventListener('click', handler);
            };
            MDCSnackbar.prototype.isActionButton_ = function (target) {
              return Boolean(ponyfill_1.closest(target, ACTION_SELECTOR));
            };
            MDCSnackbar.prototype.isActionIcon_ = function (target) {
              return Boolean(ponyfill_1.closest(target, DISMISS_SELECTOR));
            };
            return MDCSnackbar;
          }(component_1.MDCComponent);
          exports.MDCSnackbar = MDCSnackbar;

          /***/ }),

        /***/ "./packages/mdc-snackbar/constants.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-snackbar/constants.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            CLOSING: 'mdc-snackbar--closing',
            OPEN: 'mdc-snackbar--open',
            OPENING: 'mdc-snackbar--opening'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ACTION_SELECTOR: '.mdc-snackbar__action',
            ARIA_LIVE_LABEL_TEXT_ATTR: 'data-mdc-snackbar-label-text',
            CLOSED_EVENT: 'MDCSnackbar:closed',
            CLOSING_EVENT: 'MDCSnackbar:closing',
            DISMISS_SELECTOR: '.mdc-snackbar__dismiss',
            LABEL_SELECTOR: '.mdc-snackbar__label',
            OPENED_EVENT: 'MDCSnackbar:opened',
            OPENING_EVENT: 'MDCSnackbar:opening',
            REASON_ACTION: 'action',
            REASON_DISMISS: 'dismiss',
            SURFACE_SELECTOR: '.mdc-snackbar__surface'
          };
          exports.strings = strings;
          var numbers = {
            DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5000,
            INDETERMINATE: -1,
            MAX_AUTO_DISMISS_TIMEOUT_MS: 10000,
            MIN_AUTO_DISMISS_TIMEOUT_MS: 4000,
            // These variables need to be kept in sync with the values in _variables.scss.
            SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
            SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,
            /**
             * Number of milliseconds to wait between temporarily clearing the label text
             * in the DOM and subsequently restoring it. This is necessary to force IE 11
             * to pick up the `aria-live` content change and announce it to the user.
             */
            ARIA_LIVE_DELAY_MS: 1000
          };
          exports.numbers = numbers;

          /***/ }),

        /***/ "./packages/mdc-snackbar/foundation.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-snackbar/foundation.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-snackbar/constants.ts");
          var OPENING = constants_1.cssClasses.OPENING,
              OPEN = constants_1.cssClasses.OPEN,
              CLOSING = constants_1.cssClasses.CLOSING;
          var REASON_ACTION = constants_1.strings.REASON_ACTION,
              REASON_DISMISS = constants_1.strings.REASON_DISMISS;
          var MDCSnackbarFoundation = /** @class */function (_super) {
            __extends(MDCSnackbarFoundation, _super);
            function MDCSnackbarFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation.defaultAdapter), adapter)) || this;
              _this.isOpen_ = false;
              _this.animationFrame_ = 0;
              _this.animationTimer_ = 0;
              _this.autoDismissTimer_ = 0;
              _this.autoDismissTimeoutMs_ = constants_1.numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
              _this.closeOnEscape_ = true;
              return _this;
            }
            Object.defineProperty(MDCSnackbarFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbarFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbarFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSnackbarFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  announce: function announce() {
                    return undefined;
                  },
                  notifyClosed: function notifyClosed() {
                    return undefined;
                  },
                  notifyClosing: function notifyClosing() {
                    return undefined;
                  },
                  notifyOpened: function notifyOpened() {
                    return undefined;
                  },
                  notifyOpening: function notifyOpening() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCSnackbarFoundation.prototype.destroy = function () {
              this.clearAutoDismissTimer_();
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = 0;
              clearTimeout(this.animationTimer_);
              this.animationTimer_ = 0;
              this.adapter.removeClass(OPENING);
              this.adapter.removeClass(OPEN);
              this.adapter.removeClass(CLOSING);
            };
            MDCSnackbarFoundation.prototype.open = function () {
              var _this = this;
              this.clearAutoDismissTimer_();
              this.isOpen_ = true;
              this.adapter.notifyOpening();
              this.adapter.removeClass(CLOSING);
              this.adapter.addClass(OPENING);
              this.adapter.announce();
              // Wait a frame once display is no longer "none", to establish basis for animation
              this.runNextAnimationFrame_(function () {
                _this.adapter.addClass(OPEN);
                _this.animationTimer_ = setTimeout(function () {
                  var timeoutMs = _this.getTimeoutMs();
                  _this.handleAnimationTimerEnd_();
                  _this.adapter.notifyOpened();
                  if (timeoutMs !== constants_1.numbers.INDETERMINATE) {
                    _this.autoDismissTimer_ = setTimeout(function () {
                      _this.close(REASON_DISMISS);
                    }, timeoutMs);
                  }
                }, constants_1.numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);
              });
            };
            /**
             * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
             *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
             *     client-specific values may also be used if desired.
             */
            MDCSnackbarFoundation.prototype.close = function (reason) {
              var _this = this;
              if (reason === void 0) {
                reason = '';
              }
              if (!this.isOpen_) {
                // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed
                return;
              }
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = 0;
              this.clearAutoDismissTimer_();
              this.isOpen_ = false;
              this.adapter.notifyClosing(reason);
              this.adapter.addClass(constants_1.cssClasses.CLOSING);
              this.adapter.removeClass(constants_1.cssClasses.OPEN);
              this.adapter.removeClass(constants_1.cssClasses.OPENING);
              clearTimeout(this.animationTimer_);
              this.animationTimer_ = setTimeout(function () {
                _this.handleAnimationTimerEnd_();
                _this.adapter.notifyClosed(reason);
              }, constants_1.numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
            };
            MDCSnackbarFoundation.prototype.isOpen = function () {
              return this.isOpen_;
            };
            MDCSnackbarFoundation.prototype.getTimeoutMs = function () {
              return this.autoDismissTimeoutMs_;
            };
            MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {
              // Use shorter variable names to make the code more readable
              var minValue = constants_1.numbers.MIN_AUTO_DISMISS_TIMEOUT_MS;
              var maxValue = constants_1.numbers.MAX_AUTO_DISMISS_TIMEOUT_MS;
              var indeterminateValue = constants_1.numbers.INDETERMINATE;
              if (timeoutMs === constants_1.numbers.INDETERMINATE || timeoutMs <= maxValue && timeoutMs >= minValue) {
                this.autoDismissTimeoutMs_ = timeoutMs;
              } else {
                throw new Error("\n        timeoutMs must be an integer in the range " + minValue + "\u2013" + maxValue + "\n        (or " + indeterminateValue + " to disable), but got '" + timeoutMs + "'");
              }
            };
            MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {
              return this.closeOnEscape_;
            };
            MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {
              this.closeOnEscape_ = closeOnEscape;
            };
            MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {
              var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;
              if (isEscapeKey && this.getCloseOnEscape()) {
                this.close(REASON_DISMISS);
              }
            };
            MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {
              this.close(REASON_ACTION);
            };
            MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {
              this.close(REASON_DISMISS);
            };
            MDCSnackbarFoundation.prototype.clearAutoDismissTimer_ = function () {
              clearTimeout(this.autoDismissTimer_);
              this.autoDismissTimer_ = 0;
            };
            MDCSnackbarFoundation.prototype.handleAnimationTimerEnd_ = function () {
              this.animationTimer_ = 0;
              this.adapter.removeClass(constants_1.cssClasses.OPENING);
              this.adapter.removeClass(constants_1.cssClasses.CLOSING);
            };
            /**
             * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
             */
            MDCSnackbarFoundation.prototype.runNextAnimationFrame_ = function (callback) {
              var _this = this;
              cancelAnimationFrame(this.animationFrame_);
              this.animationFrame_ = requestAnimationFrame(function () {
                _this.animationFrame_ = 0;
                clearTimeout(_this.animationTimer_);
                _this.animationTimer_ = setTimeout(callback, 0);
              });
            };
            return MDCSnackbarFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSnackbarFoundation = MDCSnackbarFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSnackbarFoundation;

          /***/ }),

        /***/ "./packages/mdc-snackbar/index.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-snackbar/index.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-snackbar/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-snackbar/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-snackbar/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-snackbar/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-snackbar/util.ts":
        /*!***************************************!*\
  !*** ./packages/mdc-snackbar/util.ts ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-snackbar/constants.ts");
          var ARIA_LIVE_DELAY_MS = constants_1.numbers.ARIA_LIVE_DELAY_MS;
          var ARIA_LIVE_LABEL_TEXT_ATTR = constants_1.strings.ARIA_LIVE_LABEL_TEXT_ATTR;
          function announce(ariaEl, labelEl) {
            if (labelEl === void 0) {
              labelEl = ariaEl;
            }
            var priority = ariaEl.getAttribute('aria-live');
            // Trim text to ignore `&nbsp;` (see below).
            // textContent is only null if the node is a document, DOCTYPE, or notation.
            var labelText = labelEl.textContent.trim();
            if (!labelText || !priority) {
              return;
            }
            // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing the message twice.
            ariaEl.setAttribute('aria-live', 'off');
            // Temporarily clear `textContent` to force a DOM mutation event that will be detected by screen readers.
            // `aria-live` elements are only announced when the element's `textContent` *changes*, so snackbars
            // sent to the browser in the initial HTML response won't be read unless we clear the element's `textContent` first.
            // Similarly, displaying the same snackbar message twice in a row doesn't trigger a DOM mutation event,
            // so screen readers won't announce the second message unless we first clear `textContent`.
            //
            // We have to clear the label text two different ways to make it work in all browsers and screen readers:
            //
            //   1. `textContent = ''` is required for IE11 + JAWS
            //   2. `innerHTML = '&nbsp;'` is required for Chrome + JAWS and NVDA
            //
            // All other browser/screen reader combinations support both methods.
            //
            // The wrapper `<span>` visually hides the space character so that it doesn't cause jank when added/removed.
            // N.B.: Setting `position: absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting the DOM change.
            //
            // This technique has been tested in:
            //
            //   * JAWS 2019:
            //       - Chrome 70
            //       - Firefox 60 (ESR)
            //       - IE 11
            //   * NVDA 2018:
            //       - Chrome 70
            //       - Firefox 60 (ESR)
            //       - IE 11
            //   * ChromeVox 53
            labelEl.textContent = '';
            labelEl.innerHTML = '<span style="display: inline-block; width: 0; height: 1px;">&nbsp;</span>';
            // Prevent visual jank by temporarily displaying the label text in the ::before pseudo-element.
            // CSS generated content is normally announced by screen readers
            // (except in IE 11; see https://tink.uk/accessibility-support-for-css-generated-content/);
            // however, `aria-live` is turned off, so this DOM update will be ignored by screen readers.
            labelEl.setAttribute(ARIA_LIVE_LABEL_TEXT_ATTR, labelText);
            setTimeout(function () {
              // Allow screen readers to announce changes to the DOM again.
              ariaEl.setAttribute('aria-live', priority);
              // Remove the message from the ::before pseudo-element.
              labelEl.removeAttribute(ARIA_LIVE_LABEL_TEXT_ATTR);
              // Restore the original label text, which will be announced by screen readers.
              labelEl.textContent = labelText;
            }, ARIA_LIVE_DELAY_MS);
          }
          exports.announce = announce;

          /***/ }),

        /***/ "./packages/mdc-switch/component.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-switch/component.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __read = this && this.__read || function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;
            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
              }
            } catch (error) {
              e = { error: error };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }
            return ar;
          };
          var __spread = this && this.__spread || function () {
            for (var ar = [], i = 0; i < arguments.length; i++) {
              ar = ar.concat(__read(arguments[i]));
            }return ar;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-switch/foundation.ts");
          var MDCSwitch = /** @class */function (_super) {
            __extends(MDCSwitch, _super);
            function MDCSwitch() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              _this.ripple_ = _this.createRipple_();
              return _this;
            }
            MDCSwitch.attachTo = function (root) {
              return new MDCSwitch(root);
            };
            MDCSwitch.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.ripple_.destroy();
              this.nativeControl_.removeEventListener('change', this.changeHandler_);
            };
            MDCSwitch.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.changeHandler_ = function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                return (_a = _this.foundation).handleChange.apply(_a, __spread(args));
              };
              this.nativeControl_.addEventListener('change', this.changeHandler_);
              // Sometimes the checked state of the input element is saved in the history.
              // The switch styling should match the checked state of the input element.
              // Do an initial sync between the native control and the foundation.
              this.checked = this.checked;
            };
            MDCSwitch.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                setNativeControlChecked: function setNativeControlChecked(checked) {
                  return _this.nativeControl_.checked = checked;
                },
                setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                  return _this.nativeControl_.disabled = disabled;
                },
                setNativeControlAttr: function setNativeControlAttr(attr, value) {
                  return _this.nativeControl_.setAttribute(attr, value);
                }
              };
              return new foundation_2.MDCSwitchFoundation(adapter);
            };
            Object.defineProperty(MDCSwitch.prototype, "ripple", {
              get: function get() {
                return this.ripple_;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSwitch.prototype, "checked", {
              get: function get() {
                return this.nativeControl_.checked;
              },
              set: function set(checked) {
                this.foundation.setChecked(checked);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSwitch.prototype, "disabled", {
              get: function get() {
                return this.nativeControl_.disabled;
              },
              set: function set(disabled) {
                this.foundation.setDisabled(disabled);
              },
              enumerable: true,
              configurable: true
            });
            MDCSwitch.prototype.createRipple_ = function () {
              var _this = this;
              var RIPPLE_SURFACE_SELECTOR = foundation_2.MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;
              var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { addClass: function addClass(className) {
                  return rippleSurface.classList.add(className);
                }, computeBoundingRect: function computeBoundingRect() {
                  return rippleSurface.getBoundingClientRect();
                }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  _this.nativeControl_.removeEventListener(evtType, handler, events_1.applyPassive());
                }, isSurfaceActive: function isSurfaceActive() {
                  return ponyfill_1.matches(_this.nativeControl_, ':active');
                }, isUnbounded: function isUnbounded() {
                  return true;
                }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  _this.nativeControl_.addEventListener(evtType, handler, events_1.applyPassive());
                }, removeClass: function removeClass(className) {
                  rippleSurface.classList.remove(className);
                }, updateCssVariable: function updateCssVariable(varName, value) {
                  rippleSurface.style.setProperty(varName, value);
                } });
              return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
            };
            Object.defineProperty(MDCSwitch.prototype, "nativeControl_", {
              get: function get() {
                var NATIVE_CONTROL_SELECTOR = foundation_2.MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;
                return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
              },
              enumerable: true,
              configurable: true
            });
            return MDCSwitch;
          }(component_1.MDCComponent);
          exports.MDCSwitch = MDCSwitch;

          /***/ }),

        /***/ "./packages/mdc-switch/constants.ts":
        /*!******************************************!*\
  !*** ./packages/mdc-switch/constants.ts ***!
  \******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          /** CSS classes used by the switch. */
          var cssClasses = {
            /** Class used for a switch that is in the "checked" (on) position. */
            CHECKED: 'mdc-switch--checked',
            /** Class used for a switch that is disabled. */
            DISABLED: 'mdc-switch--disabled'
          };
          exports.cssClasses = cssClasses;
          /** String constants used by the switch. */
          var strings = {
            /** Aria attribute for checked or unchecked state of switch */
            ARIA_CHECKED_ATTR: 'aria-checked',
            /** A CSS selector used to locate the native HTML control for the switch.  */
            NATIVE_CONTROL_SELECTOR: '.mdc-switch__native-control',
            /** A CSS selector used to locate the ripple surface element for the switch. */
            RIPPLE_SURFACE_SELECTOR: '.mdc-switch__thumb-underlay'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-switch/foundation.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-switch/foundation.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-switch/constants.ts");
          var MDCSwitchFoundation = /** @class */function (_super) {
            __extends(MDCSwitchFoundation, _super);
            function MDCSwitchFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCSwitchFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCSwitchFoundation, "strings", {
              /** The string constants used by the switch. */
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSwitchFoundation, "cssClasses", {
              /** The CSS classes used by the switch. */
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCSwitchFoundation, "defaultAdapter", {
              /** The default Adapter for the switch. */
              get: function get() {
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setNativeControlChecked: function setNativeControlChecked() {
                    return undefined;
                  },
                  setNativeControlDisabled: function setNativeControlDisabled() {
                    return undefined;
                  },
                  setNativeControlAttr: function setNativeControlAttr() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            /** Sets the checked state of the switch. */
            MDCSwitchFoundation.prototype.setChecked = function (checked) {
              this.adapter.setNativeControlChecked(checked);
              this.updateAriaChecked_(checked);
              this.updateCheckedStyling_(checked);
            };
            /** Sets the disabled state of the switch. */
            MDCSwitchFoundation.prototype.setDisabled = function (disabled) {
              this.adapter.setNativeControlDisabled(disabled);
              if (disabled) {
                this.adapter.addClass(constants_1.cssClasses.DISABLED);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.DISABLED);
              }
            };
            /** Handles the change event for the switch native control. */
            MDCSwitchFoundation.prototype.handleChange = function (evt) {
              var nativeControl = evt.target;
              this.updateAriaChecked_(nativeControl.checked);
              this.updateCheckedStyling_(nativeControl.checked);
            };
            /** Updates the styling of the switch based on its checked state. */
            MDCSwitchFoundation.prototype.updateCheckedStyling_ = function (checked) {
              if (checked) {
                this.adapter.addClass(constants_1.cssClasses.CHECKED);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.CHECKED);
              }
            };
            MDCSwitchFoundation.prototype.updateAriaChecked_ = function (checked) {
              this.adapter.setNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR, "" + !!checked);
            };
            return MDCSwitchFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCSwitchFoundation = MDCSwitchFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSwitchFoundation;

          /***/ }),

        /***/ "./packages/mdc-switch/index.ts":
        /*!**************************************!*\
  !*** ./packages/mdc-switch/index.ts ***!
  \**************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-switch/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-switch/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-switch/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-tab-bar/component.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-tab-bar/component.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/tab-scroller/component */ "./packages/mdc-tab-scroller/component.ts");
          var component_3 = __webpack_require__(/*! @material/tab/component */ "./packages/mdc-tab/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/tab/foundation */ "./packages/mdc-tab/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab-bar/foundation.ts");
          var strings = foundation_2.MDCTabBarFoundation.strings;
          var tabIdCounter = 0;
          var MDCTabBar = /** @class */function (_super) {
            __extends(MDCTabBar, _super);
            function MDCTabBar() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabBar.attachTo = function (root) {
              return new MDCTabBar(root);
            };
            Object.defineProperty(MDCTabBar.prototype, "focusOnActivate", {
              set: function set(focusOnActivate) {
                this.tabList_.forEach(function (tab) {
                  return tab.focusOnActivate = focusOnActivate;
                });
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabBar.prototype, "useAutomaticActivation", {
              set: function set(useAutomaticActivation) {
                this.foundation.setUseAutomaticActivation(useAutomaticActivation);
              },
              enumerable: true,
              configurable: true
            });
            MDCTabBar.prototype.initialize = function (tabFactory, tabScrollerFactory) {
              if (tabFactory === void 0) {
                tabFactory = function tabFactory(el) {
                  return new component_3.MDCTab(el);
                };
              }
              if (tabScrollerFactory === void 0) {
                tabScrollerFactory = function tabScrollerFactory(el) {
                  return new component_2.MDCTabScroller(el);
                };
              }
              this.tabList_ = this.instantiateTabs_(tabFactory);
              this.tabScroller_ = this.instantiateTabScroller_(tabScrollerFactory);
            };
            MDCTabBar.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleTabInteraction_ = function (evt) {
                return _this.foundation.handleTabInteraction(evt);
              };
              this.handleKeyDown_ = function (evt) {
                return _this.foundation.handleKeyDown(evt);
              };
              this.listen(foundation_1.MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction_);
              this.listen('keydown', this.handleKeyDown_);
              for (var i = 0; i < this.tabList_.length; i++) {
                if (this.tabList_[i].active) {
                  this.scrollIntoView(i);
                  break;
                }
              }
            };
            MDCTabBar.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.unlisten(foundation_1.MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction_);
              this.unlisten('keydown', this.handleKeyDown_);
              this.tabList_.forEach(function (tab) {
                return tab.destroy();
              });
              if (this.tabScroller_) {
                this.tabScroller_.destroy();
              }
            };
            MDCTabBar.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                scrollTo: function scrollTo(scrollX) {
                  return _this.tabScroller_.scrollTo(scrollX);
                },
                incrementScroll: function incrementScroll(scrollXIncrement) {
                  return _this.tabScroller_.incrementScroll(scrollXIncrement);
                },
                getScrollPosition: function getScrollPosition() {
                  return _this.tabScroller_.getScrollPosition();
                },
                getScrollContentWidth: function getScrollContentWidth() {
                  return _this.tabScroller_.getScrollContentWidth();
                },
                getOffsetWidth: function getOffsetWidth() {
                  return _this.root.offsetWidth;
                },
                isRTL: function isRTL() {
                  return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
                },
                setActiveTab: function setActiveTab(index) {
                  return _this.foundation.activateTab(index);
                },
                activateTabAtIndex: function activateTabAtIndex(index, clientRect) {
                  return _this.tabList_[index].activate(clientRect);
                },
                deactivateTabAtIndex: function deactivateTabAtIndex(index) {
                  return _this.tabList_[index].deactivate();
                },
                focusTabAtIndex: function focusTabAtIndex(index) {
                  return _this.tabList_[index].focus();
                },
                getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex(index) {
                  return _this.tabList_[index].computeIndicatorClientRect();
                },
                getTabDimensionsAtIndex: function getTabDimensionsAtIndex(index) {
                  return _this.tabList_[index].computeDimensions();
                },
                getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
                  for (var i = 0; i < _this.tabList_.length; i++) {
                    if (_this.tabList_[i].active) {
                      return i;
                    }
                  }
                  return -1;
                },
                getFocusedTabIndex: function getFocusedTabIndex() {
                  var tabElements = _this.getTabElements_();
                  var activeElement = document.activeElement;
                  return tabElements.indexOf(activeElement);
                },
                getIndexOfTabById: function getIndexOfTabById(id) {
                  for (var i = 0; i < _this.tabList_.length; i++) {
                    if (_this.tabList_[i].id === id) {
                      return i;
                    }
                  }
                  return -1;
                },
                getTabListLength: function getTabListLength() {
                  return _this.tabList_.length;
                },
                notifyTabActivated: function notifyTabActivated(index) {
                  return _this.emit(strings.TAB_ACTIVATED_EVENT, { index: index }, true);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_2.MDCTabBarFoundation(adapter);
            };
            /**
             * Activates the tab at the given index
             * @param index The index of the tab
             */
            MDCTabBar.prototype.activateTab = function (index) {
              this.foundation.activateTab(index);
            };
            /**
             * Scrolls the tab at the given index into view
             * @param index THe index of the tab
             */
            MDCTabBar.prototype.scrollIntoView = function (index) {
              this.foundation.scrollIntoView(index);
            };
            /**
             * Returns all the tab elements in a nice clean array
             */
            MDCTabBar.prototype.getTabElements_ = function () {
              return [].slice.call(this.root.querySelectorAll(strings.TAB_SELECTOR));
            };
            /**
             * Instantiates tab components on all child tab elements
             */
            MDCTabBar.prototype.instantiateTabs_ = function (tabFactory) {
              return this.getTabElements_().map(function (el) {
                el.id = el.id || "mdc-tab-" + ++tabIdCounter;
                return tabFactory(el);
              });
            };
            /**
             * Instantiates tab scroller component on the child tab scroller element
             */
            MDCTabBar.prototype.instantiateTabScroller_ = function (tabScrollerFactory) {
              var tabScrollerElement = this.root.querySelector(strings.TAB_SCROLLER_SELECTOR);
              if (tabScrollerElement) {
                return tabScrollerFactory(tabScrollerElement);
              }
              return null;
            };
            return MDCTabBar;
          }(component_1.MDCComponent);
          exports.MDCTabBar = MDCTabBar;

          /***/ }),

        /***/ "./packages/mdc-tab-bar/constants.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-tab-bar/constants.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            ARROW_LEFT_KEY: 'ArrowLeft',
            ARROW_RIGHT_KEY: 'ArrowRight',
            END_KEY: 'End',
            ENTER_KEY: 'Enter',
            HOME_KEY: 'Home',
            SPACE_KEY: 'Space',
            TAB_ACTIVATED_EVENT: 'MDCTabBar:activated',
            TAB_SCROLLER_SELECTOR: '.mdc-tab-scroller',
            TAB_SELECTOR: '.mdc-tab'
          };
          exports.strings = strings;
          var numbers = {
            ARROW_LEFT_KEYCODE: 37,
            ARROW_RIGHT_KEYCODE: 39,
            END_KEYCODE: 35,
            ENTER_KEYCODE: 13,
            EXTRA_SCROLL_AMOUNT: 20,
            HOME_KEYCODE: 36,
            SPACE_KEYCODE: 32
          };
          exports.numbers = numbers;

          /***/ }),

        /***/ "./packages/mdc-tab-bar/foundation.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-tab-bar/foundation.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tab-bar/constants.ts");
          var ACCEPTABLE_KEYS = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this by hand
          ACCEPTABLE_KEYS.add(constants_1.strings.ARROW_LEFT_KEY);
          ACCEPTABLE_KEYS.add(constants_1.strings.ARROW_RIGHT_KEY);
          ACCEPTABLE_KEYS.add(constants_1.strings.END_KEY);
          ACCEPTABLE_KEYS.add(constants_1.strings.HOME_KEY);
          ACCEPTABLE_KEYS.add(constants_1.strings.ENTER_KEY);
          ACCEPTABLE_KEYS.add(constants_1.strings.SPACE_KEY);
          var KEYCODE_MAP = new Map();
// IE11 has no support for new Map with iterable so we need to initialize this by hand
          KEYCODE_MAP.set(constants_1.numbers.ARROW_LEFT_KEYCODE, constants_1.strings.ARROW_LEFT_KEY);
          KEYCODE_MAP.set(constants_1.numbers.ARROW_RIGHT_KEYCODE, constants_1.strings.ARROW_RIGHT_KEY);
          KEYCODE_MAP.set(constants_1.numbers.END_KEYCODE, constants_1.strings.END_KEY);
          KEYCODE_MAP.set(constants_1.numbers.HOME_KEYCODE, constants_1.strings.HOME_KEY);
          KEYCODE_MAP.set(constants_1.numbers.ENTER_KEYCODE, constants_1.strings.ENTER_KEY);
          KEYCODE_MAP.set(constants_1.numbers.SPACE_KEYCODE, constants_1.strings.SPACE_KEY);
          var MDCTabBarFoundation = /** @class */function (_super) {
            __extends(MDCTabBarFoundation, _super);
            function MDCTabBarFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation.defaultAdapter), adapter)) || this;
              _this.useAutomaticActivation_ = false;
              return _this;
            }
            Object.defineProperty(MDCTabBarFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabBarFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabBarFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  scrollTo: function scrollTo() {
                    return undefined;
                  },
                  incrementScroll: function incrementScroll() {
                    return undefined;
                  },
                  getScrollPosition: function getScrollPosition() {
                    return 0;
                  },
                  getScrollContentWidth: function getScrollContentWidth() {
                    return 0;
                  },
                  getOffsetWidth: function getOffsetWidth() {
                    return 0;
                  },
                  isRTL: function isRTL() {
                    return false;
                  },
                  setActiveTab: function setActiveTab() {
                    return undefined;
                  },
                  activateTabAtIndex: function activateTabAtIndex() {
                    return undefined;
                  },
                  deactivateTabAtIndex: function deactivateTabAtIndex() {
                    return undefined;
                  },
                  focusTabAtIndex: function focusTabAtIndex() {
                    return undefined;
                  },
                  getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  getTabDimensionsAtIndex: function getTabDimensionsAtIndex() {
                    return { rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 };
                  },
                  getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
                    return -1;
                  },
                  getFocusedTabIndex: function getFocusedTabIndex() {
                    return -1;
                  },
                  getIndexOfTabById: function getIndexOfTabById() {
                    return -1;
                  },
                  getTabListLength: function getTabListLength() {
                    return 0;
                  },
                  notifyTabActivated: function notifyTabActivated() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Switches between automatic and manual activation modes.
             * See https://www.w3.org/TR/wai-aria-practices/#tabpanel for examples.
             */
            MDCTabBarFoundation.prototype.setUseAutomaticActivation = function (useAutomaticActivation) {
              this.useAutomaticActivation_ = useAutomaticActivation;
            };
            MDCTabBarFoundation.prototype.activateTab = function (index) {
              var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
              if (!this.indexIsInRange_(index) || index === previousActiveIndex) {
                return;
              }
              var previousClientRect;
              if (previousActiveIndex !== -1) {
                this.adapter.deactivateTabAtIndex(previousActiveIndex);
                previousClientRect = this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
              }
              this.adapter.activateTabAtIndex(index, previousClientRect);
              this.scrollIntoView(index);
              this.adapter.notifyTabActivated(index);
            };
            MDCTabBarFoundation.prototype.handleKeyDown = function (evt) {
              // Get the key from the event
              var key = this.getKeyFromEvent_(evt);
              // Early exit if the event key isn't one of the keyboard navigation keys
              if (key === undefined) {
                return;
              }
              // Prevent default behavior for movement keys, but not for activation keys, since :active is used to apply ripple
              if (!this.isActivationKey_(key)) {
                evt.preventDefault();
              }
              if (this.useAutomaticActivation_) {
                if (this.isActivationKey_(key)) {
                  return;
                }
                var index = this.determineTargetFromKey_(this.adapter.getPreviousActiveTabIndex(), key);
                this.adapter.setActiveTab(index);
                this.scrollIntoView(index);
              } else {
                var focusedTabIndex = this.adapter.getFocusedTabIndex();
                if (this.isActivationKey_(key)) {
                  this.adapter.setActiveTab(focusedTabIndex);
                } else {
                  var index = this.determineTargetFromKey_(focusedTabIndex, key);
                  this.adapter.focusTabAtIndex(index);
                  this.scrollIntoView(index);
                }
              }
            };
            /**
             * Handles the MDCTab:interacted event
             */
            MDCTabBarFoundation.prototype.handleTabInteraction = function (evt) {
              this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
            };
            /**
             * Scrolls the tab at the given index into view
             * @param index The tab index to make visible
             */
            MDCTabBarFoundation.prototype.scrollIntoView = function (index) {
              // Early exit if the index is out of range
              if (!this.indexIsInRange_(index)) {
                return;
              }
              // Always scroll to 0 if scrolling to the 0th index
              if (index === 0) {
                return this.adapter.scrollTo(0);
              }
              // Always scroll to the max value if scrolling to the Nth index
              // MDCTabScroller.scrollTo() will never scroll past the max possible value
              if (index === this.adapter.getTabListLength() - 1) {
                return this.adapter.scrollTo(this.adapter.getScrollContentWidth());
              }
              if (this.isRTL_()) {
                return this.scrollIntoViewRTL_(index);
              }
              this.scrollIntoView_(index);
            };
            /**
             * Private method for determining the index of the destination tab based on what key was pressed
             * @param origin The original index from which to determine the destination
             * @param key The name of the key
             */
            MDCTabBarFoundation.prototype.determineTargetFromKey_ = function (origin, key) {
              var isRTL = this.isRTL_();
              var maxIndex = this.adapter.getTabListLength() - 1;
              var shouldGoToEnd = key === constants_1.strings.END_KEY;
              var shouldDecrement = key === constants_1.strings.ARROW_LEFT_KEY && !isRTL || key === constants_1.strings.ARROW_RIGHT_KEY && isRTL;
              var shouldIncrement = key === constants_1.strings.ARROW_RIGHT_KEY && !isRTL || key === constants_1.strings.ARROW_LEFT_KEY && isRTL;
              var index = origin;
              if (shouldGoToEnd) {
                index = maxIndex;
              } else if (shouldDecrement) {
                index -= 1;
              } else if (shouldIncrement) {
                index += 1;
              } else {
                index = 0;
              }
              if (index < 0) {
                index = maxIndex;
              } else if (index > maxIndex) {
                index = 0;
              }
              return index;
            };
            /**
             * Calculates the scroll increment that will make the tab at the given index visible
             * @param index The index of the tab
             * @param nextIndex The index of the next tab
             * @param scrollPosition The current scroll position
             * @param barWidth The width of the Tab Bar
             */
            MDCTabBarFoundation.prototype.calculateScrollIncrement_ = function (index, nextIndex, scrollPosition, barWidth) {
              var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
              var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
              var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
              var leftIncrement = relativeContentRight - constants_1.numbers.EXTRA_SCROLL_AMOUNT;
              var rightIncrement = relativeContentLeft + constants_1.numbers.EXTRA_SCROLL_AMOUNT;
              if (nextIndex < index) {
                return Math.min(leftIncrement, 0);
              }
              return Math.max(rightIncrement, 0);
            };
            /**
             * Calculates the scroll increment that will make the tab at the given index visible in RTL
             * @param index The index of the tab
             * @param nextIndex The index of the next tab
             * @param scrollPosition The current scroll position
             * @param barWidth The width of the Tab Bar
             * @param scrollContentWidth The width of the scroll content
             */
            MDCTabBarFoundation.prototype.calculateScrollIncrementRTL_ = function (index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
              var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
              var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
              var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
              var leftIncrement = relativeContentRight + constants_1.numbers.EXTRA_SCROLL_AMOUNT;
              var rightIncrement = relativeContentLeft - constants_1.numbers.EXTRA_SCROLL_AMOUNT;
              if (nextIndex > index) {
                return Math.max(leftIncrement, 0);
              }
              return Math.min(rightIncrement, 0);
            };
            /**
             * Determines the index of the adjacent tab closest to either edge of the Tab Bar
             * @param index The index of the tab
             * @param tabDimensions The dimensions of the tab
             * @param scrollPosition The current scroll position
             * @param barWidth The width of the tab bar
             */
            MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdge_ = function (index, tabDimensions, scrollPosition, barWidth) {
              /**
               * Tabs are laid out in the Tab Scroller like this:
               *
               *    Scroll Position
               *    +---+
               *    |   |   Bar Width
               *    |   +-----------------------------------+
               *    |   |                                   |
               *    |   V                                   V
               *    |   +-----------------------------------+
               *    V   |             Tab Scroller          |
               *    +------------+--------------+-------------------+
               *    |    Tab     |      Tab     |        Tab        |
               *    +------------+--------------+-------------------+
               *        |                                   |
               *        +-----------------------------------+
               *
               * To determine the next adjacent index, we look at the Tab root left and
               * Tab root right, both relative to the scroll position. If the Tab root
               * left is less than 0, then we know it's out of view to the left. If the
               * Tab root right minus the bar width is greater than 0, we know the Tab is
               * out of view to the right. From there, we either increment or decrement
               * the index.
               */
              var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
              var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
              var relativeRootDelta = relativeRootLeft + relativeRootRight;
              var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
              var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
              if (leftEdgeIsCloser) {
                return index - 1;
              }
              if (rightEdgeIsCloser) {
                return index + 1;
              }
              return -1;
            };
            /**
             * Determines the index of the adjacent tab closest to either edge of the Tab Bar in RTL
             * @param index The index of the tab
             * @param tabDimensions The dimensions of the tab
             * @param scrollPosition The current scroll position
             * @param barWidth The width of the tab bar
             * @param scrollContentWidth The width of the scroller content
             */
            MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdgeRTL_ = function (index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
              var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
              var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
              var rootDelta = rootLeft + rootRight;
              var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
              var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
              if (leftEdgeIsCloser) {
                return index + 1;
              }
              if (rightEdgeIsCloser) {
                return index - 1;
              }
              return -1;
            };
            /**
             * Returns the key associated with a keydown event
             * @param evt The keydown event
             */
            MDCTabBarFoundation.prototype.getKeyFromEvent_ = function (evt) {
              if (ACCEPTABLE_KEYS.has(evt.key)) {
                return evt.key;
              }
              return KEYCODE_MAP.get(evt.keyCode);
            };
            MDCTabBarFoundation.prototype.isActivationKey_ = function (key) {
              return key === constants_1.strings.SPACE_KEY || key === constants_1.strings.ENTER_KEY;
            };
            /**
             * Returns whether a given index is inclusively between the ends
             * @param index The index to test
             */
            MDCTabBarFoundation.prototype.indexIsInRange_ = function (index) {
              return index >= 0 && index < this.adapter.getTabListLength();
            };
            /**
             * Returns the view's RTL property
             */
            MDCTabBarFoundation.prototype.isRTL_ = function () {
              return this.adapter.isRTL();
            };
            /**
             * Scrolls the tab at the given index into view for left-to-right user agents.
             * @param index The index of the tab to scroll into view
             */
            MDCTabBarFoundation.prototype.scrollIntoView_ = function (index) {
              var scrollPosition = this.adapter.getScrollPosition();
              var barWidth = this.adapter.getOffsetWidth();
              var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
              var nextIndex = this.findAdjacentTabIndexClosestToEdge_(index, tabDimensions, scrollPosition, barWidth);
              if (!this.indexIsInRange_(nextIndex)) {
                return;
              }
              var scrollIncrement = this.calculateScrollIncrement_(index, nextIndex, scrollPosition, barWidth);
              this.adapter.incrementScroll(scrollIncrement);
            };
            /**
             * Scrolls the tab at the given index into view in RTL
             * @param index The tab index to make visible
             */
            MDCTabBarFoundation.prototype.scrollIntoViewRTL_ = function (index) {
              var scrollPosition = this.adapter.getScrollPosition();
              var barWidth = this.adapter.getOffsetWidth();
              var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
              var scrollWidth = this.adapter.getScrollContentWidth();
              var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL_(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
              if (!this.indexIsInRange_(nextIndex)) {
                return;
              }
              var scrollIncrement = this.calculateScrollIncrementRTL_(index, nextIndex, scrollPosition, barWidth, scrollWidth);
              this.adapter.incrementScroll(scrollIncrement);
            };
            return MDCTabBarFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTabBarFoundation = MDCTabBarFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabBarFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab-bar/index.ts":
        /*!***************************************!*\
  !*** ./packages/mdc-tab-bar/index.ts ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-tab-bar/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-tab-bar/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-tab-bar/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/component.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-tab-indicator/component.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var fading_foundation_1 = __webpack_require__(/*! ./fading-foundation */ "./packages/mdc-tab-indicator/fading-foundation.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab-indicator/foundation.ts");
          var sliding_foundation_1 = __webpack_require__(/*! ./sliding-foundation */ "./packages/mdc-tab-indicator/sliding-foundation.ts");
          var MDCTabIndicator = /** @class */function (_super) {
            __extends(MDCTabIndicator, _super);
            function MDCTabIndicator() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabIndicator.attachTo = function (root) {
              return new MDCTabIndicator(root);
            };
            MDCTabIndicator.prototype.initialize = function () {
              this.content_ = this.root.querySelector(foundation_1.MDCTabIndicatorFoundation.strings.CONTENT_SELECTOR);
            };
            MDCTabIndicator.prototype.computeContentClientRect = function () {
              return this.foundation.computeContentClientRect();
            };
            MDCTabIndicator.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                computeContentClientRect: function computeContentClientRect() {
                  return _this.content_.getBoundingClientRect();
                },
                setContentStyleProperty: function setContentStyleProperty(prop, value) {
                  return _this.content_.style.setProperty(prop, value);
                }
              };
              // tslint:enable:object-literal-sort-keys
              if (this.root.classList.contains(foundation_1.MDCTabIndicatorFoundation.cssClasses.FADE)) {
                return new fading_foundation_1.MDCFadingTabIndicatorFoundation(adapter);
              }
              // Default to the sliding indicator
              return new sliding_foundation_1.MDCSlidingTabIndicatorFoundation(adapter);
            };
            MDCTabIndicator.prototype.activate = function (previousIndicatorClientRect) {
              this.foundation.activate(previousIndicatorClientRect);
            };
            MDCTabIndicator.prototype.deactivate = function () {
              this.foundation.deactivate();
            };
            return MDCTabIndicator;
          }(component_1.MDCComponent);
          exports.MDCTabIndicator = MDCTabIndicator;

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/constants.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-tab-indicator/constants.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ACTIVE: 'mdc-tab-indicator--active',
            FADE: 'mdc-tab-indicator--fade',
            NO_TRANSITION: 'mdc-tab-indicator--no-transition'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            CONTENT_SELECTOR: '.mdc-tab-indicator__content'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/fading-foundation.ts":
        /*!*********************************************************!*\
  !*** ./packages/mdc-tab-indicator/fading-foundation.ts ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab-indicator/foundation.ts");
          /* istanbul ignore next: subclass is not a branch statement */
          var MDCFadingTabIndicatorFoundation = /** @class */function (_super) {
            __extends(MDCFadingTabIndicatorFoundation, _super);
            function MDCFadingTabIndicatorFoundation() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCFadingTabIndicatorFoundation.prototype.activate = function () {
              this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
            };
            MDCFadingTabIndicatorFoundation.prototype.deactivate = function () {
              this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
            };
            return MDCFadingTabIndicatorFoundation;
          }(foundation_1.MDCTabIndicatorFoundation);
          exports.MDCFadingTabIndicatorFoundation = MDCFadingTabIndicatorFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCFadingTabIndicatorFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/foundation.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-tab-indicator/foundation.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tab-indicator/constants.ts");
          var MDCTabIndicatorFoundation = /** @class */function (_super) {
            __extends(MDCTabIndicatorFoundation, _super);
            function MDCTabIndicatorFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCTabIndicatorFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabIndicatorFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabIndicatorFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  computeContentClientRect: function computeContentClientRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  setContentStyleProperty: function setContentStyleProperty() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTabIndicatorFoundation.prototype.computeContentClientRect = function () {
              return this.adapter.computeContentClientRect();
            };
            return MDCTabIndicatorFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTabIndicatorFoundation = MDCTabIndicatorFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabIndicatorFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/index.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-tab-indicator/index.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-tab-indicator/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-tab-indicator/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-tab-indicator/foundation.ts"));
          __export(__webpack_require__(/*! ./fading-foundation */ "./packages/mdc-tab-indicator/fading-foundation.ts"));
          __export(__webpack_require__(/*! ./sliding-foundation */ "./packages/mdc-tab-indicator/sliding-foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-tab-indicator/sliding-foundation.ts":
        /*!**********************************************************!*\
  !*** ./packages/mdc-tab-indicator/sliding-foundation.ts ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab-indicator/foundation.ts");
          /* istanbul ignore next: subclass is not a branch statement */
          var MDCSlidingTabIndicatorFoundation = /** @class */function (_super) {
            __extends(MDCSlidingTabIndicatorFoundation, _super);
            function MDCSlidingTabIndicatorFoundation() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCSlidingTabIndicatorFoundation.prototype.activate = function (previousIndicatorClientRect) {
              // Early exit if no indicator is present to handle cases where an indicator
              // may be activated without a prior indicator state
              if (!previousIndicatorClientRect) {
                this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                return;
              }
              // This animation uses the FLIP approach. You can read more about it at the link below:
              // https://aerotwist.com/blog/flip-your-animations/
              // Calculate the dimensions based on the dimensions of the previous indicator
              var currentClientRect = this.computeContentClientRect();
              var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
              var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
              this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
              this.adapter.setContentStyleProperty('transform', "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
              // Force repaint before updating classes and transform to ensure the transform properly takes effect
              this.computeContentClientRect();
              this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
              this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
              this.adapter.setContentStyleProperty('transform', '');
            };
            MDCSlidingTabIndicatorFoundation.prototype.deactivate = function () {
              this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
            };
            return MDCSlidingTabIndicatorFoundation;
          }(foundation_1.MDCTabIndicatorFoundation);
          exports.MDCSlidingTabIndicatorFoundation = MDCSlidingTabIndicatorFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCSlidingTabIndicatorFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/component.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-tab-scroller/component.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab-scroller/foundation.ts");
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-tab-scroller/util.ts"));
          var MDCTabScroller = /** @class */function (_super) {
            __extends(MDCTabScroller, _super);
            function MDCTabScroller() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabScroller.attachTo = function (root) {
              return new MDCTabScroller(root);
            };
            MDCTabScroller.prototype.initialize = function () {
              this.area_ = this.root.querySelector(foundation_1.MDCTabScrollerFoundation.strings.AREA_SELECTOR);
              this.content_ = this.root.querySelector(foundation_1.MDCTabScrollerFoundation.strings.CONTENT_SELECTOR);
            };
            MDCTabScroller.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleInteraction_ = function () {
                return _this.foundation.handleInteraction();
              };
              this.handleTransitionEnd_ = function (evt) {
                return _this.foundation.handleTransitionEnd(evt);
              };
              this.area_.addEventListener('wheel', this.handleInteraction_, events_1.applyPassive());
              this.area_.addEventListener('touchstart', this.handleInteraction_, events_1.applyPassive());
              this.area_.addEventListener('pointerdown', this.handleInteraction_, events_1.applyPassive());
              this.area_.addEventListener('mousedown', this.handleInteraction_, events_1.applyPassive());
              this.area_.addEventListener('keydown', this.handleInteraction_, events_1.applyPassive());
              this.content_.addEventListener('transitionend', this.handleTransitionEnd_);
            };
            MDCTabScroller.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.area_.removeEventListener('wheel', this.handleInteraction_, events_1.applyPassive());
              this.area_.removeEventListener('touchstart', this.handleInteraction_, events_1.applyPassive());
              this.area_.removeEventListener('pointerdown', this.handleInteraction_, events_1.applyPassive());
              this.area_.removeEventListener('mousedown', this.handleInteraction_, events_1.applyPassive());
              this.area_.removeEventListener('keydown', this.handleInteraction_, events_1.applyPassive());
              this.content_.removeEventListener('transitionend', this.handleTransitionEnd_);
            };
            MDCTabScroller.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                eventTargetMatchesSelector: function eventTargetMatchesSelector(evtTarget, selector) {
                  return ponyfill_1.matches(evtTarget, selector);
                },
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                addScrollAreaClass: function addScrollAreaClass(className) {
                  return _this.area_.classList.add(className);
                },
                setScrollAreaStyleProperty: function setScrollAreaStyleProperty(prop, value) {
                  return _this.area_.style.setProperty(prop, value);
                },
                setScrollContentStyleProperty: function setScrollContentStyleProperty(prop, value) {
                  return _this.content_.style.setProperty(prop, value);
                },
                getScrollContentStyleValue: function getScrollContentStyleValue(propName) {
                  return window.getComputedStyle(_this.content_).getPropertyValue(propName);
                },
                setScrollAreaScrollLeft: function setScrollAreaScrollLeft(scrollX) {
                  return _this.area_.scrollLeft = scrollX;
                },
                getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
                  return _this.area_.scrollLeft;
                },
                getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
                  return _this.content_.offsetWidth;
                },
                getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
                  return _this.area_.offsetWidth;
                },
                computeScrollAreaClientRect: function computeScrollAreaClientRect() {
                  return _this.area_.getBoundingClientRect();
                },
                computeScrollContentClientRect: function computeScrollContentClientRect() {
                  return _this.content_.getBoundingClientRect();
                },
                computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight() {
                  return util.computeHorizontalScrollbarHeight(document);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCTabScrollerFoundation(adapter);
            };
            /**
             * Returns the current visual scroll position
             */
            MDCTabScroller.prototype.getScrollPosition = function () {
              return this.foundation.getScrollPosition();
            };
            /**
             * Returns the width of the scroll content
             */
            MDCTabScroller.prototype.getScrollContentWidth = function () {
              return this.content_.offsetWidth;
            };
            /**
             * Increments the scroll value by the given amount
             * @param scrollXIncrement The pixel value by which to increment the scroll value
             */
            MDCTabScroller.prototype.incrementScroll = function (scrollXIncrement) {
              this.foundation.incrementScroll(scrollXIncrement);
            };
            /**
             * Scrolls to the given pixel position
             * @param scrollX The pixel value to scroll to
             */
            MDCTabScroller.prototype.scrollTo = function (scrollX) {
              this.foundation.scrollTo(scrollX);
            };
            return MDCTabScroller;
          }(component_1.MDCComponent);
          exports.MDCTabScroller = MDCTabScroller;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/constants.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-tab-scroller/constants.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ANIMATING: 'mdc-tab-scroller--animating',
            SCROLL_AREA_SCROLL: 'mdc-tab-scroller__scroll-area--scroll',
            SCROLL_TEST: 'mdc-tab-scroller__test'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            AREA_SELECTOR: '.mdc-tab-scroller__scroll-area',
            CONTENT_SELECTOR: '.mdc-tab-scroller__scroll-content'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/foundation.ts":
        /*!*************************************************!*\
  !*** ./packages/mdc-tab-scroller/foundation.ts ***!
  \*************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __read = this && this.__read || function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;
            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
              }
            } catch (error) {
              e = { error: error };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }
            return ar;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tab-scroller/constants.ts");
          var rtl_default_scroller_1 = __webpack_require__(/*! ./rtl-default-scroller */ "./packages/mdc-tab-scroller/rtl-default-scroller.ts");
          var rtl_negative_scroller_1 = __webpack_require__(/*! ./rtl-negative-scroller */ "./packages/mdc-tab-scroller/rtl-negative-scroller.ts");
          var rtl_reverse_scroller_1 = __webpack_require__(/*! ./rtl-reverse-scroller */ "./packages/mdc-tab-scroller/rtl-reverse-scroller.ts");
          var MDCTabScrollerFoundation = /** @class */function (_super) {
            __extends(MDCTabScrollerFoundation, _super);
            function MDCTabScrollerFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;
              /**
               * Controls whether we should handle the transitionend and interaction events during the animation.
               */
              _this.isAnimating_ = false;
              return _this;
            }
            Object.defineProperty(MDCTabScrollerFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabScrollerFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabScrollerFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  eventTargetMatchesSelector: function eventTargetMatchesSelector() {
                    return false;
                  },
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  addScrollAreaClass: function addScrollAreaClass() {
                    return undefined;
                  },
                  setScrollAreaStyleProperty: function setScrollAreaStyleProperty() {
                    return undefined;
                  },
                  setScrollContentStyleProperty: function setScrollContentStyleProperty() {
                    return undefined;
                  },
                  getScrollContentStyleValue: function getScrollContentStyleValue() {
                    return '';
                  },
                  setScrollAreaScrollLeft: function setScrollAreaScrollLeft() {
                    return undefined;
                  },
                  getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
                    return 0;
                  },
                  getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
                    return 0;
                  },
                  getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
                    return 0;
                  },
                  computeScrollAreaClientRect: function computeScrollAreaClientRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  computeScrollContentClientRect: function computeScrollContentClientRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight() {
                    return 0;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTabScrollerFoundation.prototype.init = function () {
              // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll
              // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.
              var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
              this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');
              this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);
            };
            /**
             * Computes the current visual scroll position
             */
            MDCTabScrollerFoundation.prototype.getScrollPosition = function () {
              if (this.isRTL_()) {
                return this.computeCurrentScrollPositionRTL_();
              }
              var currentTranslateX = this.calculateCurrentTranslateX_();
              var scrollLeft = this.adapter.getScrollAreaScrollLeft();
              return scrollLeft - currentTranslateX;
            };
            /**
             * Handles interaction events that occur during transition
             */
            MDCTabScrollerFoundation.prototype.handleInteraction = function () {
              // Early exit if we aren't animating
              if (!this.isAnimating_) {
                return;
              }
              // Prevent other event listeners from handling this event
              this.stopScrollAnimation_();
            };
            /**
             * Handles the transitionend event
             */
            MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {
              // Early exit if we aren't animating or the event was triggered by a different element.
              var evtTarget = evt.target;
              if (!this.isAnimating_ || !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {
                return;
              }
              this.isAnimating_ = false;
              this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
            };
            /**
             * Increment the scroll value by the scrollXIncrement using animation.
             * @param scrollXIncrement The value by which to increment the scroll position
             */
            MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {
              // Early exit for non-operational increment values
              if (scrollXIncrement === 0) {
                return;
              }
              this.animate_(this.getIncrementScrollOperation_(scrollXIncrement));
            };
            /**
             * Increment the scroll value by the scrollXIncrement without animation.
             * @param scrollXIncrement The value by which to increment the scroll position
             */
            MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {
              // Early exit for non-operational increment values
              if (scrollXIncrement === 0) {
                return;
              }
              var operation = this.getIncrementScrollOperation_(scrollXIncrement);
              if (operation.scrollDelta === 0) {
                return;
              }
              this.stopScrollAnimation_();
              this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
            };
            /**
             * Scrolls to the given scrollX value
             */
            MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {
              if (this.isRTL_()) {
                return this.scrollToRTL_(scrollX);
              }
              this.scrollTo_(scrollX);
            };
            /**
             * @return Browser-specific {@link MDCTabScrollerRTL} instance.
             */
            MDCTabScrollerFoundation.prototype.getRTLScroller = function () {
              if (!this.rtlScrollerInstance_) {
                this.rtlScrollerInstance_ = this.rtlScrollerFactory_();
              }
              return this.rtlScrollerInstance_;
            };
            /**
             * @return translateX value from a CSS matrix transform function string.
             */
            MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX_ = function () {
              var transformValue = this.adapter.getScrollContentStyleValue('transform');
              // Early exit if no transform is present
              if (transformValue === 'none') {
                return 0;
              }
              // The transform value comes back as a matrix transformation in the form
              // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so
              // we're going to grab all the parenthesized values, strip out tx, and
              // parse it.
              var match = /\((.+?)\)/.exec(transformValue);
              if (!match) {
                return 0;
              }
              var matrixParams = match[1];
              // tslint:disable-next-line:ban-ts-ignore "Unused vars" should be a linter warning, not a compiler error.
              // @ts-ignore These unused variables should retain their semantic names for clarity.
              var _a = __read(matrixParams.split(','), 6),
                  a = _a[0],
                  b = _a[1],
                  c = _a[2],
                  d = _a[3],
                  tx = _a[4],
                  ty = _a[5];
              return parseFloat(tx); // tslint:disable-line:ban
            };
            /**
             * Calculates a safe scroll value that is > 0 and < the max scroll value
             * @param scrollX The distance to scroll
             */
            MDCTabScrollerFoundation.prototype.clampScrollValue_ = function (scrollX) {
              var edges = this.calculateScrollEdges_();
              return Math.min(Math.max(edges.left, scrollX), edges.right);
            };
            MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL_ = function () {
              var translateX = this.calculateCurrentTranslateX_();
              return this.getRTLScroller().getScrollPositionRTL(translateX);
            };
            MDCTabScrollerFoundation.prototype.calculateScrollEdges_ = function () {
              var contentWidth = this.adapter.getScrollContentOffsetWidth();
              var rootWidth = this.adapter.getScrollAreaOffsetWidth();
              return {
                left: 0,
                right: contentWidth - rootWidth
              };
            };
            /**
             * Internal scroll method
             * @param scrollX The new scroll position
             */
            MDCTabScrollerFoundation.prototype.scrollTo_ = function (scrollX) {
              var currentScrollX = this.getScrollPosition();
              var safeScrollX = this.clampScrollValue_(scrollX);
              var scrollDelta = safeScrollX - currentScrollX;
              this.animate_({
                finalScrollPosition: safeScrollX,
                scrollDelta: scrollDelta
              });
            };
            /**
             * Internal RTL scroll method
             * @param scrollX The new scroll position
             */
            MDCTabScrollerFoundation.prototype.scrollToRTL_ = function (scrollX) {
              var animation = this.getRTLScroller().scrollToRTL(scrollX);
              this.animate_(animation);
            };
            /**
             * Internal method to compute the increment scroll operation values.
             * @param scrollX The desired scroll position increment
             * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.
             */
            MDCTabScrollerFoundation.prototype.getIncrementScrollOperation_ = function (scrollX) {
              if (this.isRTL_()) {
                return this.getRTLScroller().incrementScrollRTL(scrollX);
              }
              var currentScrollX = this.getScrollPosition();
              var targetScrollX = scrollX + currentScrollX;
              var safeScrollX = this.clampScrollValue_(targetScrollX);
              var scrollDelta = safeScrollX - currentScrollX;
              return {
                finalScrollPosition: safeScrollX,
                scrollDelta: scrollDelta
              };
            };
            /**
             * Animates the tab scrolling
             * @param animation The animation to apply
             */
            MDCTabScrollerFoundation.prototype.animate_ = function (animation) {
              var _this = this;
              // Early exit if translateX is 0, which means there's no animation to perform
              if (animation.scrollDelta === 0) {
                return;
              }
              this.stopScrollAnimation_();
              // This animation uses the FLIP approach.
              // Read more here: https://aerotwist.com/blog/flip-your-animations/
              this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
              this.adapter.setScrollContentStyleProperty('transform', "translateX(" + animation.scrollDelta + "px)");
              // Force repaint
              this.adapter.computeScrollAreaClientRect();
              requestAnimationFrame(function () {
                _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
                _this.adapter.setScrollContentStyleProperty('transform', 'none');
              });
              this.isAnimating_ = true;
            };
            /**
             * Stops scroll animation
             */
            MDCTabScrollerFoundation.prototype.stopScrollAnimation_ = function () {
              this.isAnimating_ = false;
              var currentScrollPosition = this.getAnimatingScrollPosition_();
              this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
              this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');
              this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
            };
            /**
             * Gets the current scroll position during animation
             */
            MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition_ = function () {
              var currentTranslateX = this.calculateCurrentTranslateX_();
              var scrollLeft = this.adapter.getScrollAreaScrollLeft();
              if (this.isRTL_()) {
                return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
              }
              return scrollLeft - currentTranslateX;
            };
            /**
             * Determines the RTL Scroller to use
             */
            MDCTabScrollerFoundation.prototype.rtlScrollerFactory_ = function () {
              // Browsers have three different implementations of scrollLeft in RTL mode,
              // dependent on the browser. The behavior is based off the max LTR
              // scrollLeft value and 0.
              //
              // * Default scrolling in RTL *
              //    - Left-most value: 0
              //    - Right-most value: Max LTR scrollLeft value
              //
              // * Negative scrolling in RTL *
              //    - Left-most value: Negated max LTR scrollLeft value
              //    - Right-most value: 0
              //
              // * Reverse scrolling in RTL *
              //    - Left-most value: Max LTR scrollLeft value
              //    - Right-most value: 0
              //
              // We use those principles below to determine which RTL scrollLeft
              // behavior is implemented in the current browser.
              var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
              this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
              var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
              // If the newScrollLeft value is negative,then we know that the browser has
              // implemented negative RTL scrolling, since all other implementations have
              // only positive values.
              if (newScrollLeft < 0) {
                // Undo the scrollLeft test check
                this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
                return new rtl_negative_scroller_1.MDCTabScrollerRTLNegative(this.adapter);
              }
              var rootClientRect = this.adapter.computeScrollAreaClientRect();
              var contentClientRect = this.adapter.computeScrollContentClientRect();
              var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
              // Undo the scrollLeft test check
              this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
              // By calculating the clientRect of the root element and the clientRect of
              // the content element, we can determine how much the scroll value changed
              // when we performed the scrollLeft subtraction above.
              if (rightEdgeDelta === newScrollLeft) {
                return new rtl_reverse_scroller_1.MDCTabScrollerRTLReverse(this.adapter);
              }
              return new rtl_default_scroller_1.MDCTabScrollerRTLDefault(this.adapter);
            };
            MDCTabScrollerFoundation.prototype.isRTL_ = function () {
              return this.adapter.getScrollContentStyleValue('direction') === 'rtl';
            };
            return MDCTabScrollerFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTabScrollerFoundation = MDCTabScrollerFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabScrollerFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/index.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-tab-scroller/index.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-tab-scroller/util.ts"));
          exports.util = util;
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-tab-scroller/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-tab-scroller/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-tab-scroller/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/rtl-default-scroller.ts":
        /*!***********************************************************!*\
  !*** ./packages/mdc-tab-scroller/rtl-default-scroller.ts ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var rtl_scroller_1 = __webpack_require__(/*! ./rtl-scroller */ "./packages/mdc-tab-scroller/rtl-scroller.ts");
          var MDCTabScrollerRTLDefault = /** @class */function (_super) {
            __extends(MDCTabScrollerRTLDefault, _super);
            function MDCTabScrollerRTLDefault() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabScrollerRTLDefault.prototype.getScrollPositionRTL = function () {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var right = this.calculateScrollEdges_().right;
              // Scroll values on most browsers are ints instead of floats so we round
              return Math.round(right - currentScrollLeft);
            };
            MDCTabScrollerRTLDefault.prototype.scrollToRTL = function (scrollX) {
              var edges = this.calculateScrollEdges_();
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(edges.right - scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft
              };
            };
            MDCTabScrollerRTLDefault.prototype.incrementScrollRTL = function (scrollX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft - scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft
              };
            };
            MDCTabScrollerRTLDefault.prototype.getAnimatingScrollPosition = function (scrollX) {
              return scrollX;
            };
            MDCTabScrollerRTLDefault.prototype.calculateScrollEdges_ = function () {
              var contentWidth = this.adapter.getScrollContentOffsetWidth();
              var rootWidth = this.adapter.getScrollAreaOffsetWidth();
              return {
                left: 0,
                right: contentWidth - rootWidth
              };
            };
            MDCTabScrollerRTLDefault.prototype.clampScrollValue_ = function (scrollX) {
              var edges = this.calculateScrollEdges_();
              return Math.min(Math.max(edges.left, scrollX), edges.right);
            };
            return MDCTabScrollerRTLDefault;
          }(rtl_scroller_1.MDCTabScrollerRTL);
          exports.MDCTabScrollerRTLDefault = MDCTabScrollerRTLDefault;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabScrollerRTLDefault;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/rtl-negative-scroller.ts":
        /*!************************************************************!*\
  !*** ./packages/mdc-tab-scroller/rtl-negative-scroller.ts ***!
  \************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var rtl_scroller_1 = __webpack_require__(/*! ./rtl-scroller */ "./packages/mdc-tab-scroller/rtl-scroller.ts");
          var MDCTabScrollerRTLNegative = /** @class */function (_super) {
            __extends(MDCTabScrollerRTLNegative, _super);
            function MDCTabScrollerRTLNegative() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabScrollerRTLNegative.prototype.getScrollPositionRTL = function (translateX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              return Math.round(translateX - currentScrollLeft);
            };
            MDCTabScrollerRTLNegative.prototype.scrollToRTL = function (scrollX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(-scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft
              };
            };
            MDCTabScrollerRTLNegative.prototype.incrementScrollRTL = function (scrollX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft - scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: clampedScrollLeft - currentScrollLeft
              };
            };
            MDCTabScrollerRTLNegative.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
              return scrollX - translateX;
            };
            MDCTabScrollerRTLNegative.prototype.calculateScrollEdges_ = function () {
              var contentWidth = this.adapter.getScrollContentOffsetWidth();
              var rootWidth = this.adapter.getScrollAreaOffsetWidth();
              return {
                left: rootWidth - contentWidth,
                right: 0
              };
            };
            MDCTabScrollerRTLNegative.prototype.clampScrollValue_ = function (scrollX) {
              var edges = this.calculateScrollEdges_();
              return Math.max(Math.min(edges.right, scrollX), edges.left);
            };
            return MDCTabScrollerRTLNegative;
          }(rtl_scroller_1.MDCTabScrollerRTL);
          exports.MDCTabScrollerRTLNegative = MDCTabScrollerRTLNegative;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabScrollerRTLNegative;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/rtl-reverse-scroller.ts":
        /*!***********************************************************!*\
  !*** ./packages/mdc-tab-scroller/rtl-reverse-scroller.ts ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var rtl_scroller_1 = __webpack_require__(/*! ./rtl-scroller */ "./packages/mdc-tab-scroller/rtl-scroller.ts");
          var MDCTabScrollerRTLReverse = /** @class */function (_super) {
            __extends(MDCTabScrollerRTLReverse, _super);
            function MDCTabScrollerRTLReverse() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTabScrollerRTLReverse.prototype.getScrollPositionRTL = function (translateX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              // Scroll values on most browsers are ints instead of floats so we round
              return Math.round(currentScrollLeft - translateX);
            };
            MDCTabScrollerRTLReverse.prototype.scrollToRTL = function (scrollX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: currentScrollLeft - clampedScrollLeft
              };
            };
            MDCTabScrollerRTLReverse.prototype.incrementScrollRTL = function (scrollX) {
              var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
              var clampedScrollLeft = this.clampScrollValue_(currentScrollLeft + scrollX);
              return {
                finalScrollPosition: clampedScrollLeft,
                scrollDelta: currentScrollLeft - clampedScrollLeft
              };
            };
            MDCTabScrollerRTLReverse.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
              return scrollX + translateX;
            };
            MDCTabScrollerRTLReverse.prototype.calculateScrollEdges_ = function () {
              var contentWidth = this.adapter.getScrollContentOffsetWidth();
              var rootWidth = this.adapter.getScrollAreaOffsetWidth();
              return {
                left: contentWidth - rootWidth,
                right: 0
              };
            };
            MDCTabScrollerRTLReverse.prototype.clampScrollValue_ = function (scrollX) {
              var edges = this.calculateScrollEdges_();
              return Math.min(Math.max(edges.right, scrollX), edges.left);
            };
            return MDCTabScrollerRTLReverse;
          }(rtl_scroller_1.MDCTabScrollerRTL);
          exports.MDCTabScrollerRTLReverse = MDCTabScrollerRTLReverse;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabScrollerRTLReverse;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/rtl-scroller.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-tab-scroller/rtl-scroller.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var MDCTabScrollerRTL = /** @class */function () {
            function MDCTabScrollerRTL(adapter) {
              this.adapter = adapter;
            }
            return MDCTabScrollerRTL;
          }();
          exports.MDCTabScrollerRTL = MDCTabScrollerRTL;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabScrollerRTL;

          /***/ }),

        /***/ "./packages/mdc-tab-scroller/util.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-tab-scroller/util.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tab-scroller/constants.ts");
          /**
           * Stores result from computeHorizontalScrollbarHeight to avoid redundant processing.
           */
          var horizontalScrollbarHeight_;
          /**
           * Computes the height of browser-rendered horizontal scrollbars using a self-created test element.
           * May return 0 (e.g. on OS X browsers under default configuration).
           */
          function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
            if (shouldCacheResult === void 0) {
              shouldCacheResult = true;
            }
            if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== 'undefined') {
              return horizontalScrollbarHeight_;
            }
            var el = documentObj.createElement('div');
            el.classList.add(constants_1.cssClasses.SCROLL_TEST);
            documentObj.body.appendChild(el);
            var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
            documentObj.body.removeChild(el);
            if (shouldCacheResult) {
              horizontalScrollbarHeight_ = horizontalScrollbarHeight;
            }
            return horizontalScrollbarHeight;
          }
          exports.computeHorizontalScrollbarHeight = computeHorizontalScrollbarHeight;

          /***/ }),

        /***/ "./packages/mdc-tab/component.ts":
        /*!***************************************!*\
  !*** ./packages/mdc-tab/component.ts ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var component_3 = __webpack_require__(/*! @material/tab-indicator/component */ "./packages/mdc-tab-indicator/component.ts");
          var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tab/foundation.ts");
          var MDCTab = /** @class */function (_super) {
            __extends(MDCTab, _super);
            function MDCTab() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTab.attachTo = function (root) {
              return new MDCTab(root);
            };
            MDCTab.prototype.initialize = function (rippleFactory, tabIndicatorFactory) {
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el, foundation) {
                  return new component_2.MDCRipple(el, foundation);
                };
              }
              if (tabIndicatorFactory === void 0) {
                tabIndicatorFactory = function tabIndicatorFactory(el) {
                  return new component_3.MDCTabIndicator(el);
                };
              }
              this.id = this.root.id;
              var rippleSurface = this.root.querySelector(foundation_2.MDCTabFoundation.strings.RIPPLE_SELECTOR);
              var rippleAdapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { addClass: function addClass(className) {
                  return rippleSurface.classList.add(className);
                }, removeClass: function removeClass(className) {
                  return rippleSurface.classList.remove(className);
                }, updateCssVariable: function updateCssVariable(varName, value) {
                  return rippleSurface.style.setProperty(varName, value);
                } });
              var rippleFoundation = new foundation_1.MDCRippleFoundation(rippleAdapter);
              this.ripple_ = rippleFactory(this.root, rippleFoundation);
              var tabIndicatorElement = this.root.querySelector(foundation_2.MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);
              this.tabIndicator_ = tabIndicatorFactory(tabIndicatorElement);
              this.content_ = this.root.querySelector(foundation_2.MDCTabFoundation.strings.CONTENT_SELECTOR);
            };
            MDCTab.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.handleClick_ = function () {
                return _this.foundation.handleClick();
              };
              this.listen('click', this.handleClick_);
            };
            MDCTab.prototype.destroy = function () {
              this.unlisten('click', this.handleClick_);
              this.ripple_.destroy();
              _super.prototype.destroy.call(this);
            };
            MDCTab.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                setAttr: function setAttr(attr, value) {
                  return _this.root.setAttribute(attr, value);
                },
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                activateIndicator: function activateIndicator(previousIndicatorClientRect) {
                  return _this.tabIndicator_.activate(previousIndicatorClientRect);
                },
                deactivateIndicator: function deactivateIndicator() {
                  return _this.tabIndicator_.deactivate();
                },
                notifyInteracted: function notifyInteracted() {
                  return _this.emit(foundation_2.MDCTabFoundation.strings.INTERACTED_EVENT, { tabId: _this.id }, true /* bubble */);
                },
                getOffsetLeft: function getOffsetLeft() {
                  return _this.root.offsetLeft;
                },
                getOffsetWidth: function getOffsetWidth() {
                  return _this.root.offsetWidth;
                },
                getContentOffsetLeft: function getContentOffsetLeft() {
                  return _this.content_.offsetLeft;
                },
                getContentOffsetWidth: function getContentOffsetWidth() {
                  return _this.content_.offsetWidth;
                },
                focus: function focus() {
                  return _this.root.focus();
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_2.MDCTabFoundation(adapter);
            };
            Object.defineProperty(MDCTab.prototype, "active", {
              /**
               * Getter for the active state of the tab
               */
              get: function get() {
                return this.foundation.isActive();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTab.prototype, "focusOnActivate", {
              set: function set(focusOnActivate) {
                this.foundation.setFocusOnActivate(focusOnActivate);
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Activates the tab
             */
            MDCTab.prototype.activate = function (computeIndicatorClientRect) {
              this.foundation.activate(computeIndicatorClientRect);
            };
            /**
             * Deactivates the tab
             */
            MDCTab.prototype.deactivate = function () {
              this.foundation.deactivate();
            };
            /**
             * Returns the indicator's client rect
             */
            MDCTab.prototype.computeIndicatorClientRect = function () {
              return this.tabIndicator_.computeContentClientRect();
            };
            MDCTab.prototype.computeDimensions = function () {
              return this.foundation.computeDimensions();
            };
            /**
             * Focuses the tab
             */
            MDCTab.prototype.focus = function () {
              this.root.focus();
            };
            return MDCTab;
          }(component_1.MDCComponent);
          exports.MDCTab = MDCTab;

          /***/ }),

        /***/ "./packages/mdc-tab/constants.ts":
        /*!***************************************!*\
  !*** ./packages/mdc-tab/constants.ts ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ACTIVE: 'mdc-tab--active'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ARIA_SELECTED: 'aria-selected',
            CONTENT_SELECTOR: '.mdc-tab__content',
            INTERACTED_EVENT: 'MDCTab:interacted',
            RIPPLE_SELECTOR: '.mdc-tab__ripple',
            TABINDEX: 'tabIndex',
            TAB_INDICATOR_SELECTOR: '.mdc-tab-indicator'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-tab/foundation.ts":
        /*!****************************************!*\
  !*** ./packages/mdc-tab/foundation.ts ***!
  \****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tab/constants.ts");
          var MDCTabFoundation = /** @class */function (_super) {
            __extends(MDCTabFoundation, _super);
            function MDCTabFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;
              _this.focusOnActivate_ = true;
              return _this;
            }
            Object.defineProperty(MDCTabFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTabFoundation, "defaultAdapter", {
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  },
                  activateIndicator: function activateIndicator() {
                    return undefined;
                  },
                  deactivateIndicator: function deactivateIndicator() {
                    return undefined;
                  },
                  notifyInteracted: function notifyInteracted() {
                    return undefined;
                  },
                  getOffsetLeft: function getOffsetLeft() {
                    return 0;
                  },
                  getOffsetWidth: function getOffsetWidth() {
                    return 0;
                  },
                  getContentOffsetLeft: function getContentOffsetLeft() {
                    return 0;
                  },
                  getContentOffsetWidth: function getContentOffsetWidth() {
                    return 0;
                  },
                  focus: function focus() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTabFoundation.prototype.handleClick = function () {
              // It's up to the parent component to keep track of the active Tab and
              // ensure we don't activate a Tab that's already active.
              this.adapter.notifyInteracted();
            };
            MDCTabFoundation.prototype.isActive = function () {
              return this.adapter.hasClass(constants_1.cssClasses.ACTIVE);
            };
            /**
             * Sets whether the tab should focus itself when activated
             */
            MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {
              this.focusOnActivate_ = focusOnActivate;
            };
            /**
             * Activates the Tab
             */
            MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {
              this.adapter.addClass(constants_1.cssClasses.ACTIVE);
              this.adapter.setAttr(constants_1.strings.ARIA_SELECTED, 'true');
              this.adapter.setAttr(constants_1.strings.TABINDEX, '0');
              this.adapter.activateIndicator(previousIndicatorClientRect);
              if (this.focusOnActivate_) {
                this.adapter.focus();
              }
            };
            /**
             * Deactivates the Tab
             */
            MDCTabFoundation.prototype.deactivate = function () {
              // Early exit
              if (!this.isActive()) {
                return;
              }
              this.adapter.removeClass(constants_1.cssClasses.ACTIVE);
              this.adapter.setAttr(constants_1.strings.ARIA_SELECTED, 'false');
              this.adapter.setAttr(constants_1.strings.TABINDEX, '-1');
              this.adapter.deactivateIndicator();
            };
            /**
             * Returns the dimensions of the Tab
             */
            MDCTabFoundation.prototype.computeDimensions = function () {
              var rootWidth = this.adapter.getOffsetWidth();
              var rootLeft = this.adapter.getOffsetLeft();
              var contentWidth = this.adapter.getContentOffsetWidth();
              var contentLeft = this.adapter.getContentOffsetLeft();
              return {
                contentLeft: rootLeft + contentLeft,
                contentRight: rootLeft + contentLeft + contentWidth,
                rootLeft: rootLeft,
                rootRight: rootLeft + rootWidth
              };
            };
            return MDCTabFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTabFoundation = MDCTabFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTabFoundation;

          /***/ }),

        /***/ "./packages/mdc-tab/index.ts":
        /*!***********************************!*\
  !*** ./packages/mdc-tab/index.ts ***!
  \***********************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-tab/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-tab/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-tab/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-textfield/character-counter/component.ts":
        /*!***************************************************************!*\
  !*** ./packages/mdc-textfield/character-counter/component.ts ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/character-counter/foundation.ts");
          var MDCTextFieldCharacterCounter = /** @class */function (_super) {
            __extends(MDCTextFieldCharacterCounter, _super);
            function MDCTextFieldCharacterCounter() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTextFieldCharacterCounter.attachTo = function (root) {
              return new MDCTextFieldCharacterCounter(root);
            };
            Object.defineProperty(MDCTextFieldCharacterCounter.prototype, "foundationForTextField", {
              // Provided for access by MDCTextField component
              get: function get() {
                return this.foundation;
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldCharacterCounter.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              var adapter = {
                setContent: function setContent(content) {
                  _this.root.textContent = content;
                }
              };
              return new foundation_1.MDCTextFieldCharacterCounterFoundation(adapter);
            };
            return MDCTextFieldCharacterCounter;
          }(component_1.MDCComponent);
          exports.MDCTextFieldCharacterCounter = MDCTextFieldCharacterCounter;

          /***/ }),

        /***/ "./packages/mdc-textfield/character-counter/constants.ts":
        /*!***************************************************************!*\
  !*** ./packages/mdc-textfield/character-counter/constants.ts ***!
  \***************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            ROOT: 'mdc-text-field-character-counter'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ROOT_SELECTOR: "." + cssClasses.ROOT
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-textfield/character-counter/foundation.ts":
        /*!****************************************************************!*\
  !*** ./packages/mdc-textfield/character-counter/foundation.ts ***!
  \****************************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/character-counter/constants.ts");
          var MDCTextFieldCharacterCounterFoundation = /** @class */function (_super) {
            __extends(MDCTextFieldCharacterCounterFoundation, _super);
            function MDCTextFieldCharacterCounterFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "defaultAdapter", {
              /**
               * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                return {
                  setContent: function setContent() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldCharacterCounterFoundation.prototype.setCounterValue = function (currentLength, maxLength) {
              currentLength = Math.min(currentLength, maxLength);
              this.adapter.setContent(currentLength + " / " + maxLength);
            };
            return MDCTextFieldCharacterCounterFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTextFieldCharacterCounterFoundation = MDCTextFieldCharacterCounterFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTextFieldCharacterCounterFoundation;

          /***/ }),

        /***/ "./packages/mdc-textfield/character-counter/index.ts":
        /*!***********************************************************!*\
  !*** ./packages/mdc-textfield/character-counter/index.ts ***!
  \***********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-textfield/character-counter/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/character-counter/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/character-counter/constants.ts");
          exports.characterCountCssClasses = constants_1.cssClasses;
          exports.characterCountStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-textfield/component.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-textfield/component.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __importStar = this && this.__importStar || function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) {
              if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
            }result["default"] = mod;
            return result;
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
          var ponyfill = __importStar(__webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts"));
          var component_2 = __webpack_require__(/*! @material/floating-label/component */ "./packages/mdc-floating-label/component.ts");
          var component_3 = __webpack_require__(/*! @material/line-ripple/component */ "./packages/mdc-line-ripple/component.ts");
          var component_4 = __webpack_require__(/*! @material/notched-outline/component */ "./packages/mdc-notched-outline/component.ts");
          var component_5 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
          var component_6 = __webpack_require__(/*! ./character-counter/component */ "./packages/mdc-textfield/character-counter/component.ts");
          var foundation_2 = __webpack_require__(/*! ./character-counter/foundation */ "./packages/mdc-textfield/character-counter/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/constants.ts");
          var foundation_3 = __webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/foundation.ts");
          var component_7 = __webpack_require__(/*! ./helper-text/component */ "./packages/mdc-textfield/helper-text/component.ts");
          var foundation_4 = __webpack_require__(/*! ./helper-text/foundation */ "./packages/mdc-textfield/helper-text/foundation.ts");
          var component_8 = __webpack_require__(/*! ./icon/component */ "./packages/mdc-textfield/icon/component.ts");
          var MDCTextField = /** @class */function (_super) {
            __extends(MDCTextField, _super);
            function MDCTextField() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTextField.attachTo = function (root) {
              return new MDCTextField(root);
            };
            MDCTextField.prototype.initialize = function (rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el, foundation) {
                  return new component_5.MDCRipple(el, foundation);
                };
              }
              if (lineRippleFactory === void 0) {
                lineRippleFactory = function lineRippleFactory(el) {
                  return new component_3.MDCLineRipple(el);
                };
              }
              if (helperTextFactory === void 0) {
                helperTextFactory = function helperTextFactory(el) {
                  return new component_7.MDCTextFieldHelperText(el);
                };
              }
              if (characterCounterFactory === void 0) {
                characterCounterFactory = function characterCounterFactory(el) {
                  return new component_6.MDCTextFieldCharacterCounter(el);
                };
              }
              if (iconFactory === void 0) {
                iconFactory = function iconFactory(el) {
                  return new component_8.MDCTextFieldIcon(el);
                };
              }
              if (labelFactory === void 0) {
                labelFactory = function labelFactory(el) {
                  return new component_2.MDCFloatingLabel(el);
                };
              }
              if (outlineFactory === void 0) {
                outlineFactory = function outlineFactory(el) {
                  return new component_4.MDCNotchedOutline(el);
                };
              }
              this.input_ = this.root.querySelector(constants_1.strings.INPUT_SELECTOR);
              var labelElement = this.root.querySelector(constants_1.strings.LABEL_SELECTOR);
              this.label_ = labelElement ? labelFactory(labelElement) : null;
              var lineRippleElement = this.root.querySelector(constants_1.strings.LINE_RIPPLE_SELECTOR);
              this.lineRipple_ = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
              var outlineElement = this.root.querySelector(constants_1.strings.OUTLINE_SELECTOR);
              this.outline_ = outlineElement ? outlineFactory(outlineElement) : null;
              // Helper text
              var helperTextStrings = foundation_4.MDCTextFieldHelperTextFoundation.strings;
              var nextElementSibling = this.root.nextElementSibling;
              var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(constants_1.cssClasses.HELPER_LINE);
              var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
              this.helperText_ = helperTextEl ? helperTextFactory(helperTextEl) : null;
              // Character counter
              var characterCounterStrings = foundation_2.MDCTextFieldCharacterCounterFoundation.strings;
              var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
              // If character counter is not found in root element search in sibling element.
              if (!characterCounterEl && hasHelperLine && nextElementSibling) {
                characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
              }
              this.characterCounter_ = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
              // Leading icon
              var leadingIconEl = this.root.querySelector(constants_1.strings.LEADING_ICON_SELECTOR);
              this.leadingIcon_ = leadingIconEl ? iconFactory(leadingIconEl) : null;
              // Trailing icon
              var trailingIconEl = this.root.querySelector(constants_1.strings.TRAILING_ICON_SELECTOR);
              this.trailingIcon_ = trailingIconEl ? iconFactory(trailingIconEl) : null;
              // Prefix and Suffix
              this.prefix_ = this.root.querySelector(constants_1.strings.PREFIX_SELECTOR);
              this.suffix_ = this.root.querySelector(constants_1.strings.SUFFIX_SELECTOR);
              this.ripple = this.createRipple_(rippleFactory);
            };
            MDCTextField.prototype.destroy = function () {
              if (this.ripple) {
                this.ripple.destroy();
              }
              if (this.lineRipple_) {
                this.lineRipple_.destroy();
              }
              if (this.helperText_) {
                this.helperText_.destroy();
              }
              if (this.characterCounter_) {
                this.characterCounter_.destroy();
              }
              if (this.leadingIcon_) {
                this.leadingIcon_.destroy();
              }
              if (this.trailingIcon_) {
                this.trailingIcon_.destroy();
              }
              if (this.label_) {
                this.label_.destroy();
              }
              if (this.outline_) {
                this.outline_.destroy();
              }
              _super.prototype.destroy.call(this);
            };
            /**
             * Initializes the Text Field's internal state based on the environment's
             * state.
             */
            MDCTextField.prototype.initialSyncWithDOM = function () {
              this.disabled = this.input_.disabled;
            };
            Object.defineProperty(MDCTextField.prototype, "value", {
              get: function get() {
                return this.foundation.getValue();
              },
              /**
               * @param value The value to set on the input.
               */
              set: function set(value) {
                this.foundation.setValue(value);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "disabled", {
              get: function get() {
                return this.foundation.isDisabled();
              },
              /**
               * @param disabled Sets the Text Field disabled or enabled.
               */
              set: function set(disabled) {
                this.foundation.setDisabled(disabled);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "valid", {
              get: function get() {
                return this.foundation.isValid();
              },
              /**
               * @param valid Sets the Text Field valid or invalid.
               */
              set: function set(valid) {
                this.foundation.setValid(valid);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "required", {
              get: function get() {
                return this.input_.required;
              },
              /**
               * @param required Sets the Text Field to required.
               */
              set: function set(required) {
                this.input_.required = required;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "pattern", {
              get: function get() {
                return this.input_.pattern;
              },
              /**
               * @param pattern Sets the input element's validation pattern.
               */
              set: function set(pattern) {
                this.input_.pattern = pattern;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "minLength", {
              get: function get() {
                return this.input_.minLength;
              },
              /**
               * @param minLength Sets the input element's minLength.
               */
              set: function set(minLength) {
                this.input_.minLength = minLength;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "maxLength", {
              get: function get() {
                return this.input_.maxLength;
              },
              /**
               * @param maxLength Sets the input element's maxLength.
               */
              set: function set(maxLength) {
                // Chrome throws exception if maxLength is set to a value less than zero
                if (maxLength < 0) {
                  this.input_.removeAttribute('maxLength');
                } else {
                  this.input_.maxLength = maxLength;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "min", {
              get: function get() {
                return this.input_.min;
              },
              /**
               * @param min Sets the input element's min.
               */
              set: function set(min) {
                this.input_.min = min;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "max", {
              get: function get() {
                return this.input_.max;
              },
              /**
               * @param max Sets the input element's max.
               */
              set: function set(max) {
                this.input_.max = max;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "step", {
              get: function get() {
                return this.input_.step;
              },
              /**
               * @param step Sets the input element's step.
               */
              set: function set(step) {
                this.input_.step = step;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "helperTextContent", {
              /**
               * Sets the helper text element content.
               */
              set: function set(content) {
                this.foundation.setHelperTextContent(content);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "leadingIconAriaLabel", {
              /**
               * Sets the aria label of the leading icon.
               */
              set: function set(label) {
                this.foundation.setLeadingIconAriaLabel(label);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "leadingIconContent", {
              /**
               * Sets the text content of the leading icon.
               */
              set: function set(content) {
                this.foundation.setLeadingIconContent(content);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "trailingIconAriaLabel", {
              /**
               * Sets the aria label of the trailing icon.
               */
              set: function set(label) {
                this.foundation.setTrailingIconAriaLabel(label);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "trailingIconContent", {
              /**
               * Sets the text content of the trailing icon.
               */
              set: function set(content) {
                this.foundation.setTrailingIconContent(content);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "useNativeValidation", {
              /**
               * Enables or disables the use of native validation. Use this for custom validation.
               * @param useNativeValidation Set this to false to ignore native input validation.
               */
              set: function set(useNativeValidation) {
                this.foundation.setUseNativeValidation(useNativeValidation);
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "prefixText", {
              /**
               * Gets the text content of the prefix, or null if it does not exist.
               */
              get: function get() {
                return this.prefix_ ? this.prefix_.textContent : null;
              },
              /**
               * Sets the text content of the prefix, if it exists.
               */
              set: function set(prefixText) {
                if (this.prefix_) {
                  this.prefix_.textContent = prefixText;
                }
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextField.prototype, "suffixText", {
              /**
               * Gets the text content of the suffix, or null if it does not exist.
               */
              get: function get() {
                return this.suffix_ ? this.suffix_.textContent : null;
              },
              /**
               * Sets the text content of the suffix, if it exists.
               */
              set: function set(suffixText) {
                if (this.suffix_) {
                  this.suffix_.textContent = suffixText;
                }
              },
              enumerable: true,
              configurable: true
            });
            /**
             * Focuses the input element.
             */
            MDCTextField.prototype.focus = function () {
              this.input_.focus();
            };
            /**
             * Recomputes the outline SVG path for the outline element.
             */
            MDCTextField.prototype.layout = function () {
              var openNotch = this.foundation.shouldFloat;
              this.foundation.notchOutline(openNotch);
            };
            MDCTextField.prototype.getDefaultFoundation = function () {
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods_()), this.getInputAdapterMethods_()), this.getLabelAdapterMethods_()), this.getLineRippleAdapterMethods_()), this.getOutlineAdapterMethods_());
              // tslint:enable:object-literal-sort-keys
              return new foundation_3.MDCTextFieldFoundation(adapter, this.getFoundationMap_());
            };
            MDCTextField.prototype.getRootAdapterMethods_ = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {
                  _this.listen(evtType, handler);
                },
                deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {
                  _this.unlisten(evtType, handler);
                },
                registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler(handler) {
                  var getAttributesList = function getAttributesList(mutationsList) {
                    return mutationsList.map(function (mutation) {
                      return mutation.attributeName;
                    }).filter(function (attributeName) {
                      return attributeName;
                    });
                  };
                  var observer = new MutationObserver(function (mutationsList) {
                    return handler(getAttributesList(mutationsList));
                  });
                  var config = { attributes: true };
                  observer.observe(_this.input_, config);
                  return observer;
                },
                deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler(observer) {
                  observer.disconnect();
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            MDCTextField.prototype.getInputAdapterMethods_ = function () {
              var _this = this;
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              return {
                getNativeInput: function getNativeInput() {
                  return _this.input_;
                },
                setInputAttr: function setInputAttr(attr, value) {
                  _this.input_.setAttribute(attr, value);
                },
                removeInputAttr: function removeInputAttr(attr) {
                  _this.input_.removeAttribute(attr);
                },
                isFocused: function isFocused() {
                  return document.activeElement === _this.input_;
                },
                registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {
                  _this.input_.addEventListener(evtType, handler, events_1.applyPassive());
                },
                deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {
                  _this.input_.removeEventListener(evtType, handler, events_1.applyPassive());
                }
              };
              // tslint:enable:object-literal-sort-keys
            };
            MDCTextField.prototype.getLabelAdapterMethods_ = function () {
              var _this = this;
              return {
                floatLabel: function floatLabel(shouldFloat) {
                  return _this.label_ && _this.label_.float(shouldFloat);
                },
                getLabelWidth: function getLabelWidth() {
                  return _this.label_ ? _this.label_.getWidth() : 0;
                },
                hasLabel: function hasLabel() {
                  return Boolean(_this.label_);
                },
                shakeLabel: function shakeLabel(shouldShake) {
                  return _this.label_ && _this.label_.shake(shouldShake);
                },
                setLabelRequired: function setLabelRequired(isRequired) {
                  return _this.label_ && _this.label_.setRequired(isRequired);
                }
              };
            };
            MDCTextField.prototype.getLineRippleAdapterMethods_ = function () {
              var _this = this;
              return {
                activateLineRipple: function activateLineRipple() {
                  if (_this.lineRipple_) {
                    _this.lineRipple_.activate();
                  }
                },
                deactivateLineRipple: function deactivateLineRipple() {
                  if (_this.lineRipple_) {
                    _this.lineRipple_.deactivate();
                  }
                },
                setLineRippleTransformOrigin: function setLineRippleTransformOrigin(normalizedX) {
                  if (_this.lineRipple_) {
                    _this.lineRipple_.setRippleCenter(normalizedX);
                  }
                }
              };
            };
            MDCTextField.prototype.getOutlineAdapterMethods_ = function () {
              var _this = this;
              return {
                closeOutline: function closeOutline() {
                  return _this.outline_ && _this.outline_.closeNotch();
                },
                hasOutline: function hasOutline() {
                  return Boolean(_this.outline_);
                },
                notchOutline: function notchOutline(labelWidth) {
                  return _this.outline_ && _this.outline_.notch(labelWidth);
                }
              };
            };
            /**
             * @return A map of all subcomponents to subfoundations.
             */
            MDCTextField.prototype.getFoundationMap_ = function () {
              return {
                characterCounter: this.characterCounter_ ? this.characterCounter_.foundationForTextField : undefined,
                helperText: this.helperText_ ? this.helperText_.foundationForTextField : undefined,
                leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundationForTextField : undefined,
                trailingIcon: this.trailingIcon_ ? this.trailingIcon_.foundationForTextField : undefined
              };
            };
            MDCTextField.prototype.createRipple_ = function (rippleFactory) {
              var _this = this;
              var isTextArea = this.root.classList.contains(constants_1.cssClasses.TEXTAREA);
              var isOutlined = this.root.classList.contains(constants_1.cssClasses.OUTLINED);
              if (isTextArea || isOutlined) {
                return null;
              }
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = __assign(__assign({}, component_5.MDCRipple.createAdapter(this)), { isSurfaceActive: function isSurfaceActive() {
                  return ponyfill.matches(_this.input_, ':active');
                }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.input_.addEventListener(evtType, handler, events_1.applyPassive());
                }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.input_.removeEventListener(evtType, handler, events_1.applyPassive());
                } });
              // tslint:enable:object-literal-sort-keys
              return rippleFactory(this.root, new foundation_1.MDCRippleFoundation(adapter));
            };
            return MDCTextField;
          }(component_1.MDCComponent);
          exports.MDCTextField = MDCTextField;

          /***/ }),

        /***/ "./packages/mdc-textfield/constants.ts":
        /*!*********************************************!*\
  !*** ./packages/mdc-textfield/constants.ts ***!
  \*********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            ARIA_CONTROLS: 'aria-controls',
            ARIA_DESCRIBEDBY: 'aria-describedby',
            INPUT_SELECTOR: '.mdc-text-field__input',
            LABEL_SELECTOR: '.mdc-floating-label',
            LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
            LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
            OUTLINE_SELECTOR: '.mdc-notched-outline',
            PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
            SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
            TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
          };
          exports.strings = strings;
          var cssClasses = {
            DISABLED: 'mdc-text-field--disabled',
            FOCUSED: 'mdc-text-field--focused',
            HELPER_LINE: 'mdc-text-field-helper-line',
            INVALID: 'mdc-text-field--invalid',
            LABEL_FLOATING: 'mdc-text-field--label-floating',
            NO_LABEL: 'mdc-text-field--no-label',
            OUTLINED: 'mdc-text-field--outlined',
            ROOT: 'mdc-text-field',
            TEXTAREA: 'mdc-text-field--textarea',
            WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
            WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon'
          };
          exports.cssClasses = cssClasses;
          var numbers = {
            LABEL_SCALE: 0.75
          };
          exports.numbers = numbers;
          /**
           * Whitelist based off of https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
           * under the "Validation-related attributes" section.
           */
          var VALIDATION_ATTR_WHITELIST = ['pattern', 'min', 'max', 'required', 'step', 'minlength', 'maxlength'];
          exports.VALIDATION_ATTR_WHITELIST = VALIDATION_ATTR_WHITELIST;
          /**
           * Label should always float for these types as they show some UI even if value is empty.
           */
          var ALWAYS_FLOAT_TYPES = ['color', 'date', 'datetime-local', 'month', 'range', 'time', 'week'];
          exports.ALWAYS_FLOAT_TYPES = ALWAYS_FLOAT_TYPES;

          /***/ }),

        /***/ "./packages/mdc-textfield/foundation.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-textfield/foundation.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/constants.ts");
          var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
          var INTERACTION_EVENTS = ['click', 'keydown'];
          var MDCTextFieldFoundation = /** @class */function (_super) {
            __extends(MDCTextFieldFoundation, _super);
            /**
             * @param adapter
             * @param foundationMap Map from subcomponent names to their subfoundations.
             */
            function MDCTextFieldFoundation(adapter, foundationMap) {
              if (foundationMap === void 0) {
                foundationMap = {};
              }
              var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
              _this.isFocused_ = false;
              _this.receivedUserInput_ = false;
              _this.isValid_ = true;
              _this.useNativeValidation_ = true;
              _this.validateOnValueChange_ = true;
              _this.helperText_ = foundationMap.helperText;
              _this.characterCounter_ = foundationMap.characterCounter;
              _this.leadingIcon_ = foundationMap.leadingIcon;
              _this.trailingIcon_ = foundationMap.trailingIcon;
              _this.inputFocusHandler_ = function () {
                return _this.activateFocus();
              };
              _this.inputBlurHandler_ = function () {
                return _this.deactivateFocus();
              };
              _this.inputInputHandler_ = function () {
                return _this.handleInput();
              };
              _this.setPointerXOffset_ = function (evt) {
                return _this.setTransformOrigin(evt);
              };
              _this.textFieldInteractionHandler_ = function () {
                return _this.handleTextFieldInteraction();
              };
              _this.validationAttributeChangeHandler_ = function (attributesList) {
                return _this.handleValidationAttributeChange(attributesList);
              };
              return _this;
            }
            Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat_", {
              get: function get() {
                var type = this.getNativeInput_().type;
                return constants_1.ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
              get: function get() {
                return this.shouldAlwaysFloat_ || this.isFocused_ || !!this.getValue() || this.isBadInput_();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
              get: function get() {
                return !this.isFocused_ && !this.isValid() && !!this.getValue();
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
              /**
               * See {@link MDCTextFieldAdapter} for typing information on parameters and
               * return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return true;
                  },
                  setInputAttr: function setInputAttr() {
                    return undefined;
                  },
                  removeInputAttr: function removeInputAttr() {
                    return undefined;
                  },
                  registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler() {
                    return undefined;
                  },
                  deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler() {
                    return undefined;
                  },
                  registerInputInteractionHandler: function registerInputInteractionHandler() {
                    return undefined;
                  },
                  deregisterInputInteractionHandler: function deregisterInputInteractionHandler() {
                    return undefined;
                  },
                  registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler() {
                    return new MutationObserver(function () {
                      return undefined;
                    });
                  },
                  deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler() {
                    return undefined;
                  },
                  getNativeInput: function getNativeInput() {
                    return null;
                  },
                  isFocused: function isFocused() {
                    return false;
                  },
                  activateLineRipple: function activateLineRipple() {
                    return undefined;
                  },
                  deactivateLineRipple: function deactivateLineRipple() {
                    return undefined;
                  },
                  setLineRippleTransformOrigin: function setLineRippleTransformOrigin() {
                    return undefined;
                  },
                  shakeLabel: function shakeLabel() {
                    return undefined;
                  },
                  floatLabel: function floatLabel() {
                    return undefined;
                  },
                  setLabelRequired: function setLabelRequired() {
                    return undefined;
                  },
                  hasLabel: function hasLabel() {
                    return false;
                  },
                  getLabelWidth: function getLabelWidth() {
                    return 0;
                  },
                  hasOutline: function hasOutline() {
                    return false;
                  },
                  notchOutline: function notchOutline() {
                    return undefined;
                  },
                  closeOutline: function closeOutline() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldFoundation.prototype.init = function () {
              var _this = this;
              if (this.adapter.hasLabel() && this.getNativeInput_().required) {
                this.adapter.setLabelRequired(true);
              }
              if (this.adapter.isFocused()) {
                this.inputFocusHandler_();
              } else if (this.adapter.hasLabel() && this.shouldFloat) {
                this.notchOutline(true);
                this.adapter.floatLabel(true);
                this.styleFloating_(true);
              }
              this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler_);
              this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler_);
              this.adapter.registerInputInteractionHandler('input', this.inputInputHandler_);
              POINTERDOWN_EVENTS.forEach(function (evtType) {
                _this.adapter.registerInputInteractionHandler(evtType, _this.setPointerXOffset_);
              });
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.registerTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
              });
              this.validationObserver_ = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_);
              this.setCharacterCounter_(this.getValue().length);
            };
            MDCTextFieldFoundation.prototype.destroy = function () {
              var _this = this;
              this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);
              this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);
              this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler_);
              POINTERDOWN_EVENTS.forEach(function (evtType) {
                _this.adapter.deregisterInputInteractionHandler(evtType, _this.setPointerXOffset_);
              });
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.deregisterTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
              });
              this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver_);
            };
            /**
             * Handles user interactions with the Text Field.
             */
            MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
              var nativeInput = this.adapter.getNativeInput();
              if (nativeInput && nativeInput.disabled) {
                return;
              }
              this.receivedUserInput_ = true;
            };
            /**
             * Handles validation attribute changes
             */
            MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
              var _this = this;
              attributesList.some(function (attributeName) {
                if (constants_1.VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                  _this.styleValidity_(true);
                  _this.adapter.setLabelRequired(_this.getNativeInput_().required);
                  return true;
                }
                return false;
              });
              if (attributesList.indexOf('maxlength') > -1) {
                this.setCharacterCounter_(this.getValue().length);
              }
            };
            /**
             * Opens/closes the notched outline.
             */
            MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
              if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
                return;
              }
              if (openNotch) {
                var labelWidth = this.adapter.getLabelWidth() * constants_1.numbers.LABEL_SCALE;
                this.adapter.notchOutline(labelWidth);
              } else {
                this.adapter.closeOutline();
              }
            };
            /**
             * Activates the text field focus state.
             */
            MDCTextFieldFoundation.prototype.activateFocus = function () {
              this.isFocused_ = true;
              this.styleFocused_(this.isFocused_);
              this.adapter.activateLineRipple();
              if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating_(this.shouldFloat);
                this.adapter.shakeLabel(this.shouldShake);
              }
              if (this.helperText_ && (this.helperText_.isPersistent() || !this.helperText_.isValidation() || !this.isValid_)) {
                this.helperText_.showToScreenReader();
              }
            };
            /**
             * Sets the line ripple's transform origin, so that the line ripple activate
             * animation will animate out from the user's click location.
             */
            MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
              if (this.isDisabled() || this.adapter.hasOutline()) {
                return;
              }
              var touches = evt.touches;
              var targetEvent = touches ? touches[0] : evt;
              var targetClientRect = targetEvent.target.getBoundingClientRect();
              var normalizedX = targetEvent.clientX - targetClientRect.left;
              this.adapter.setLineRippleTransformOrigin(normalizedX);
            };
            /**
             * Handles input change of text input and text area.
             */
            MDCTextFieldFoundation.prototype.handleInput = function () {
              this.autoCompleteFocus();
              this.setCharacterCounter_(this.getValue().length);
            };
            /**
             * Activates the Text Field's focus state in cases when the input value
             * changes without user input (e.g. programmatically).
             */
            MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
              if (!this.receivedUserInput_) {
                this.activateFocus();
              }
            };
            /**
             * Deactivates the Text Field's focus state.
             */
            MDCTextFieldFoundation.prototype.deactivateFocus = function () {
              this.isFocused_ = false;
              this.adapter.deactivateLineRipple();
              var isValid = this.isValid();
              this.styleValidity_(isValid);
              this.styleFocused_(this.isFocused_);
              if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating_(this.shouldFloat);
                this.adapter.shakeLabel(this.shouldShake);
              }
              if (!this.shouldFloat) {
                this.receivedUserInput_ = false;
              }
            };
            MDCTextFieldFoundation.prototype.getValue = function () {
              return this.getNativeInput_().value;
            };
            /**
             * @param value The value to set on the input Element.
             */
            MDCTextFieldFoundation.prototype.setValue = function (value) {
              // Prevent Safari from moving the caret to the end of the input when the
              // value has not changed.
              if (this.getValue() !== value) {
                this.getNativeInput_().value = value;
              }
              this.setCharacterCounter_(value.length);
              if (this.validateOnValueChange_) {
                var isValid = this.isValid();
                this.styleValidity_(isValid);
              }
              if (this.adapter.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter.floatLabel(this.shouldFloat);
                this.styleFloating_(this.shouldFloat);
                if (this.validateOnValueChange_) {
                  this.adapter.shakeLabel(this.shouldShake);
                }
              }
            };
            /**
             * @return The custom validity state, if set; otherwise, the result of a
             *     native validity check.
             */
            MDCTextFieldFoundation.prototype.isValid = function () {
              return this.useNativeValidation_ ? this.isNativeInputValid_() : this.isValid_;
            };
            /**
             * @param isValid Sets the custom validity state of the Text Field.
             */
            MDCTextFieldFoundation.prototype.setValid = function (isValid) {
              this.isValid_ = isValid;
              this.styleValidity_(isValid);
              var shouldShake = !isValid && !this.isFocused_ && !!this.getValue();
              if (this.adapter.hasLabel()) {
                this.adapter.shakeLabel(shouldShake);
              }
            };
            /**
             * @param shouldValidate Whether or not validity should be updated on
             *     value change.
             */
            MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {
              this.validateOnValueChange_ = shouldValidate;
            };
            /**
             * @return Whether or not validity should be updated on value change. `true`
             *     by default.
             */
            MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {
              return this.validateOnValueChange_;
            };
            /**
             * Enables or disables the use of native validation. Use this for custom
             * validation.
             * @param useNativeValidation Set this to false to ignore native input
             *     validation.
             */
            MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
              this.useNativeValidation_ = useNativeValidation;
            };
            MDCTextFieldFoundation.prototype.isDisabled = function () {
              return this.getNativeInput_().disabled;
            };
            /**
             * @param disabled Sets the text-field disabled or enabled.
             */
            MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
              this.getNativeInput_().disabled = disabled;
              this.styleDisabled_(disabled);
            };
            /**
             * @param content Sets the content of the helper text.
             */
            MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
              if (this.helperText_) {
                this.helperText_.setContent(content);
              }
            };
            /**
             * Sets the aria label of the leading icon.
             */
            MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
              if (this.leadingIcon_) {
                this.leadingIcon_.setAriaLabel(label);
              }
            };
            /**
             * Sets the text content of the leading icon.
             */
            MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
              if (this.leadingIcon_) {
                this.leadingIcon_.setContent(content);
              }
            };
            /**
             * Sets the aria label of the trailing icon.
             */
            MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
              if (this.trailingIcon_) {
                this.trailingIcon_.setAriaLabel(label);
              }
            };
            /**
             * Sets the text content of the trailing icon.
             */
            MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
              if (this.trailingIcon_) {
                this.trailingIcon_.setContent(content);
              }
            };
            /**
             * Sets character counter values that shows characters used and the total
             * character limit.
             */
            MDCTextFieldFoundation.prototype.setCharacterCounter_ = function (currentLength) {
              if (!this.characterCounter_) {
                return;
              }
              var maxLength = this.getNativeInput_().maxLength;
              if (maxLength === -1) {
                throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
              }
              this.characterCounter_.setCounterValue(currentLength, maxLength);
            };
            /**
             * @return True if the Text Field input fails in converting the user-supplied
             *     value.
             */
            MDCTextFieldFoundation.prototype.isBadInput_ = function () {
              // The badInput property is not supported in IE 11 💩.
              return this.getNativeInput_().validity.badInput || false;
            };
            /**
             * @return The result of native validity checking (ValidityState.valid).
             */
            MDCTextFieldFoundation.prototype.isNativeInputValid_ = function () {
              return this.getNativeInput_().validity.valid;
            };
            /**
             * Styles the component based on the validity state.
             */
            MDCTextFieldFoundation.prototype.styleValidity_ = function (isValid) {
              var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
              if (isValid) {
                this.adapter.removeClass(INVALID);
              } else {
                this.adapter.addClass(INVALID);
              }
              if (this.helperText_) {
                this.helperText_.setValidity(isValid);
                // We dynamically set or unset aria-describedby for validation helper text
                // only, based on whether the field is valid
                var helperTextValidation = this.helperText_.isValidation();
                if (!helperTextValidation) {
                  return;
                }
                var helperTextVisible = this.helperText_.isVisible();
                var helperTextId = this.helperText_.getId();
                if (helperTextVisible && helperTextId) {
                  this.adapter.setInputAttr(constants_1.strings.ARIA_DESCRIBEDBY, helperTextId);
                } else {
                  this.adapter.removeInputAttr(constants_1.strings.ARIA_DESCRIBEDBY);
                }
              }
            };
            /**
             * Styles the component based on the focused state.
             */
            MDCTextFieldFoundation.prototype.styleFocused_ = function (isFocused) {
              var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
              if (isFocused) {
                this.adapter.addClass(FOCUSED);
              } else {
                this.adapter.removeClass(FOCUSED);
              }
            };
            /**
             * Styles the component based on the disabled state.
             */
            MDCTextFieldFoundation.prototype.styleDisabled_ = function (isDisabled) {
              var _a = MDCTextFieldFoundation.cssClasses,
                  DISABLED = _a.DISABLED,
                  INVALID = _a.INVALID;
              if (isDisabled) {
                this.adapter.addClass(DISABLED);
                this.adapter.removeClass(INVALID);
              } else {
                this.adapter.removeClass(DISABLED);
              }
              if (this.leadingIcon_) {
                this.leadingIcon_.setDisabled(isDisabled);
              }
              if (this.trailingIcon_) {
                this.trailingIcon_.setDisabled(isDisabled);
              }
            };
            /**
             * Styles the component based on the label floating state.
             */
            MDCTextFieldFoundation.prototype.styleFloating_ = function (isFloating) {
              var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
              if (isFloating) {
                this.adapter.addClass(LABEL_FLOATING);
              } else {
                this.adapter.removeClass(LABEL_FLOATING);
              }
            };
            /**
             * @return The native text input element from the host environment, or an
             *     object with the same shape for unit tests.
             */
            MDCTextFieldFoundation.prototype.getNativeInput_ = function () {
              // this.adapter may be undefined in foundation unit tests. This happens when
              // testdouble is creating a mock object and invokes the
              // shouldShake/shouldFloat getters (which in turn call getValue(), which
              // calls this method) before init() has been called from the MDCTextField
              // constructor. To work around that issue, we return a dummy object.
              var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
              return nativeInput || {
                disabled: false,
                maxLength: -1,
                required: false,
                type: 'input',
                validity: {
                  badInput: false,
                  valid: true
                },
                value: ''
              };
            };
            return MDCTextFieldFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTextFieldFoundation = MDCTextFieldFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTextFieldFoundation;

          /***/ }),

        /***/ "./packages/mdc-textfield/helper-text/component.ts":
        /*!*********************************************************!*\
  !*** ./packages/mdc-textfield/helper-text/component.ts ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/helper-text/foundation.ts");
          var MDCTextFieldHelperText = /** @class */function (_super) {
            __extends(MDCTextFieldHelperText, _super);
            function MDCTextFieldHelperText() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTextFieldHelperText.attachTo = function (root) {
              return new MDCTextFieldHelperText(root);
            };
            Object.defineProperty(MDCTextFieldHelperText.prototype, "foundationForTextField", {
              // Provided for access by MDCTextField component
              get: function get() {
                return this.foundation;
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldHelperText.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                getAttr: function getAttr(attr) {
                  return _this.root.getAttribute(attr);
                },
                setAttr: function setAttr(attr, value) {
                  return _this.root.setAttribute(attr, value);
                },
                removeAttr: function removeAttr(attr) {
                  return _this.root.removeAttribute(attr);
                },
                setContent: function setContent(content) {
                  _this.root.textContent = content;
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCTextFieldHelperTextFoundation(adapter);
            };
            return MDCTextFieldHelperText;
          }(component_1.MDCComponent);
          exports.MDCTextFieldHelperText = MDCTextFieldHelperText;

          /***/ }),

        /***/ "./packages/mdc-textfield/helper-text/constants.ts":
        /*!*********************************************************!*\
  !*** ./packages/mdc-textfield/helper-text/constants.ts ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',
            HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',
            ROOT: 'mdc-text-field-helper-text'
          };
          exports.cssClasses = cssClasses;
          var strings = {
            ARIA_HIDDEN: 'aria-hidden',
            ROLE: 'role',
            ROOT_SELECTOR: "." + cssClasses.ROOT
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-textfield/helper-text/foundation.ts":
        /*!**********************************************************!*\
  !*** ./packages/mdc-textfield/helper-text/foundation.ts ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/helper-text/constants.ts");
          var MDCTextFieldHelperTextFoundation = /** @class */function (_super) {
            __extends(MDCTextFieldHelperTextFoundation, _super);
            function MDCTextFieldHelperTextFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCTextFieldHelperTextFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldHelperTextFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldHelperTextFoundation, "defaultAdapter", {
              /**
               * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  getAttr: function getAttr() {
                    return null;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  },
                  removeAttr: function removeAttr() {
                    return undefined;
                  },
                  setContent: function setContent() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldHelperTextFoundation.prototype.getId = function () {
              return this.adapter.getAttr('id');
            };
            MDCTextFieldHelperTextFoundation.prototype.isVisible = function () {
              return this.adapter.getAttr(constants_1.strings.ARIA_HIDDEN) !== 'true';
            };
            /**
             * Sets the content of the helper text field.
             */
            MDCTextFieldHelperTextFoundation.prototype.setContent = function (content) {
              this.adapter.setContent(content);
            };
            MDCTextFieldHelperTextFoundation.prototype.isPersistent = function () {
              return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
            };
            /**
             * @param isPersistent Sets the persistency of the helper text.
             */
            MDCTextFieldHelperTextFoundation.prototype.setPersistent = function (isPersistent) {
              if (isPersistent) {
                this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
              }
            };
            /**
             * @return whether the helper text acts as an error validation message.
             */
            MDCTextFieldHelperTextFoundation.prototype.isValidation = function () {
              return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
            };
            /**
             * @param isValidation True to make the helper text act as an error validation message.
             */
            MDCTextFieldHelperTextFoundation.prototype.setValidation = function (isValidation) {
              if (isValidation) {
                this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              } else {
                this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              }
            };
            /**
             * Makes the helper text visible to the screen reader.
             */
            MDCTextFieldHelperTextFoundation.prototype.showToScreenReader = function () {
              this.adapter.removeAttr(constants_1.strings.ARIA_HIDDEN);
            };
            /**
             * Sets the validity of the helper text based on the input validity.
             */
            MDCTextFieldHelperTextFoundation.prototype.setValidity = function (inputIsValid) {
              var helperTextIsPersistent = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
              var helperTextIsValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
              var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
              if (validationMsgNeedsDisplay) {
                this.showToScreenReader();
                this.adapter.setAttr(constants_1.strings.ROLE, 'alert');
              } else {
                this.adapter.removeAttr(constants_1.strings.ROLE);
              }
              if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
                this.hide_();
              }
            };
            /**
             * Hides the help text from screen readers.
             */
            MDCTextFieldHelperTextFoundation.prototype.hide_ = function () {
              this.adapter.setAttr(constants_1.strings.ARIA_HIDDEN, 'true');
            };
            return MDCTextFieldHelperTextFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTextFieldHelperTextFoundation = MDCTextFieldHelperTextFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTextFieldHelperTextFoundation;

          /***/ }),

        /***/ "./packages/mdc-textfield/helper-text/index.ts":
        /*!*****************************************************!*\
  !*** ./packages/mdc-textfield/helper-text/index.ts ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-textfield/helper-text/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/helper-text/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/helper-text/constants.ts");
          exports.helperTextCssClasses = constants_1.cssClasses;
          exports.helperTextStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-textfield/icon/component.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-textfield/icon/component.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/icon/foundation.ts");
          var MDCTextFieldIcon = /** @class */function (_super) {
            __extends(MDCTextFieldIcon, _super);
            function MDCTextFieldIcon() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTextFieldIcon.attachTo = function (root) {
              return new MDCTextFieldIcon(root);
            };
            Object.defineProperty(MDCTextFieldIcon.prototype, "foundationForTextField", {
              // Provided for access by MDCTextField component
              get: function get() {
                return this.foundation;
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldIcon.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                getAttr: function getAttr(attr) {
                  return _this.root.getAttribute(attr);
                },
                setAttr: function setAttr(attr, value) {
                  return _this.root.setAttribute(attr, value);
                },
                removeAttr: function removeAttr(attr) {
                  return _this.root.removeAttribute(attr);
                },
                setContent: function setContent(content) {
                  _this.root.textContent = content;
                },
                registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                  return _this.listen(evtType, handler);
                },
                deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                  return _this.unlisten(evtType, handler);
                },
                notifyIconAction: function notifyIconAction() {
                  return _this.emit(foundation_1.MDCTextFieldIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */);
                }
              };
              // tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCTextFieldIconFoundation(adapter);
            };
            return MDCTextFieldIcon;
          }(component_1.MDCComponent);
          exports.MDCTextFieldIcon = MDCTextFieldIcon;

          /***/ }),

        /***/ "./packages/mdc-textfield/icon/constants.ts":
        /*!**************************************************!*\
  !*** ./packages/mdc-textfield/icon/constants.ts ***!
  \**************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2016 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var strings = {
            ICON_EVENT: 'MDCTextField:icon',
            ICON_ROLE: 'button'
          };
          exports.strings = strings;
          var cssClasses = {
            ROOT: 'mdc-text-field__icon'
          };
          exports.cssClasses = cssClasses;

          /***/ }),

        /***/ "./packages/mdc-textfield/icon/foundation.ts":
        /*!***************************************************!*\
  !*** ./packages/mdc-textfield/icon/foundation.ts ***!
  \***************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/icon/constants.ts");
          var INTERACTION_EVENTS = ['click', 'keydown'];
          var MDCTextFieldIconFoundation = /** @class */function (_super) {
            __extends(MDCTextFieldIconFoundation, _super);
            function MDCTextFieldIconFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;
              _this.savedTabIndex_ = null;
              _this.interactionHandler_ = function (evt) {
                return _this.handleInteraction(evt);
              };
              return _this;
            }
            Object.defineProperty(MDCTextFieldIconFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldIconFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTextFieldIconFoundation, "defaultAdapter", {
              /**
               * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  getAttr: function getAttr() {
                    return null;
                  },
                  setAttr: function setAttr() {
                    return undefined;
                  },
                  removeAttr: function removeAttr() {
                    return undefined;
                  },
                  setContent: function setContent() {
                    return undefined;
                  },
                  registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                  },
                  deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                  },
                  notifyIconAction: function notifyIconAction() {
                    return undefined;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            MDCTextFieldIconFoundation.prototype.init = function () {
              var _this = this;
              this.savedTabIndex_ = this.adapter.getAttr('tabindex');
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.registerInteractionHandler(evtType, _this.interactionHandler_);
              });
            };
            MDCTextFieldIconFoundation.prototype.destroy = function () {
              var _this = this;
              INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter.deregisterInteractionHandler(evtType, _this.interactionHandler_);
              });
            };
            MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {
              if (!this.savedTabIndex_) {
                return;
              }
              if (disabled) {
                this.adapter.setAttr('tabindex', '-1');
                this.adapter.removeAttr('role');
              } else {
                this.adapter.setAttr('tabindex', this.savedTabIndex_);
                this.adapter.setAttr('role', constants_1.strings.ICON_ROLE);
              }
            };
            MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {
              this.adapter.setAttr('aria-label', label);
            };
            MDCTextFieldIconFoundation.prototype.setContent = function (content) {
              this.adapter.setContent(content);
            };
            MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {
              var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
              if (evt.type === 'click' || isEnterKey) {
                evt.preventDefault(); // stop click from causing host label to focus
                // input
                this.adapter.notifyIconAction();
              }
            };
            return MDCTextFieldIconFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTextFieldIconFoundation = MDCTextFieldIconFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTextFieldIconFoundation;

          /***/ }),

        /***/ "./packages/mdc-textfield/icon/index.ts":
        /*!**********************************************!*\
  !*** ./packages/mdc-textfield/icon/index.ts ***!
  \**********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-textfield/icon/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/icon/foundation.ts"));
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-textfield/icon/constants.ts");
          exports.iconCssClasses = constants_1.cssClasses;
          exports.iconStrings = constants_1.strings;

          /***/ }),

        /***/ "./packages/mdc-textfield/index.ts":
        /*!*****************************************!*\
  !*** ./packages/mdc-textfield/index.ts ***!
  \*****************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-textfield/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-textfield/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-textfield/foundation.ts"));
          __export(__webpack_require__(/*! ./character-counter/index */ "./packages/mdc-textfield/character-counter/index.ts"));
          __export(__webpack_require__(/*! ./helper-text/index */ "./packages/mdc-textfield/helper-text/index.ts"));
          __export(__webpack_require__(/*! ./icon/index */ "./packages/mdc-textfield/icon/index.ts"));

          /***/ }),

        /***/ "./packages/mdc-tooltip/component.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-tooltip/component.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tooltip/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-tooltip/foundation.ts");
          var MDCTooltip = /** @class */function (_super) {
            __extends(MDCTooltip, _super);
            function MDCTooltip() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTooltip.attachTo = function (root) {
              return new MDCTooltip(root);
            };
            MDCTooltip.prototype.initialize = function () {
              var tooltipId = this.root.getAttribute('id');
              if (!tooltipId) {
                throw new Error('MDCTooltip: Tooltip component must have an id.');
              }
              var anchorElem = document.querySelector("[aria-describedby=\"" + tooltipId + "\"]") || document.querySelector("[data-tooltip-id=\"" + tooltipId + "\"]");
              if (!anchorElem) {
                throw new Error('MDCTooltip: Tooltip component requires an anchor element annotated with [aria-describedby] or [data-tooltip-id] anchor element.');
              }
              this.anchorElem = anchorElem;
            };
            MDCTooltip.prototype.initialSyncWithDOM = function () {
              var _this = this;
              this.isTooltipRich = this.foundation.getIsRich();
              this.isTooltipPersistent = this.foundation.getIsPersistent();
              this.handleMouseEnter = function () {
                _this.foundation.handleAnchorMouseEnter();
              };
              this.handleFocus = function (evt) {
                _this.foundation.handleAnchorFocus(evt);
              };
              this.handleMouseLeave = function () {
                _this.foundation.handleAnchorMouseLeave();
              };
              this.handleBlur = function (evt) {
                _this.foundation.handleAnchorBlur(evt);
              };
              this.handleTransitionEnd = function () {
                _this.foundation.handleTransitionEnd();
              };
              this.handleClick = function () {
                _this.foundation.handleAnchorClick();
              };
              this.anchorElem.addEventListener('blur', this.handleBlur);
              if (this.isTooltipRich && this.isTooltipPersistent) {
                this.anchorElem.addEventListener('click', this.handleClick);
              } else {
                this.anchorElem.addEventListener('mouseenter', this.handleMouseEnter);
                // TODO(b/157075286): Listening for a 'focus' event is too broad.
                this.anchorElem.addEventListener('focus', this.handleFocus);
                this.anchorElem.addEventListener('mouseleave', this.handleMouseLeave);
              }
              this.listen('transitionend', this.handleTransitionEnd);
            };
            MDCTooltip.prototype.destroy = function () {
              if (this.anchorElem) {
                this.anchorElem.removeEventListener('blur', this.handleBlur);
                if (this.isTooltipRich && this.isTooltipPersistent) {
                  this.anchorElem.removeEventListener('click', this.handleClick);
                } else {
                  this.anchorElem.removeEventListener('mouseenter', this.handleMouseEnter);
                  this.anchorElem.removeEventListener('focus', this.handleFocus);
                  this.anchorElem.removeEventListener('mouseleave', this.handleMouseLeave);
                }
              }
              this.unlisten('transitionend', this.handleTransitionEnd);
              _super.prototype.destroy.call(this);
            };
            MDCTooltip.prototype.setTooltipPosition = function (position) {
              this.foundation.setTooltipPosition(position);
            };
            MDCTooltip.prototype.setAnchorBoundaryType = function (type) {
              this.foundation.setAnchorBoundaryType(type);
            };
            MDCTooltip.prototype.getDefaultFoundation = function () {
              var _this = this;
              var adapter = {
                getAttribute: function getAttribute(attr) {
                  return _this.root.getAttribute(attr);
                },
                setAttribute: function setAttribute(attr, value) {
                  _this.root.setAttribute(attr, value);
                },
                addClass: function addClass(className) {
                  _this.root.classList.add(className);
                },
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                removeClass: function removeClass(className) {
                  _this.root.classList.remove(className);
                },
                setStyleProperty: function setStyleProperty(propertyName, value) {
                  _this.root.style.setProperty(propertyName, value);
                },
                getViewportWidth: function getViewportWidth() {
                  return window.innerWidth;
                },
                getViewportHeight: function getViewportHeight() {
                  return window.innerHeight;
                },
                getTooltipSize: function getTooltipSize() {
                  return {
                    width: _this.root.offsetWidth,
                    height: _this.root.offsetHeight
                  };
                },
                getAnchorBoundingRect: function getAnchorBoundingRect() {
                  return _this.anchorElem ? _this.anchorElem.getBoundingClientRect() : null;
                },
                getAnchorAttribute: function getAnchorAttribute(attr) {
                  return _this.anchorElem ? _this.anchorElem.getAttribute(attr) : null;
                },
                setAnchorAttribute: function setAnchorAttribute(attr, value) {
                  var _a;
                  (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.setAttribute(attr, value);
                },
                isRTL: function isRTL() {
                  return getComputedStyle(_this.root).direction === 'rtl';
                },
                anchorContainsElement: function anchorContainsElement(element) {
                  var _a;
                  return !!((_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.contains(element));
                },
                tooltipContainsElement: function tooltipContainsElement(element) {
                  return _this.root.contains(element);
                },
                focusAnchorElement: function focusAnchorElement() {
                  var _a;
                  (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.focus();
                },
                registerEventHandler: function registerEventHandler(evt, handler) {
                  if (_this.root instanceof HTMLElement) {
                    _this.root.addEventListener(evt, handler);
                  }
                },
                deregisterEventHandler: function deregisterEventHandler(evt, handler) {
                  if (_this.root instanceof HTMLElement) {
                    _this.root.removeEventListener(evt, handler);
                  }
                },
                registerDocumentEventHandler: function registerDocumentEventHandler(evt, handler) {
                  document.body.addEventListener(evt, handler);
                },
                deregisterDocumentEventHandler: function deregisterDocumentEventHandler(evt, handler) {
                  document.body.removeEventListener(evt, handler);
                },
                registerWindowEventHandler: function registerWindowEventHandler(evt, handler) {
                  window.addEventListener(evt, handler);
                },
                deregisterWindowEventHandler: function deregisterWindowEventHandler(evt, handler) {
                  window.removeEventListener(evt, handler);
                },
                notifyHidden: function notifyHidden() {
                  _this.emit(constants_1.events.HIDDEN, {});
                }
              };
              //tslint:enable:object-literal-sort-keys
              return new foundation_1.MDCTooltipFoundation(adapter);
            };
            return MDCTooltip;
          }(component_1.MDCComponent);
          exports.MDCTooltip = MDCTooltip;

          /***/ }),

        /***/ "./packages/mdc-tooltip/constants.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-tooltip/constants.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var CssClasses;
          (function (CssClasses) {
            CssClasses["RICH"] = "mdc-tooltip--rich";
            CssClasses["SHOWN"] = "mdc-tooltip--shown";
            CssClasses["SHOWING"] = "mdc-tooltip--showing";
            CssClasses["SHOWING_TRANSITION"] = "mdc-tooltip--showing-transition";
            CssClasses["HIDE"] = "mdc-tooltip--hide";
            CssClasses["HIDE_TRANSITION"] = "mdc-tooltip--hide-transition";
            CssClasses["MULTILINE_TOOLTIP"] = "mdc-tooltip--multiline";
          })(CssClasses || (CssClasses = {}));
          exports.CssClasses = CssClasses;
          var numbers = {
            BOUNDED_ANCHOR_GAP: 4,
            UNBOUNDED_ANCHOR_GAP: 8,
            MIN_VIEWPORT_TOOLTIP_THRESHOLD: 8,
            HIDE_DELAY_MS: 600,
            SHOW_DELAY_MS: 500,
            // LINT.IfChange(tooltip-dimensions)
            MIN_HEIGHT: 24,
            MAX_WIDTH: 200
          };
          exports.numbers = numbers;
          var attributes = {
            ARIA_EXPANDED: 'aria-expanded',
            ARIA_HASPOPUP: 'aria-haspopup',
            PERSISTENT: 'data-mdc-tooltip-persistent'
          };
          exports.attributes = attributes;
          var events = {
            HIDDEN: 'MDCTooltip:hidden'
          };
          exports.events = events;
          /** Enum for possible tooltip positioning relative to its anchor element. */
          var XPosition;
          (function (XPosition) {
            XPosition[XPosition["DETECTED"] = 0] = "DETECTED";
            XPosition[XPosition["START"] = 1] = "START";
            // Note: CENTER is not valid for rich tooltips.
            XPosition[XPosition["CENTER"] = 2] = "CENTER";
            XPosition[XPosition["END"] = 3] = "END";
          })(XPosition || (XPosition = {}));
          exports.XPosition = XPosition;
          var YPosition;
          (function (YPosition) {
            YPosition[YPosition["DETECTED"] = 0] = "DETECTED";
            YPosition[YPosition["ABOVE"] = 1] = "ABOVE";
            YPosition[YPosition["BELOW"] = 2] = "BELOW";
          })(YPosition || (YPosition = {}));
          exports.YPosition = YPosition;
          /**
           * Enum for possible anchor boundary types. This determines the gap between the
           * bottom of the anchor and the tooltip element.
           * Bounded anchors have an identifiable boundary (e.g. buttons).
           * Unbounded anchors don't have a visually declared boundary (e.g. plain text).
           */
          var AnchorBoundaryType;
          (function (AnchorBoundaryType) {
            AnchorBoundaryType[AnchorBoundaryType["BOUNDED"] = 0] = "BOUNDED";
            AnchorBoundaryType[AnchorBoundaryType["UNBOUNDED"] = 1] = "UNBOUNDED";
          })(AnchorBoundaryType || (AnchorBoundaryType = {}));
          exports.AnchorBoundaryType = AnchorBoundaryType;

          /***/ }),

        /***/ "./packages/mdc-tooltip/foundation.ts":
        /*!********************************************!*\
  !*** ./packages/mdc-tooltip/foundation.ts ***!
  \********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          var __values = this && this.__values || function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var animationframe_1 = __webpack_require__(/*! @material/animation/animationframe */ "./packages/mdc-animation/animationframe.ts");
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var keyboard_1 = __webpack_require__(/*! @material/dom/keyboard */ "./packages/mdc-dom/keyboard.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-tooltip/constants.ts");
          var RICH = constants_1.CssClasses.RICH,
              SHOWN = constants_1.CssClasses.SHOWN,
              SHOWING = constants_1.CssClasses.SHOWING,
              SHOWING_TRANSITION = constants_1.CssClasses.SHOWING_TRANSITION,
              HIDE = constants_1.CssClasses.HIDE,
              HIDE_TRANSITION = constants_1.CssClasses.HIDE_TRANSITION,
              MULTILINE_TOOLTIP = constants_1.CssClasses.MULTILINE_TOOLTIP;
          var AnimationKeys;
          (function (AnimationKeys) {
            AnimationKeys["POLL_ANCHOR"] = "poll_anchor";
          })(AnimationKeys || (AnimationKeys = {}));
          var MDCTooltipFoundation = /** @class */function (_super) {
            __extends(MDCTooltipFoundation, _super);
            function MDCTooltipFoundation(adapter) {
              var _this = _super.call(this, __assign(__assign({}, MDCTooltipFoundation.defaultAdapter), adapter)) || this;
              _this.isShown = false;
              _this.anchorGap = constants_1.numbers.BOUNDED_ANCHOR_GAP;
              _this.xTooltipPos = constants_1.XPosition.DETECTED;
              _this.yTooltipPos = constants_1.YPosition.DETECTED;
              // Minimum threshold distance needed between the tooltip and the viewport.
              _this.minViewportTooltipThreshold = constants_1.numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD;
              _this.hideDelayMs = constants_1.numbers.HIDE_DELAY_MS;
              _this.showDelayMs = constants_1.numbers.SHOW_DELAY_MS;
              _this.anchorRect = null;
              _this.frameId = null;
              _this.hideTimeout = null;
              _this.showTimeout = null;
              _this.animFrame = new animationframe_1.AnimationFrame();
              _this.documentClickHandler = function (evt) {
                _this.handleDocumentClick(evt);
              };
              _this.documentKeydownHandler = function (evt) {
                _this.handleKeydown(evt);
              };
              _this.richTooltipMouseEnterHandler = function () {
                _this.handleRichTooltipMouseEnter();
              };
              _this.richTooltipMouseLeaveHandler = function () {
                _this.handleRichTooltipMouseLeave();
              };
              _this.richTooltipFocusOutHandler = function (evt) {
                _this.handleRichTooltipFocusOut(evt);
              };
              _this.windowScrollHandler = function () {
                _this.handleWindowChangeEvent();
              };
              _this.windowResizeHandler = function () {
                _this.handleWindowChangeEvent();
              };
              return _this;
            }
            Object.defineProperty(MDCTooltipFoundation, "defaultAdapter", {
              get: function get() {
                return {
                  getAttribute: function getAttribute() {
                    return null;
                  },
                  setAttribute: function setAttribute() {
                    return undefined;
                  },
                  addClass: function addClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  setStyleProperty: function setStyleProperty() {
                    return undefined;
                  },
                  getViewportWidth: function getViewportWidth() {
                    return 0;
                  },
                  getViewportHeight: function getViewportHeight() {
                    return 0;
                  },
                  getTooltipSize: function getTooltipSize() {
                    return { width: 0, height: 0 };
                  },
                  getAnchorBoundingRect: function getAnchorBoundingRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                  },
                  getAnchorAttribute: function getAnchorAttribute() {
                    return null;
                  },
                  setAnchorAttribute: function setAnchorAttribute() {
                    return null;
                  },
                  isRTL: function isRTL() {
                    return false;
                  },
                  anchorContainsElement: function anchorContainsElement() {
                    return false;
                  },
                  tooltipContainsElement: function tooltipContainsElement() {
                    return false;
                  },
                  focusAnchorElement: function focusAnchorElement() {
                    return undefined;
                  },
                  registerEventHandler: function registerEventHandler() {
                    return undefined;
                  },
                  deregisterEventHandler: function deregisterEventHandler() {
                    return undefined;
                  },
                  registerDocumentEventHandler: function registerDocumentEventHandler() {
                    return undefined;
                  },
                  deregisterDocumentEventHandler: function deregisterDocumentEventHandler() {
                    return undefined;
                  },
                  registerWindowEventHandler: function registerWindowEventHandler() {
                    return undefined;
                  },
                  deregisterWindowEventHandler: function deregisterWindowEventHandler() {
                    return undefined;
                  },
                  notifyHidden: function notifyHidden() {
                    return undefined;
                  }
                };
              },
              enumerable: true,
              configurable: true
            });
            MDCTooltipFoundation.prototype.init = function () {
              this.isRich = this.adapter.hasClass(RICH);
              this.isPersistent = this.adapter.getAttribute(constants_1.attributes.PERSISTENT) === 'true';
              this.isInteractive = !!this.adapter.getAnchorAttribute(constants_1.attributes.ARIA_EXPANDED) && this.adapter.getAnchorAttribute(constants_1.attributes.ARIA_HASPOPUP) === 'true';
            };
            MDCTooltipFoundation.prototype.getIsRich = function () {
              return this.isRich;
            };
            MDCTooltipFoundation.prototype.getIsPersistent = function () {
              return this.isPersistent;
            };
            MDCTooltipFoundation.prototype.handleAnchorMouseEnter = function () {
              var _this = this;
              if (this.isShown) {
                // Covers the instance where a user hovers over the anchor to reveal the
                // tooltip, and then quickly navigates away and then back to the anchor.
                // The tooltip should stay visible without animating out and then back in
                // again.
                this.show();
              } else {
                this.showTimeout = setTimeout(function () {
                  _this.show();
                }, this.showDelayMs);
              }
            };
            MDCTooltipFoundation.prototype.handleAnchorFocus = function (evt) {
              var _this = this;
              // TODO(b/157075286): Need to add some way to distinguish keyboard
              // navigation focus events from other focus events, and only show the
              // tooltip on the former of these events.
              var relatedTarget = evt.relatedTarget;
              var tooltipContainsRelatedTarget = relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(relatedTarget);
              // Do not show tooltip if the previous focus was on a tooltip element. This
              // occurs when a rich tooltip is closed and focus is restored to the anchor
              // or when user tab-navigates back into the anchor from the rich tooltip.
              if (tooltipContainsRelatedTarget) {
                return;
              }
              this.showTimeout = setTimeout(function () {
                _this.show();
              }, this.showDelayMs);
            };
            MDCTooltipFoundation.prototype.handleAnchorMouseLeave = function () {
              var _this = this;
              this.clearShowTimeout();
              this.hideTimeout = setTimeout(function () {
                _this.hide();
              }, this.hideDelayMs);
            };
            MDCTooltipFoundation.prototype.handleAnchorBlur = function (evt) {
              if (this.isRich) {
                var tooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(evt.relatedTarget);
                // If focus changed to the tooltip element, don't hide the tooltip.
                if (tooltipContainsRelatedTargetElement) {
                  return;
                }
              }
              // Hide tooltip immediately on focus change.
              this.hide();
            };
            MDCTooltipFoundation.prototype.handleAnchorClick = function () {
              if (this.isShown) {
                this.hide();
              } else {
                this.show();
              }
            };
            MDCTooltipFoundation.prototype.handleDocumentClick = function (evt) {
              var anchorOrTooltipContainsTargetElement = evt.target instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.target) || this.adapter.tooltipContainsElement(evt.target));
              // For persistent rich tooltips, we will not hide if:
              // - The click target is within the anchor element. Otherwise, both
              //   the anchor element's click handler and this handler will handle the
              //   click (due to event propagation), resulting in a shown tooltip
              //   being immediately hidden if the tooltip was initially hidden.
              // - The click target is within the tooltip element, since clicks
              //   on the tooltip do not close the tooltip.
              if (this.isRich && this.isPersistent && anchorOrTooltipContainsTargetElement) {
                return;
              }
              // Hide the tooltip immediately on click.
              this.hide();
            };
            MDCTooltipFoundation.prototype.handleKeydown = function (evt) {
              // Hide the tooltip immediately on ESC key.
              var key = keyboard_1.normalizeKey(evt);
              if (key === keyboard_1.KEY.ESCAPE) {
                var tooltipContainsActiveElement = document.activeElement instanceof HTMLElement && this.adapter.tooltipContainsElement(document.activeElement);
                if (tooltipContainsActiveElement) {
                  this.adapter.focusAnchorElement();
                }
                this.hide();
              }
            };
            MDCTooltipFoundation.prototype.handleRichTooltipMouseEnter = function () {
              this.show();
            };
            MDCTooltipFoundation.prototype.handleRichTooltipMouseLeave = function () {
              var _this = this;
              this.clearShowTimeout();
              this.hideTimeout = setTimeout(function () {
                _this.hide();
              }, this.hideDelayMs);
            };
            MDCTooltipFoundation.prototype.handleRichTooltipFocusOut = function (evt) {
              var anchorOrTooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.relatedTarget) || this.adapter.tooltipContainsElement(evt.relatedTarget));
              // If the focus is still within the anchor or the tooltip, do not hide the
              // tooltip.
              if (anchorOrTooltipContainsRelatedTargetElement) {
                return;
              }
              this.hide();
            };
            /**
             * On window resize or scroll, check the anchor position and size and
             * repostion tooltip if necessary.
             */
            MDCTooltipFoundation.prototype.handleWindowChangeEvent = function () {
              var _this = this;
              // Since scroll and resize events can fire at a high rate, we throttle
              // the potential re-positioning of tooltip component using
              // requestAnimationFrame.
              this.animFrame.request(AnimationKeys.POLL_ANCHOR, function () {
                _this.repositionTooltipOnAnchorMove();
              });
            };
            MDCTooltipFoundation.prototype.show = function () {
              var _this = this;
              this.clearHideTimeout();
              this.clearShowTimeout();
              if (this.isShown) {
                return;
              }
              this.isShown = true;
              var showTooltipOptions = this.parseShowTooltipOptions();
              if (!showTooltipOptions.hideFromScreenreader) {
                this.adapter.setAttribute('aria-hidden', 'false');
              }
              if (this.isRich) {
                if (this.isInteractive) {
                  this.adapter.setAnchorAttribute('aria-expanded', 'true');
                }
                this.adapter.registerEventHandler('focusout', this.richTooltipFocusOutHandler);
                if (!this.isPersistent) {
                  this.adapter.registerEventHandler('mouseenter', this.richTooltipMouseEnterHandler);
                  this.adapter.registerEventHandler('mouseleave', this.richTooltipMouseLeaveHandler);
                }
              }
              this.adapter.removeClass(HIDE);
              this.adapter.addClass(SHOWING);
              if (this.isTooltipMultiline() && !this.isRich) {
                this.adapter.addClass(MULTILINE_TOOLTIP);
              }
              this.anchorRect = this.adapter.getAnchorBoundingRect();
              this.positionTooltip();
              this.adapter.registerDocumentEventHandler('click', this.documentClickHandler);
              this.adapter.registerDocumentEventHandler('keydown', this.documentKeydownHandler);
              this.adapter.registerWindowEventHandler('scroll', this.windowScrollHandler);
              this.adapter.registerWindowEventHandler('resize', this.windowResizeHandler);
              this.frameId = requestAnimationFrame(function () {
                _this.clearAllAnimationClasses();
                _this.adapter.addClass(SHOWN);
                _this.adapter.addClass(SHOWING_TRANSITION);
              });
            };
            MDCTooltipFoundation.prototype.hide = function () {
              this.clearHideTimeout();
              this.clearShowTimeout();
              if (!this.isShown) {
                return;
              }
              if (this.frameId) {
                cancelAnimationFrame(this.frameId);
              }
              this.isShown = false;
              this.adapter.setAttribute('aria-hidden', 'true');
              this.adapter.deregisterEventHandler('focusout', this.richTooltipFocusOutHandler);
              if (this.isRich) {
                if (this.isInteractive) {
                  this.adapter.setAnchorAttribute('aria-expanded', 'false');
                }
                if (!this.isPersistent) {
                  this.adapter.deregisterEventHandler('mouseenter', this.richTooltipMouseEnterHandler);
                  this.adapter.deregisterEventHandler('mouseleave', this.richTooltipMouseLeaveHandler);
                }
              }
              this.clearAllAnimationClasses();
              this.adapter.addClass(HIDE);
              this.adapter.addClass(HIDE_TRANSITION);
              this.adapter.removeClass(SHOWN);
              this.adapter.deregisterDocumentEventHandler('click', this.documentClickHandler);
              this.adapter.deregisterDocumentEventHandler('keydown', this.documentKeydownHandler);
              this.adapter.deregisterWindowEventHandler('scroll', this.windowScrollHandler);
              this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
            };
            MDCTooltipFoundation.prototype.handleTransitionEnd = function () {
              var isHidingTooltip = this.adapter.hasClass(HIDE);
              this.adapter.removeClass(SHOWING);
              this.adapter.removeClass(SHOWING_TRANSITION);
              this.adapter.removeClass(HIDE);
              this.adapter.removeClass(HIDE_TRANSITION);
              // If handleTransitionEnd is called after hiding the tooltip, the tooltip
              // will have the HIDE class (before calling the adapter removeClass method).
              // If tooltip is now hidden, send a notification that the animation has
              // completed and the tooltip is no longer visible.
              if (isHidingTooltip) {
                this.adapter.notifyHidden();
              }
            };
            MDCTooltipFoundation.prototype.clearAllAnimationClasses = function () {
              this.adapter.removeClass(SHOWING_TRANSITION);
              this.adapter.removeClass(HIDE_TRANSITION);
            };
            MDCTooltipFoundation.prototype.setTooltipPosition = function (position) {
              var xPos = position.xPos,
                  yPos = position.yPos;
              if (xPos) {
                this.xTooltipPos = xPos;
              }
              if (yPos) {
                this.yTooltipPos = yPos;
              }
            };
            MDCTooltipFoundation.prototype.setAnchorBoundaryType = function (type) {
              if (type === constants_1.AnchorBoundaryType.UNBOUNDED) {
                this.anchorGap = constants_1.numbers.UNBOUNDED_ANCHOR_GAP;
              } else {
                this.anchorGap = constants_1.numbers.BOUNDED_ANCHOR_GAP;
              }
            };
            MDCTooltipFoundation.prototype.parseShowTooltipOptions = function () {
              var hideFromScreenreader = Boolean(this.adapter.getAnchorAttribute('data-tooltip-id'));
              return { hideFromScreenreader: hideFromScreenreader };
            };
            MDCTooltipFoundation.prototype.isTooltipMultiline = function () {
              var tooltipSize = this.adapter.getTooltipSize();
              return tooltipSize.height > constants_1.numbers.MIN_HEIGHT && tooltipSize.width >= constants_1.numbers.MAX_WIDTH;
            };
            MDCTooltipFoundation.prototype.positionTooltip = function () {
              var _a = this.calculateTooltipDistance(this.anchorRect),
                  top = _a.top,
                  left = _a.left;
              this.adapter.setStyleProperty('top', top + "px");
              this.adapter.setStyleProperty('left', left + "px");
            };
            /**
             * Calculates the position of the tooltip. A tooltip will be placed beneath
             * the anchor element and aligned either with the 'start'/'end' edge of the
             * anchor element or the 'center'.
             *
             * Tooltip alignment is selected such that the tooltip maintains a threshold
             * distance away from the viewport (defaulting to 'center' alignment). If the
             * placement of the anchor prevents this threshold distance from being
             * maintained, the tooltip is positioned so that it does not collide with the
             * viewport.
             *
             * Users can specify an alignment, however, if this alignment results in the
             * tooltip colliding with the viewport, this specification is overwritten.
             */
            MDCTooltipFoundation.prototype.calculateTooltipDistance = function (anchorRect) {
              if (!anchorRect) {
                return { top: 0, left: 0 };
              }
              var tooltipSize = this.adapter.getTooltipSize();
              var top = this.calculateYTooltipDistance(anchorRect, tooltipSize.height);
              var left = this.calculateXTooltipDistance(anchorRect, tooltipSize.width);
              return { top: top, left: left };
            };
            /**
             * Calculates the `left` distance for the tooltip.
             */
            MDCTooltipFoundation.prototype.calculateXTooltipDistance = function (anchorRect, tooltipWidth) {
              var isLTR = !this.adapter.isRTL();
              var startPos, endPos, centerPos;
              if (this.isRich) {
                startPos = isLTR ? anchorRect.left - tooltipWidth : anchorRect.right;
                endPos = isLTR ? anchorRect.right : anchorRect.left - tooltipWidth;
              } else {
                startPos = isLTR ? anchorRect.left : anchorRect.right - tooltipWidth;
                endPos = isLTR ? anchorRect.right - tooltipWidth : anchorRect.left;
                centerPos = anchorRect.left + (anchorRect.width - tooltipWidth) / 2;
              }
              var positionOptions = this.isRich ? this.determineValidPositionOptions(startPos, endPos) :
                  // For plain tooltips, centerPos is defined
                  this.determineValidPositionOptions(centerPos, startPos, endPos);
              if (this.xTooltipPos === constants_1.XPosition.START && positionOptions.has(startPos)) {
                return startPos;
              }
              if (this.xTooltipPos === constants_1.XPosition.END && positionOptions.has(endPos)) {
                return endPos;
              }
              if (this.xTooltipPos === constants_1.XPosition.CENTER && positionOptions.has(centerPos)) {
                return centerPos;
              }
              // If no user position is supplied, rich tooltips default to end pos, then
              // start position. Plain tooltips default to center, start, then end.
              var possiblePositions = this.isRich ? [endPos, startPos] : [centerPos, startPos, endPos];
              var validPosition = possiblePositions.find(function (pos) {
                return positionOptions.has(pos);
              });
              if (validPosition) {
                return validPosition;
              }
              // Indicates that all potential positions would result in the tooltip
              // colliding with the viewport. This would only occur when the anchor
              // element itself collides with the viewport, or the viewport is very
              // narrow. In this case, we allow the tooltip to be mis-aligned from the
              // anchor element.
              if (anchorRect.left < 0) {
                return this.minViewportTooltipThreshold;
              } else {
                var viewportWidth = this.adapter.getViewportWidth();
                return viewportWidth - (tooltipWidth + this.minViewportTooltipThreshold);
              }
            };
            /**
             * Given the values for the horizontal alignments of the tooltip, calculates
             * which of these options would result in the tooltip maintaining the required
             * threshold distance vs which would result in the tooltip staying within the
             * viewport.
             *
             * A Set of values is returned holding the distances that would honor the
             * above requirements. Following the logic for determining the tooltip
             * position, if all alignments violate the threshold, then the returned Set
             * contains values that keep the tooltip within the viewport.
             */
            MDCTooltipFoundation.prototype.determineValidPositionOptions = function () {
              var e_1, _a;
              var positions = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                positions[_i] = arguments[_i];
              }
              var posWithinThreshold = new Set();
              var posWithinViewport = new Set();
              try {
                for (var positions_1 = __values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
                  var position = positions_1_1.value;
                  if (this.positionHonorsViewportThreshold(position)) {
                    posWithinThreshold.add(position);
                  } else if (this.positionDoesntCollideWithViewport(position)) {
                    posWithinViewport.add(position);
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (positions_1_1 && !positions_1_1.done && (_a = positions_1.return)) _a.call(positions_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
              return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
            };
            MDCTooltipFoundation.prototype.positionHonorsViewportThreshold = function (leftPos) {
              var viewportWidth = this.adapter.getViewportWidth();
              var tooltipWidth = this.adapter.getTooltipSize().width;
              return leftPos + tooltipWidth <= viewportWidth - this.minViewportTooltipThreshold && leftPos >= this.minViewportTooltipThreshold;
            };
            MDCTooltipFoundation.prototype.positionDoesntCollideWithViewport = function (leftPos) {
              var viewportWidth = this.adapter.getViewportWidth();
              var tooltipWidth = this.adapter.getTooltipSize().width;
              return leftPos + tooltipWidth <= viewportWidth && leftPos >= 0;
            };
            /**
             * Calculates the `top` distance for the tooltip.
             */
            MDCTooltipFoundation.prototype.calculateYTooltipDistance = function (anchorRect, tooltipHeight) {
              var belowYPos = anchorRect.bottom + this.anchorGap;
              var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight);
              var yPositionOptions = this.determineValidYPositionOptions(aboveYPos, belowYPos);
              if (this.yTooltipPos === constants_1.YPosition.ABOVE && yPositionOptions.has(aboveYPos)) {
                return aboveYPos;
              } else if (this.yTooltipPos === constants_1.YPosition.BELOW && yPositionOptions.has(belowYPos)) {
                return belowYPos;
              }
              if (yPositionOptions.has(belowYPos)) {
                return belowYPos;
              }
              if (yPositionOptions.has(aboveYPos)) {
                return aboveYPos;
              }
              // Indicates that all potential positions would result in the tooltip
              // colliding with the viewport. This would only occur when the viewport is
              // very short.
              return belowYPos;
            };
            /**
             * Given the values for above/below alignment of the tooltip, calculates
             * which of these options would result in the tooltip maintaining the required
             * threshold distance vs which would result in the tooltip staying within the
             * viewport.
             *
             * A Set of values is returned holding the distances that would honor the
             * above requirements. Following the logic for determining the tooltip
             * position, if all possible alignments violate the threshold, then the
             * returned Set contains values that keep the tooltip within the viewport.
             */
            MDCTooltipFoundation.prototype.determineValidYPositionOptions = function (aboveAnchorPos, belowAnchorPos) {
              var posWithinThreshold = new Set();
              var posWithinViewport = new Set();
              if (this.yPositionHonorsViewportThreshold(aboveAnchorPos)) {
                posWithinThreshold.add(aboveAnchorPos);
              } else if (this.yPositionDoesntCollideWithViewport(aboveAnchorPos)) {
                posWithinViewport.add(aboveAnchorPos);
              }
              if (this.yPositionHonorsViewportThreshold(belowAnchorPos)) {
                posWithinThreshold.add(belowAnchorPos);
              } else if (this.yPositionDoesntCollideWithViewport(belowAnchorPos)) {
                posWithinViewport.add(belowAnchorPos);
              }
              return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
            };
            MDCTooltipFoundation.prototype.yPositionHonorsViewportThreshold = function (yPos) {
              var viewportHeight = this.adapter.getViewportHeight();
              var tooltipHeight = this.adapter.getTooltipSize().height;
              return yPos + tooltipHeight + this.minViewportTooltipThreshold <= viewportHeight && yPos >= this.minViewportTooltipThreshold;
            };
            MDCTooltipFoundation.prototype.yPositionDoesntCollideWithViewport = function (yPos) {
              var viewportHeight = this.adapter.getViewportHeight();
              var tooltipHeight = this.adapter.getTooltipSize().height;
              return yPos + tooltipHeight <= viewportHeight && yPos >= 0;
            };
            MDCTooltipFoundation.prototype.repositionTooltipOnAnchorMove = function () {
              var newAnchorRect = this.adapter.getAnchorBoundingRect();
              if (!newAnchorRect || !this.anchorRect) return;
              if (newAnchorRect.top !== this.anchorRect.top || newAnchorRect.left !== this.anchorRect.left || newAnchorRect.height !== this.anchorRect.height || newAnchorRect.width !== this.anchorRect.width) {
                this.anchorRect = newAnchorRect;
                this.positionTooltip();
              }
            };
            MDCTooltipFoundation.prototype.clearShowTimeout = function () {
              if (this.showTimeout) {
                clearTimeout(this.showTimeout);
                this.showTimeout = null;
              }
            };
            MDCTooltipFoundation.prototype.clearHideTimeout = function () {
              if (this.hideTimeout) {
                clearTimeout(this.hideTimeout);
                this.hideTimeout = null;
              }
            };
            MDCTooltipFoundation.prototype.destroy = function () {
              if (this.frameId) {
                cancelAnimationFrame(this.frameId);
                this.frameId = null;
              }
              this.clearHideTimeout();
              this.clearShowTimeout();
              this.adapter.removeClass(SHOWN);
              this.adapter.removeClass(SHOWING_TRANSITION);
              this.adapter.removeClass(SHOWING);
              this.adapter.removeClass(HIDE);
              this.adapter.removeClass(HIDE_TRANSITION);
              if (this.isRich) {
                this.adapter.deregisterEventHandler('focusout', this.richTooltipFocusOutHandler);
                if (!this.isPersistent) {
                  this.adapter.deregisterEventHandler('mouseenter', this.richTooltipMouseEnterHandler);
                  this.adapter.deregisterEventHandler('mouseleave', this.richTooltipMouseLeaveHandler);
                }
              }
              this.adapter.deregisterDocumentEventHandler('click', this.documentClickHandler);
              this.adapter.deregisterDocumentEventHandler('keydown', this.documentKeydownHandler);
              this.adapter.deregisterWindowEventHandler('scroll', this.windowScrollHandler);
              this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
              this.animFrame.cancelAll();
            };
            return MDCTooltipFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTooltipFoundation = MDCTooltipFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTooltipFoundation;

          /***/ }),

        /***/ "./packages/mdc-tooltip/index.ts":
        /*!***************************************!*\
  !*** ./packages/mdc-tooltip/index.ts ***!
  \***************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2020 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-tooltip/component.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-tooltip/foundation.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-tooltip/constants.ts"));

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/component.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-top-app-bar/component.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
          var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-top-app-bar/constants.ts");
          var foundation_1 = __webpack_require__(/*! ./fixed/foundation */ "./packages/mdc-top-app-bar/fixed/foundation.ts");
          var foundation_2 = __webpack_require__(/*! ./short/foundation */ "./packages/mdc-top-app-bar/short/foundation.ts");
          var foundation_3 = __webpack_require__(/*! ./standard/foundation */ "./packages/mdc-top-app-bar/standard/foundation.ts");
          var MDCTopAppBar = /** @class */function (_super) {
            __extends(MDCTopAppBar, _super);
            function MDCTopAppBar() {
              return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCTopAppBar.attachTo = function (root) {
              return new MDCTopAppBar(root);
            };
            MDCTopAppBar.prototype.initialize = function (rippleFactory) {
              if (rippleFactory === void 0) {
                rippleFactory = function rippleFactory(el) {
                  return component_2.MDCRipple.attachTo(el);
                };
              }
              this.navIcon_ = this.root.querySelector(constants_1.strings.NAVIGATION_ICON_SELECTOR);
              // Get all icons in the toolbar and instantiate the ripples
              var icons = [].slice.call(this.root.querySelectorAll(constants_1.strings.ACTION_ITEM_SELECTOR));
              if (this.navIcon_) {
                icons.push(this.navIcon_);
              }
              this.iconRipples_ = icons.map(function (icon) {
                var ripple = rippleFactory(icon);
                ripple.unbounded = true;
                return ripple;
              });
              this.scrollTarget_ = window;
            };
            MDCTopAppBar.prototype.initialSyncWithDOM = function () {
              this.handleNavigationClick_ = this.foundation.handleNavigationClick.bind(this.foundation);
              this.handleWindowResize_ = this.foundation.handleWindowResize.bind(this.foundation);
              this.handleTargetScroll_ = this.foundation.handleTargetScroll.bind(this.foundation);
              this.scrollTarget_.addEventListener('scroll', this.handleTargetScroll_);
              if (this.navIcon_) {
                this.navIcon_.addEventListener('click', this.handleNavigationClick_);
              }
              var isFixed = this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS);
              var isShort = this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS);
              if (!isShort && !isFixed) {
                window.addEventListener('resize', this.handleWindowResize_);
              }
            };
            MDCTopAppBar.prototype.destroy = function () {
              this.iconRipples_.forEach(function (iconRipple) {
                return iconRipple.destroy();
              });
              this.scrollTarget_.removeEventListener('scroll', this.handleTargetScroll_);
              if (this.navIcon_) {
                this.navIcon_.removeEventListener('click', this.handleNavigationClick_);
              }
              var isFixed = this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS);
              var isShort = this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS);
              if (!isShort && !isFixed) {
                window.removeEventListener('resize', this.handleWindowResize_);
              }
              _super.prototype.destroy.call(this);
            };
            MDCTopAppBar.prototype.setScrollTarget = function (target) {
              // Remove scroll handler from the previous scroll target
              this.scrollTarget_.removeEventListener('scroll', this.handleTargetScroll_);
              this.scrollTarget_ = target;
              // Initialize scroll handler on the new scroll target
              this.handleTargetScroll_ = this.foundation.handleTargetScroll.bind(this.foundation);
              this.scrollTarget_.addEventListener('scroll', this.handleTargetScroll_);
            };
            MDCTopAppBar.prototype.getDefaultFoundation = function () {
              var _this = this;
              // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
              // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
              // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
              var adapter = {
                hasClass: function hasClass(className) {
                  return _this.root.classList.contains(className);
                },
                addClass: function addClass(className) {
                  return _this.root.classList.add(className);
                },
                removeClass: function removeClass(className) {
                  return _this.root.classList.remove(className);
                },
                setStyle: function setStyle(property, value) {
                  return _this.root.style.setProperty(property, value);
                },
                getTopAppBarHeight: function getTopAppBarHeight() {
                  return _this.root.clientHeight;
                },
                notifyNavigationIconClicked: function notifyNavigationIconClicked() {
                  return _this.emit(constants_1.strings.NAVIGATION_EVENT, {});
                },
                getViewportScrollY: function getViewportScrollY() {
                  var win = _this.scrollTarget_;
                  var el = _this.scrollTarget_;
                  return win.pageYOffset !== undefined ? win.pageYOffset : el.scrollTop;
                },
                getTotalActionItems: function getTotalActionItems() {
                  return _this.root.querySelectorAll(constants_1.strings.ACTION_ITEM_SELECTOR).length;
                }
              };
              // tslint:enable:object-literal-sort-keys
              var foundation;
              if (this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS)) {
                foundation = new foundation_2.MDCShortTopAppBarFoundation(adapter);
              } else if (this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS)) {
                foundation = new foundation_1.MDCFixedTopAppBarFoundation(adapter);
              } else {
                foundation = new foundation_3.MDCTopAppBarFoundation(adapter);
              }
              return foundation;
            };
            return MDCTopAppBar;
          }(component_1.MDCComponent);
          exports.MDCTopAppBar = MDCTopAppBar;

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/constants.ts":
        /*!***********************************************!*\
  !*** ./packages/mdc-top-app-bar/constants.ts ***!
  \***********************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          Object.defineProperty(exports, "__esModule", { value: true });
          var cssClasses = {
            FIXED_CLASS: 'mdc-top-app-bar--fixed',
            FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
            SHORT_CLASS: 'mdc-top-app-bar--short',
            SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',
            SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item'
          };
          exports.cssClasses = cssClasses;
          var numbers = {
            DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
            MAX_TOP_APP_BAR_HEIGHT: 128
          };
          exports.numbers = numbers;
          var strings = {
            ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
            NAVIGATION_EVENT: 'MDCTopAppBar:nav',
            NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
            ROOT_SELECTOR: '.mdc-top-app-bar',
            TITLE_SELECTOR: '.mdc-top-app-bar__title'
          };
          exports.strings = strings;

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/fixed/foundation.ts":
        /*!******************************************************!*\
  !*** ./packages/mdc-top-app-bar/fixed/foundation.ts ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ../constants */ "./packages/mdc-top-app-bar/constants.ts");
          var foundation_1 = __webpack_require__(/*! ../standard/foundation */ "./packages/mdc-top-app-bar/standard/foundation.ts");
          var MDCFixedTopAppBarFoundation = /** @class */function (_super) {
            __extends(MDCFixedTopAppBarFoundation, _super);
            function MDCFixedTopAppBarFoundation() {
              var _this = _super !== null && _super.apply(this, arguments) || this;
              /**
               * State variable for the previous scroll iteration top app bar state
               */
              _this.wasScrolled_ = false;
              return _this;
            }
            /**
             * Scroll handler for applying/removing the modifier class on the fixed top app bar.
             * @override
             */
            MDCFixedTopAppBarFoundation.prototype.handleTargetScroll = function () {
              var currentScroll = this.adapter.getViewportScrollY();
              if (currentScroll <= 0) {
                if (this.wasScrolled_) {
                  this.adapter.removeClass(constants_1.cssClasses.FIXED_SCROLLED_CLASS);
                  this.wasScrolled_ = false;
                }
              } else {
                if (!this.wasScrolled_) {
                  this.adapter.addClass(constants_1.cssClasses.FIXED_SCROLLED_CLASS);
                  this.wasScrolled_ = true;
                }
              }
            };
            return MDCFixedTopAppBarFoundation;
          }(foundation_1.MDCTopAppBarFoundation);
          exports.MDCFixedTopAppBarFoundation = MDCFixedTopAppBarFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCFixedTopAppBarFoundation;

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/foundation.ts":
        /*!************************************************!*\
  !*** ./packages/mdc-top-app-bar/foundation.ts ***!
  \************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          var __assign = this && this.__assign || function () {
            __assign = Object.assign || function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) {
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
              }
              return t;
            };
            return __assign.apply(this, arguments);
          };
          Object.defineProperty(exports, "__esModule", { value: true });
          var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
          var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-top-app-bar/constants.ts");
          var MDCTopAppBarBaseFoundation = /** @class */function (_super) {
            __extends(MDCTopAppBarBaseFoundation, _super);
            /* istanbul ignore next: optional argument is not a branch statement */
            function MDCTopAppBarBaseFoundation(adapter) {
              return _super.call(this, __assign(__assign({}, MDCTopAppBarBaseFoundation.defaultAdapter), adapter)) || this;
            }
            Object.defineProperty(MDCTopAppBarBaseFoundation, "strings", {
              get: function get() {
                return constants_1.strings;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTopAppBarBaseFoundation, "cssClasses", {
              get: function get() {
                return constants_1.cssClasses;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTopAppBarBaseFoundation, "numbers", {
              get: function get() {
                return constants_1.numbers;
              },
              enumerable: true,
              configurable: true
            });
            Object.defineProperty(MDCTopAppBarBaseFoundation, "defaultAdapter", {
              /**
               * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.
               */
              get: function get() {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                  addClass: function addClass() {
                    return undefined;
                  },
                  removeClass: function removeClass() {
                    return undefined;
                  },
                  hasClass: function hasClass() {
                    return false;
                  },
                  setStyle: function setStyle() {
                    return undefined;
                  },
                  getTopAppBarHeight: function getTopAppBarHeight() {
                    return 0;
                  },
                  notifyNavigationIconClicked: function notifyNavigationIconClicked() {
                    return undefined;
                  },
                  getViewportScrollY: function getViewportScrollY() {
                    return 0;
                  },
                  getTotalActionItems: function getTotalActionItems() {
                    return 0;
                  }
                };
                // tslint:enable:object-literal-sort-keys
              },
              enumerable: true,
              configurable: true
            });
            /** Other variants of TopAppBar foundation overrides this method */
            MDCTopAppBarBaseFoundation.prototype.handleTargetScroll = function () {}; // tslint:disable-line:no-empty
            /** Other variants of TopAppBar foundation overrides this method */
            MDCTopAppBarBaseFoundation.prototype.handleWindowResize = function () {}; // tslint:disable-line:no-empty
            MDCTopAppBarBaseFoundation.prototype.handleNavigationClick = function () {
              this.adapter.notifyNavigationIconClicked();
            };
            return MDCTopAppBarBaseFoundation;
          }(foundation_1.MDCFoundation);
          exports.MDCTopAppBarBaseFoundation = MDCTopAppBarBaseFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTopAppBarBaseFoundation;

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/index.ts":
        /*!*******************************************!*\
  !*** ./packages/mdc-top-app-bar/index.ts ***!
  \*******************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2019 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          function __export(m) {
            for (var p in m) {
              if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          __export(__webpack_require__(/*! ./component */ "./packages/mdc-top-app-bar/component.ts"));
          __export(__webpack_require__(/*! ./constants */ "./packages/mdc-top-app-bar/constants.ts"));
          __export(__webpack_require__(/*! ./foundation */ "./packages/mdc-top-app-bar/foundation.ts"));
          __export(__webpack_require__(/*! ./fixed/foundation */ "./packages/mdc-top-app-bar/fixed/foundation.ts"));
          __export(__webpack_require__(/*! ./short/foundation */ "./packages/mdc-top-app-bar/short/foundation.ts"));
          __export(__webpack_require__(/*! ./standard/foundation */ "./packages/mdc-top-app-bar/standard/foundation.ts"));

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/short/foundation.ts":
        /*!******************************************************!*\
  !*** ./packages/mdc-top-app-bar/short/foundation.ts ***!
  \******************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ../constants */ "./packages/mdc-top-app-bar/constants.ts");
          var foundation_1 = __webpack_require__(/*! ../foundation */ "./packages/mdc-top-app-bar/foundation.ts");
          var MDCShortTopAppBarFoundation = /** @class */function (_super) {
            __extends(MDCShortTopAppBarFoundation, _super);
            /* istanbul ignore next: optional argument is not a branch statement */
            function MDCShortTopAppBarFoundation(adapter) {
              var _this = _super.call(this, adapter) || this;
              _this.isCollapsed_ = false;
              _this.isAlwaysCollapsed_ = false;
              return _this;
            }
            Object.defineProperty(MDCShortTopAppBarFoundation.prototype, "isCollapsed", {
              // Public visibility for backward compatibility.
              get: function get() {
                return this.isCollapsed_;
              },
              enumerable: true,
              configurable: true
            });
            MDCShortTopAppBarFoundation.prototype.init = function () {
              _super.prototype.init.call(this);
              if (this.adapter.getTotalActionItems() > 0) {
                this.adapter.addClass(constants_1.cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);
              }
              // If initialized with SHORT_COLLAPSED_CLASS, the bar should always be collapsed
              this.setAlwaysCollapsed(this.adapter.hasClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS));
            };
            /**
             * Set if the short top app bar should always be collapsed.
             *
             * @param value When `true`, bar will always be collapsed. When `false`, bar may collapse or expand based on scroll.
             */
            MDCShortTopAppBarFoundation.prototype.setAlwaysCollapsed = function (value) {
              this.isAlwaysCollapsed_ = !!value;
              if (this.isAlwaysCollapsed_) {
                this.collapse_();
              } else {
                // let maybeCollapseBar_ determine if the bar should be collapsed
                this.maybeCollapseBar_();
              }
            };
            MDCShortTopAppBarFoundation.prototype.getAlwaysCollapsed = function () {
              return this.isAlwaysCollapsed_;
            };
            /**
             * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.
             * @override
             */
            MDCShortTopAppBarFoundation.prototype.handleTargetScroll = function () {
              this.maybeCollapseBar_();
            };
            MDCShortTopAppBarFoundation.prototype.maybeCollapseBar_ = function () {
              if (this.isAlwaysCollapsed_) {
                return;
              }
              var currentScroll = this.adapter.getViewportScrollY();
              if (currentScroll <= 0) {
                if (this.isCollapsed_) {
                  this.uncollapse_();
                }
              } else {
                if (!this.isCollapsed_) {
                  this.collapse_();
                }
              }
            };
            MDCShortTopAppBarFoundation.prototype.uncollapse_ = function () {
              this.adapter.removeClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS);
              this.isCollapsed_ = false;
            };
            MDCShortTopAppBarFoundation.prototype.collapse_ = function () {
              this.adapter.addClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS);
              this.isCollapsed_ = true;
            };
            return MDCShortTopAppBarFoundation;
          }(foundation_1.MDCTopAppBarBaseFoundation);
          exports.MDCShortTopAppBarFoundation = MDCShortTopAppBarFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCShortTopAppBarFoundation;

          /***/ }),

        /***/ "./packages/mdc-top-app-bar/standard/foundation.ts":
        /*!*********************************************************!*\
  !*** ./packages/mdc-top-app-bar/standard/foundation.ts ***!
  \*********************************************************/
        /*! no static exports found */
        /***/ (function(module, exports, __webpack_require__) {

          "use strict";

          /**
           * @license
           * Copyright 2018 Google Inc.
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy
           * of this software and associated documentation files (the "Software"), to deal
           * in the Software without restriction, including without limitation the rights
           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           * copies of the Software, and to permit persons to whom the Software is
           * furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in
           * all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
           * THE SOFTWARE.
           */

          var __extends = this && this.__extends || function () {
            var _extendStatics = function extendStatics(d, b) {
              _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
              } || function (d, b) {
                for (var p in b) {
                  if (b.hasOwnProperty(p)) d[p] = b[p];
                }
              };
              return _extendStatics(d, b);
            };
            return function (d, b) {
              _extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();
          Object.defineProperty(exports, "__esModule", { value: true });
          var constants_1 = __webpack_require__(/*! ../constants */ "./packages/mdc-top-app-bar/constants.ts");
          var foundation_1 = __webpack_require__(/*! ../foundation */ "./packages/mdc-top-app-bar/foundation.ts");
          var INITIAL_VALUE = 0;
          var MDCTopAppBarFoundation = /** @class */function (_super) {
            __extends(MDCTopAppBarFoundation, _super);
            /* istanbul ignore next: optional argument is not a branch statement */
            function MDCTopAppBarFoundation(adapter) {
              var _this = _super.call(this, adapter) || this;
              /**
               * Indicates if the top app bar was docked in the previous scroll handler iteration.
               */
              _this.wasDocked_ = true;
              /**
               * Indicates if the top app bar is docked in the fully shown position.
               */
              _this.isDockedShowing_ = true;
              /**
               * Variable for current scroll position of the top app bar
               */
              _this.currentAppBarOffsetTop_ = 0;
              /**
               * Used to prevent the top app bar from being scrolled out of view during resize events
               */
              _this.isCurrentlyBeingResized_ = false;
              /**
               * The timeout that's used to throttle the resize events
               */
              _this.resizeThrottleId_ = INITIAL_VALUE;
              /**
               * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize
               */
              _this.resizeDebounceId_ = INITIAL_VALUE;
              _this.lastScrollPosition_ = _this.adapter.getViewportScrollY();
              _this.topAppBarHeight_ = _this.adapter.getTopAppBarHeight();
              return _this;
            }
            MDCTopAppBarFoundation.prototype.destroy = function () {
              _super.prototype.destroy.call(this);
              this.adapter.setStyle('top', '');
            };
            /**
             * Scroll handler for the default scroll behavior of the top app bar.
             * @override
             */
            MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {
              var currentScrollPosition = Math.max(this.adapter.getViewportScrollY(), 0);
              var diff = currentScrollPosition - this.lastScrollPosition_;
              this.lastScrollPosition_ = currentScrollPosition;
              // If the window is being resized the lastScrollPosition_ needs to be updated but the
              // current scroll of the top app bar should stay in the same position.
              if (!this.isCurrentlyBeingResized_) {
                this.currentAppBarOffsetTop_ -= diff;
                if (this.currentAppBarOffsetTop_ > 0) {
                  this.currentAppBarOffsetTop_ = 0;
                } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {
                  this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;
                }
                this.moveTopAppBar_();
              }
            };
            /**
             * Top app bar resize handler that throttle/debounce functions that execute updates.
             * @override
             */
            MDCTopAppBarFoundation.prototype.handleWindowResize = function () {
              var _this = this;
              // Throttle resize events 10 p/s
              if (!this.resizeThrottleId_) {
                this.resizeThrottleId_ = setTimeout(function () {
                  _this.resizeThrottleId_ = INITIAL_VALUE;
                  _this.throttledResizeHandler_();
                }, constants_1.numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
              }
              this.isCurrentlyBeingResized_ = true;
              if (this.resizeDebounceId_) {
                clearTimeout(this.resizeDebounceId_);
              }
              this.resizeDebounceId_ = setTimeout(function () {
                _this.handleTargetScroll();
                _this.isCurrentlyBeingResized_ = false;
                _this.resizeDebounceId_ = INITIAL_VALUE;
              }, constants_1.numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
            };
            /**
             * Function to determine if the DOM needs to update.
             */
            MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {
              var offscreenBoundaryTop = -this.topAppBarHeight_;
              var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;
              var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;
              var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;
              // If it's partially showing, it can't be docked.
              if (partiallyShowing) {
                this.wasDocked_ = false;
              } else {
                // Not previously docked and not partially showing, it's now docked.
                if (!this.wasDocked_) {
                  this.wasDocked_ = true;
                  return true;
                } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {
                  this.isDockedShowing_ = hasAnyPixelsOnscreen;
                  return true;
                }
              }
              return partiallyShowing;
            };
            /**
             * Function to move the top app bar if needed.
             */
            MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {
              if (this.checkForUpdate_()) {
                // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
                // so the top app bar doesn't show if the window resizes and the new height > the old height.
                var offset = this.currentAppBarOffsetTop_;
                if (Math.abs(offset) >= this.topAppBarHeight_) {
                  offset = -constants_1.numbers.MAX_TOP_APP_BAR_HEIGHT;
                }
                this.adapter.setStyle('top', offset + 'px');
              }
            };
            /**
             * Throttled function that updates the top app bar scrolled values if the
             * top app bar height changes.
             */
            MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {
              var currentHeight = this.adapter.getTopAppBarHeight();
              if (this.topAppBarHeight_ !== currentHeight) {
                this.wasDocked_ = false;
                // Since the top app bar has a different height depending on the screen width, this
                // will ensure that the top app bar remains in the correct location if
                // completely hidden and a resize makes the top app bar a different height.
                this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;
                this.topAppBarHeight_ = currentHeight;
              }
              this.handleTargetScroll();
            };
            return MDCTopAppBarFoundation;
          }(foundation_1.MDCTopAppBarBaseFoundation);
          exports.MDCTopAppBarFoundation = MDCTopAppBarFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
          exports.default = MDCTopAppBarFoundation;

          /***/ })

        /******/ });
});
$(window).on('load', function () {
    function initSliders () {
        if ($('.js-range-slider.mdc-slider').parents('html').length > 0) {
            const rangeSlider1 = new mdc.slider.MDCSlider(document.querySelector('.form-field-slider-1 .js-range-slider.mdc-slider'));
            rangeSlider1.root.addEventListener('MDCSlider:change', (e) => {
                // todo
                // if (e.detail.thumb === 1) {
                //     $('.js-range-input-from').val(e.detail.value)
                //         .prev().text(e.detail.value)
                // } else if (e.detail.thumb === 2) {
                //     $('.js-range-input-to').val(e.detail.value)
                //         .prev().text(e.detail.value)
                // }
            });
            const rangeSlider2 = new mdc.slider.MDCSlider(document.querySelector('.form-field-slider-2 .js-range-slider.mdc-slider'));
            rangeSlider2.root.addEventListener('MDCSlider:change', (e) => {
                // todo
            });
        }
    }

    initSliders();
});

$(() => {
    $(".js-button-anchor").click(function(e) {
        e.preventDefault();
        var aid = $(this).attr("data-to");
        $('html,body').animate({scrollTop: $(aid).offset().top},'slow');
    });
});

$(() => {
    $('.js-tel').mask("+7 (999) 999-99-99");
});


// header
$(() => {
    $('.js-show-menu').on('click', function () {
        $('body').addClass('fixed');
        $('.menu').addClass('active');
    });

    $('.js-hide-menu').on('click', function () {
        $('body').removeClass('fixed');
        $('.menu').removeClass('active');
    });
})

// containers
$(() => {
    $(document).on('click', function (e) {
        var container = $('.header');

        if (!container.is(e.target) && container.has(e.target).length === 0) {
            $('.layout').removeClass('blur');
            $('.header-search__base').removeClass('active');
            $('.search-dropdown').removeClass('active');
        }
    });
});


$(() => {
    $('[data-fancybox]').fancybox({
        animationDuration: 600,
        animationEffect: 'slide-in-in',
        touch: false,
        scrolling: true,
    });

    $('.js-close-fancybox').on('click', function () {
        $.fancybox.close();
    });
});



